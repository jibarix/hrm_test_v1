op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 115200}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_7', c0, {c0: 115200}, None),
        MemoryDep('primals_8', c0, {c0: 115200}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (115200, 1)
op0.sizes = ([128, 900], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_8_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_7_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf0_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
class op0_loop_body:
    var_ranges = {z0: 128, z1: 900}
    index0 = z0
    index1 = 900*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_8', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_7', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf0', get_index_3, where, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: '*i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x1 = (xindex // 900)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x2), xmask)
        tmp2 = tl.load(in_ptr2 + (x2), xmask)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tl.store(out_ptr0 + (x2), tmp3, xmask)


op2_op910: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op2_op910.writes = 
    [   MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf910', c0, {c0: 128}, None)]
op2_op910.unmet_dependencies = []
op2_op910.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_11', c0, {c0: 128}, None),
        MemoryDep('primals_12', c0, {c0: 128}, None),
        StarDep(name='primals_18', mode=None)]
op2_op910.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op908'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op910'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf910: ComputedBuffer
    buf910.layout = MutationLayoutSHOULDREMOVE('cuda', torch.int32, size=[128], stride=[1])
    buf910.mutations = ['primals_18']
    buf910.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op2_op910.snodes[0] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 128}, None)]
op2.unmet_dependencies = []
op2.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_11', c0, {c0: 128}, None),
        MemoryDep('primals_12', c0, {c0: 128}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op908'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op910'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (128, 1)
op2.sizes = ([128], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_12_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_11_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
class op2_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_12', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('primals_11', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf2', get_index_3, where, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: '*i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl.load(in_ptr2 + (x0), xmask)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op2_op910.snodes[1] =
op910: SchedulerNode(ComputedBuffer)
op910.writes = [MemoryDep('buf910', c0, {c0: 128}, None)]
op910.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 128}, None)]
op910.met_dependencies = [StarDep(name='primals_18', mode=None)]
op910.outputs = [
    buf910: ComputedBuffer
    buf910.layout = MutationLayoutSHOULDREMOVE('cuda', torch.int32, size=[128], stride=[1])
    buf910.mutations = ['primals_18']
    buf910.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op910.group.device = cuda:0
op910.group.iteration = (128, 1)
op910.sizes = ([128], [])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_18_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf910_layout = MutationLayoutSHOULDREMOVE('cuda', torch.int32, size=[128], stride=[1])
class op910_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf910', get_index_1, load, None)
        return store
op910 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*i32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tl.store(out_ptr0 + (x0), tmp0, xmask)
op2_op910 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: '*i32', 4: '*i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['out_ptr1'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl.load(in_ptr2 + (x0), xmask)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tl.store(out_ptr0 + (x0), tmp3, xmask)
        tl.store(out_ptr1 + (x0), tmp3, xmask)


op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op3_op5.writes = 
    [   MemoryDep('buf3', c0, {c0: 14761984}, None),
        MemoryDep('buf5', c0, {c0: 14761984}, None)]
op3_op5.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None)]
op3_op5.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_2', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_3', c0, {c0: 14761984}, None),
        MemoryDep('primals_4', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_5', c0, {c0: 14761984}, None)]
op3_op5.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op3_op5.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 14761984}, None)]
op3.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None)]
op3.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_2', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_3', c0, {c0: 14761984}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (14761984, 1)
op3.sizes = ([128, 901, 128], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_2_layout = FixedLayout('cuda', torch.bfloat16, size=[128], stride=[1])
primals_3_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_17_layout = FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_15_layout = FixedLayout('cuda', torch.float32, size=[10, 128], stride=[128, 1])
buf3_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op3_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = z0
    index1 = z2
    index2 = 115328*z0 + 128*z1 + z2
    index3 = z1
    index4 = 900*z0 + I
    index5 = 128*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_2', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_3', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index3')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_4 = self.get_index('index3')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_5 = self.get_index('index3')
        index_expr_2 = ops.index_expr(get_index_5, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_6 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_3 = ops.constant(901, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        where_1 = ops.where(lt, masked_subblock1, masked_subblock3)
        constant_4 = ops.constant(11.313708498984761, torch.bfloat16)
        mul = ops.mul(where_1, constant_4)
        add = ops.add(where, mul)
        get_index_7 = self.get_index('index2')
        store = ops.store('buf3', get_index_7, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_17', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf0', get_index)
        set_indirect1 = self.set_indirect1(load)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('primals_15', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
op3 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*bf16', 2: '*bf16', 3: '*i32', 4: '*fp32', 5: '*i32', 6: '*fp32', 7: '*bf16', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = (xindex // 115328)
        x0 = xindex % 128
        x3 = xindex
        x1 = (xindex // 128) % 901
        tmp0 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last').to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (x3), None).to(tl.float32)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp4 = x1
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 1, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr3 + (x2), tmp8, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.full([XBLOCK], 1, tl.int32)
        tmp11 = tmp9 + tmp10
        tmp12 = tmp9 < 0
        tmp13 = tl.where(tmp12, tmp11, tmp9)
        tl.device_assert(((0 <= tl.broadcast_to(tmp13, [XBLOCK])) & (tl.broadcast_to(tmp13, [XBLOCK]) < 1)) | ~(tmp8), "index out of bounds: 0 <= tl.broadcast_to(tmp13, [XBLOCK]) < 1")
        tmp15 = tl.load(in_ptr4 + (x0), tmp8, eviction_policy='evict_last', other=0.0)
        tmp16 = tmp15.to(tl.float32)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp8, tmp16, tmp17)
        tmp19 = tmp4 >= tmp7
        tmp20 = tl.full([1], 901, tl.int64)
        tmp21 = tmp4 < tmp20
        tmp22 = tl.load(in_ptr5 + ((900*x2) + ((-1) + x1)), tmp19, eviction_policy='evict_last', other=0.0)
        tmp23 = tl.full([XBLOCK], 10, tl.int32)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp22 < 0
        tmp26 = tl.where(tmp25, tmp24, tmp22)
        tl.device_assert(((0 <= tl.broadcast_to(tmp26, [XBLOCK])) & (tl.broadcast_to(tmp26, [XBLOCK]) < 10)) | ~(tmp19), "index out of bounds: 0 <= tl.broadcast_to(tmp26, [XBLOCK]) < 10")
        tmp28 = tl.load(in_ptr6 + (x0 + (128*tmp26)), tmp19, other=0.0)
        tmp29 = tmp28.to(tl.float32)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp19, tmp29, tmp30)
        tmp32 = tl.where(tmp8, tmp18, tmp31)
        tmp33 = 11.313708498984761
        tmp34 = tmp32 * tmp33
        tmp35 = tmp3 + tmp34
        tl.store(out_ptr0 + (x3), tmp35, None)
op3_op5.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 14761984}, None)]
op5.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 14761984}, None)]
op5.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_4', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_5', c0, {c0: 14761984}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (14761984, 1)
op5.sizes = ([128, 901, 128], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_4_layout = FixedLayout('cuda', torch.bfloat16, size=[128], stride=[1])
primals_5_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf3_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf5_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op5_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = z0
    index1 = z2
    index2 = 115328*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_4', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_5', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf3', get_index_3)
        add = ops.add(where, load_3)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf5', get_index_4, add, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = (xindex // 115328)
        x0 = xindex % 128
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last').to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (x3), None).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (x3), None).to(tl.float32)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp5 = tmp3 + tmp4
        tl.store(out_ptr0 + (x3), tmp5, None)
op3_op5 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*bf16', 2: '*bf16', 3: '*i32', 4: '*fp32', 5: '*i32', 6: '*fp32', 7: '*bf16', 8: '*bf16', 9: '*bf16', 10: '*bf16', 11: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(11,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = (xindex // 115328)
        x0 = xindex % 128
        x3 = xindex
        x1 = (xindex // 128) % 901
        tmp0 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last').to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (x3), None).to(tl.float32)
        tmp36 = tl.load(in_ptr7 + (x0), None, eviction_policy='evict_last').to(tl.float32)
        tmp37 = tl.load(in_ptr8 + (x3), None).to(tl.float32)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp4 = x1
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 1, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr3 + (x2), tmp8, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.full([XBLOCK], 1, tl.int32)
        tmp11 = tmp9 + tmp10
        tmp12 = tmp9 < 0
        tmp13 = tl.where(tmp12, tmp11, tmp9)
        tl.device_assert(((0 <= tl.broadcast_to(tmp13, [XBLOCK])) & (tl.broadcast_to(tmp13, [XBLOCK]) < 1)) | ~(tmp8), "index out of bounds: 0 <= tl.broadcast_to(tmp13, [XBLOCK]) < 1")
        tmp15 = tl.load(in_ptr4 + (x0), tmp8, eviction_policy='evict_last', other=0.0)
        tmp16 = tmp15.to(tl.float32)
        tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
        tmp18 = tl.where(tmp8, tmp16, tmp17)
        tmp19 = tmp4 >= tmp7
        tmp20 = tl.full([1], 901, tl.int64)
        tmp21 = tmp4 < tmp20
        tmp22 = tl.load(in_ptr5 + ((900*x2) + ((-1) + x1)), tmp19, eviction_policy='evict_last', other=0.0)
        tmp23 = tl.full([XBLOCK], 10, tl.int32)
        tmp24 = tmp22 + tmp23
        tmp25 = tmp22 < 0
        tmp26 = tl.where(tmp25, tmp24, tmp22)
        tl.device_assert(((0 <= tl.broadcast_to(tmp26, [XBLOCK])) & (tl.broadcast_to(tmp26, [XBLOCK]) < 10)) | ~(tmp19), "index out of bounds: 0 <= tl.broadcast_to(tmp26, [XBLOCK]) < 10")
        tmp28 = tl.load(in_ptr6 + (x0 + (128*tmp26)), tmp19, other=0.0)
        tmp29 = tmp28.to(tl.float32)
        tmp30 = tl.full(tmp29.shape, 0.0, tmp29.dtype)
        tmp31 = tl.where(tmp19, tmp29, tmp30)
        tmp32 = tl.where(tmp8, tmp18, tmp31)
        tmp33 = 11.313708498984761
        tmp34 = tmp32 * tmp33
        tmp35 = tmp3 + tmp34
        tmp38 = tl.where(tmp0, tmp36, tmp37)
        tmp39 = tmp38 + tmp35
        tl.store(out_ptr0 + (x3), tmp35, None)
        tl.store(out_ptr1 + (x3), tmp39, None)


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 49152}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('primals_19', c0, {c0: 49152}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (49152, 1)
op4.sizes = ([49152], [])
primals_19_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf4_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op4_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_19', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, to_dtype, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
    ]
]
op6.node.kernel = extern_kernels.mm


op7_op8: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op7_op8.writes = 
    [   MemoryDep('buf7', c0, {c0: 14761984}, None),
        MemoryDep('buf8', c0, {c0: 14761984}, None)]
op7_op8.unmet_dependencies = 
    [   MemoryDep('buf6', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf6', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op7_op8.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op7_op8.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op7_op8.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 14761984}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf6', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op7.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (14761984, 1)
op7.sizes = ([128, 901, 2, 64], [])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf7_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op7_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf7', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op7 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op7_op8.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 14761984}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf6', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf6', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op8.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (14761984, 1)
op8.sizes = ([128, 901, 2, 64], [])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf6_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf8_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op8_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf8', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf6', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op8 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op7_op8 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op9: ExternKernelSchedulerNode(FallbackKernel)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = 
    [   StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None),
        StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: FallbackKernel
    buf9.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op9.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op10: ExternKernelSchedulerNode(MultiOutput)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: MultiOutput
    buf10.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = None


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 16384}, None)]
op14.unmet_dependencies = []
op14.met_dependencies = [MemoryDep('primals_20', c0, {c0: 16384}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (16384, 1)
op14.sizes = ([16384], [])
primals_20_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf14_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op14_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_20', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf14', get_index_1, to_dtype, None)
        return store
op14 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op18: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op16_op18.writes = 
    [   MemoryDep('buf16', c0, {c0: 115328}, None),
        MemoryDep('buf18', c0, {c0: 14761984}, None)]
op16_op18.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 14761984}, None),
        MemoryDep('buf5', c0, {c0: 14761984}, None)]
op16_op18.met_dependencies = []
op16_op18.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf16.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op16_op18.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 115328}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 14761984}, None),
        MemoryDep('buf5', c0, {c0: 14761984}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf16.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (115328, 128)
op16.sizes = ([115328], [128])
buf5_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf15_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op16_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf16', get_index_2, reduction)
        return store_reduction
op16 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op16_op18.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 14761984}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 14761984}, None),
        MemoryDep('buf16', c0, {c0: 115328}, None),
        MemoryDep('buf5', c0, {c0: 14761984}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (14761984, 1)
op18.sizes = ([115328, 128], [])
buf5_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf15_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf18_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op18_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf15', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf16', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf18', get_index_3, to_dtype_1, None)
        return store
op18 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op16_op18 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 65536}, None)]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('primals_22', c0, {c0: 65536}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (65536, 1)
op20.sizes = ([65536], [])
primals_22_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf20_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op20_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_22', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf20', get_index_1, to_dtype, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 131072}, None)]
op17.unmet_dependencies = []
op17.met_dependencies = [MemoryDep('primals_21', c0, {c0: 131072}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf17.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (131072, 1)
op17.sizes = ([131072], [])
primals_21_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf17_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op17_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf17', get_index_1, to_dtype, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf18', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 59047936}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf19', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf19', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (59047936, 1)
op21.sizes = ([115328, 512], [])
buf19_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf19_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf21_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op21_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf21', get_index_3, mul_1, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf21', mode=None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf22.users = [
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
    ]
]
op22.node.kernel = extern_kernels.mm


op23_op25: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op23_op25.writes = 
    [   MemoryDep('buf23', c0, {c0: 115328}, None),
        MemoryDep('buf25', c0, {c0: 14761984}, None)]
op23_op25.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 14761984}, None),
        MemoryDep('buf22', c0, {c0: 14761984}, None)]
op23_op25.met_dependencies = []
op23_op25.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op23_op25.snodes[0] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 115328}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 14761984}, None),
        MemoryDep('buf22', c0, {c0: 14761984}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (115328, 128)
op23.sizes = ([115328], [128])
buf18_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf22_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op23_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_2, reduction)
        return store_reduction
op23 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op23_op25.snodes[1] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 14761984}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 14761984}, None),
        MemoryDep('buf22', c0, {c0: 14761984}, None),
        MemoryDep('buf23', c0, {c0: 115328}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf25.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (14761984, 1)
op25.sizes = ([115328, 128], [])
buf18_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf22_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf25_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op25_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf22', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf23', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf25', get_index_3, to_dtype_1, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op23_op25 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 49152}, None)]
op24.unmet_dependencies = []
op24.met_dependencies = [MemoryDep('primals_23', c0, {c0: 49152}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (49152, 1)
op24.sizes = ([49152], [])
primals_23_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf24_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op24_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_23', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf24', get_index_1, to_dtype, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf25', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op26.node.kernel = extern_kernels.mm


op27_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op27_op28.writes = 
    [   MemoryDep('buf27', c0, {c0: 14761984}, None),
        MemoryDep('buf28', c0, {c0: 14761984}, None)]
op27_op28.unmet_dependencies = 
    [   MemoryDep('buf26', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf26', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op27_op28.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op27_op28.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27_op28.snodes[0] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 14761984}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf26', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op27.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (14761984, 1)
op27.sizes = ([128, 901, 2, 64], [])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf27_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op27_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf27', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op27 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op27_op28.snodes[1] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 14761984}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf26', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op28.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (14761984, 1)
op28.sizes = ([128, 901, 2, 64], [])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf26_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf28_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op28_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf28', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf26', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op28 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op27_op28 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op29: ExternKernelSchedulerNode(FallbackKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = 
    [   StarDep(name='buf26', mode=None),
        StarDep(name='buf27', mode=None),
        StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: FallbackKernel
    buf29.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op29.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op30: ExternKernelSchedulerNode(MultiOutput)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: MultiOutput
    buf30.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = None


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 16384}, None)]
op34.unmet_dependencies = []
op34.met_dependencies = [MemoryDep('primals_24', c0, {c0: 16384}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (16384, 1)
op34.sizes = ([16384], [])
primals_24_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf34_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op34_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_24', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf34', get_index_1, to_dtype, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.mm


op36_op38: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op36_op38.writes = 
    [   MemoryDep('buf36', c0, {c0: 115328}, None),
        MemoryDep('buf38', c0, {c0: 14761984}, None)]
op36_op38.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 14761984}, None),
        MemoryDep('buf35', c0, {c0: 14761984}, None)]
op36_op38.met_dependencies = []
op36_op38.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf38.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op36_op38.snodes[0] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 115328}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 14761984}, None),
        MemoryDep('buf35', c0, {c0: 14761984}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf36.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (115328, 128)
op36.sizes = ([115328], [128])
buf25_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf35_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op36_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_2, reduction)
        return store_reduction
op36 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op36_op38.snodes[1] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 14761984}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 14761984}, None),
        MemoryDep('buf35', c0, {c0: 14761984}, None),
        MemoryDep('buf36', c0, {c0: 115328}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf38.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (14761984, 1)
op38.sizes = ([115328, 128], [])
buf25_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf35_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf38_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op38_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf36', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf38', get_index_3, to_dtype_1, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op36_op38 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 65536}, None)]
op40.unmet_dependencies = []
op40.met_dependencies = [MemoryDep('primals_26', c0, {c0: 65536}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (65536, 1)
op40.sizes = ([65536], [])
primals_26_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op40_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_26', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf40', get_index_1, to_dtype, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 131072}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('primals_25', c0, {c0: 131072}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (131072, 1)
op37.sizes = ([131072], [])
primals_25_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf37_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op37_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_25', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf37', get_index_1, to_dtype, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 59047936}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf39', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf39', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (59047936, 1)
op41.sizes = ([115328, 512], [])
buf39_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf39_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf41_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op41_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf39', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf39', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf41', get_index_3, mul_1, None)
        return store
op41 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf40', mode=None), StarDep(name='buf41', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op43_op45.writes = 
    [   MemoryDep('buf43', c0, {c0: 115328}, None),
        MemoryDep('buf45', c0, {c0: 14761984}, None)]
op43_op45.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 14761984}, None),
        MemoryDep('buf42', c0, {c0: 14761984}, None)]
op43_op45.met_dependencies = []
op43_op45.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op43_op45.snodes[0] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 115328}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 14761984}, None),
        MemoryDep('buf42', c0, {c0: 14761984}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (115328, 128)
op43.sizes = ([115328], [128])
buf38_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf42_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op43_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_2, reduction)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op43_op45.snodes[1] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 14761984}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 14761984}, None),
        MemoryDep('buf42', c0, {c0: 14761984}, None),
        MemoryDep('buf43', c0, {c0: 115328}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op45.group.device = cuda:0
op45.group.iteration = (14761984, 1)
op45.sizes = ([115328, 128], [])
buf38_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf42_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf45_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op45_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf43', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf45', get_index_3, to_dtype_1, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op43_op45 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 49152}, None)]
op44.unmet_dependencies = []
op44.met_dependencies = [MemoryDep('primals_27', c0, {c0: 49152}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf44.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op44.group.device = cuda:0
op44.group.iteration = (49152, 1)
op44.sizes = ([49152], [])
primals_27_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf44_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op44_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf44', get_index_1, to_dtype, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.mm


op47_op48: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op47_op48.writes = 
    [   MemoryDep('buf47', c0, {c0: 14761984}, None),
        MemoryDep('buf48', c0, {c0: 14761984}, None)]
op47_op48.unmet_dependencies = 
    [   MemoryDep('buf46', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf46', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op47_op48.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op47_op48.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47_op48.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 14761984}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf46', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op47.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (14761984, 1)
op47.sizes = ([128, 901, 2, 64], [])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf47_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op47_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf47', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op47 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op47_op48.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 14761984}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf46', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf46', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op48.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (14761984, 1)
op48.sizes = ([128, 901, 2, 64], [])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf46_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf48_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op48_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf48', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf46', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op48 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op47_op48 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op49: ExternKernelSchedulerNode(FallbackKernel)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = 
    [   StarDep(name='buf46', mode=None),
        StarDep(name='buf47', mode=None),
        StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: FallbackKernel
    buf49.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf49.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op49.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op50: ExternKernelSchedulerNode(MultiOutput)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: MultiOutput
    buf50.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = None


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 16384}, None)]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('primals_28', c0, {c0: 16384}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (16384, 1)
op54.sizes = ([16384], [])
primals_28_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf54_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op54_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_28', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, to_dtype, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf50', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op55.node.kernel = extern_kernels.mm


op56_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op56_op58.writes = 
    [   MemoryDep('buf56', c0, {c0: 115328}, None),
        MemoryDep('buf58', c0, {c0: 14761984}, None)]
op56_op58.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 14761984}, None),
        MemoryDep('buf55', c0, {c0: 14761984}, None)]
op56_op58.met_dependencies = []
op56_op58.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
    ]
]
op56_op58.snodes[0] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 115328}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 14761984}, None),
        MemoryDep('buf55', c0, {c0: 14761984}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (115328, 128)
op56.sizes = ([115328], [128])
buf45_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf55_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op56_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf55', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_2, reduction)
        return store_reduction
op56 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op56_op58.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 14761984}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 14761984}, None),
        MemoryDep('buf55', c0, {c0: 14761984}, None),
        MemoryDep('buf56', c0, {c0: 115328}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (14761984, 1)
op58.sizes = ([115328, 128], [])
buf45_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf55_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf58_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op58_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf55', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf56', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf58', get_index_3, to_dtype_1, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op56_op58 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 65536}, None)]
op60.unmet_dependencies = []
op60.met_dependencies = [MemoryDep('primals_30', c0, {c0: 65536}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (65536, 1)
op60.sizes = ([65536], [])
primals_30_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf60_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op60_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf60', get_index_1, to_dtype, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 131072}, None)]
op57.unmet_dependencies = []
op57.met_dependencies = [MemoryDep('primals_29', c0, {c0: 131072}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (131072, 1)
op57.sizes = ([131072], [])
primals_29_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf57_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op57_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf57', get_index_1, to_dtype, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf57', mode=None), StarDep(name='buf58', mode=None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 59047936}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf59', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf59', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (59047936, 1)
op61.sizes = ([115328, 512], [])
buf59_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf59_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf61_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op61_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf59', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf61', get_index_3, mul_1, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None), StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
    ]
]
op62.node.kernel = extern_kernels.mm


op63_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op63_op65.writes = 
    [   MemoryDep('buf63', c0, {c0: 115328}, None),
        MemoryDep('buf65', c0, {c0: 14761984}, None)]
op63_op65.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 14761984}, None),
        MemoryDep('buf62', c0, {c0: 14761984}, None)]
op63_op65.met_dependencies = []
op63_op65.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf65.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op63_op65.snodes[0] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 115328}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 14761984}, None),
        MemoryDep('buf62', c0, {c0: 14761984}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (115328, 128)
op63.sizes = ([115328], [128])
buf58_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf62_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op63_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_2, reduction)
        return store_reduction
op63 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op63_op65.snodes[1] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 14761984}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 14761984}, None),
        MemoryDep('buf62', c0, {c0: 14761984}, None),
        MemoryDep('buf63', c0, {c0: 115328}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf65.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (14761984, 1)
op65.sizes = ([115328, 128], [])
buf58_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf62_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf65_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op65_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf63', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf65', get_index_3, to_dtype_1, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op63_op65 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 49152}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = [MemoryDep('primals_31', c0, {c0: 49152}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (49152, 1)
op64.sizes = ([49152], [])
primals_31_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf64_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op64_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_31', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf64', get_index_1, to_dtype, None)
        return store
op64 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf64', mode=None), StarDep(name='buf65', mode=None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf66.users = [
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op66.node.kernel = extern_kernels.mm


op67_op68: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op67_op68.writes = 
    [   MemoryDep('buf67', c0, {c0: 14761984}, None),
        MemoryDep('buf68', c0, {c0: 14761984}, None)]
op67_op68.unmet_dependencies = 
    [   MemoryDep('buf66', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf66', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op67_op68.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op67_op68.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67_op68.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 14761984}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf66', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op67.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (14761984, 1)
op67.sizes = ([128, 901, 2, 64], [])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf67_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op67_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf67', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op67 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op67_op68.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 14761984}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf66', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf66', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op68.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (14761984, 1)
op68.sizes = ([128, 901, 2, 64], [])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf66_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf68_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op68_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf68', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf66', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op68 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op67_op68 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op69: ExternKernelSchedulerNode(FallbackKernel)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = 
    [   StarDep(name='buf66', mode=None),
        StarDep(name='buf67', mode=None),
        StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: FallbackKernel
    buf69.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op69.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op70: ExternKernelSchedulerNode(MultiOutput)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: MultiOutput
    buf70.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op70.node.kernel = None


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 16384}, None)]
op74.unmet_dependencies = []
op74.met_dependencies = [MemoryDep('primals_32', c0, {c0: 16384}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (16384, 1)
op74.sizes = ([16384], [])
primals_32_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf74_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op74_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_32', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf74', get_index_1, to_dtype, None)
        return store
op74 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op76_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op76_op78.writes = 
    [   MemoryDep('buf76', c0, {c0: 115328}, None),
        MemoryDep('buf78', c0, {c0: 14761984}, None)]
op76_op78.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 14761984}, None),
        MemoryDep('buf75', c0, {c0: 14761984}, None)]
op76_op78.met_dependencies = []
op76_op78.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op76_op78.snodes[0] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 115328}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 14761984}, None),
        MemoryDep('buf75', c0, {c0: 14761984}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (115328, 128)
op76.sizes = ([115328], [128])
buf65_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf75_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op76_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_2, reduction)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op76_op78.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 14761984}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 14761984}, None),
        MemoryDep('buf75', c0, {c0: 14761984}, None),
        MemoryDep('buf76', c0, {c0: 115328}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (14761984, 1)
op78.sizes = ([115328, 128], [])
buf65_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf75_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf78_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op78_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf75', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf76', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf78', get_index_3, to_dtype_1, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op76_op78 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 65536}, None)]
op80.unmet_dependencies = []
op80.met_dependencies = [MemoryDep('primals_34', c0, {c0: 65536}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf80.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (65536, 1)
op80.sizes = ([65536], [])
primals_34_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf80_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op80_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_34', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf80', get_index_1, to_dtype, None)
        return store
op80 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 131072}, None)]
op77.unmet_dependencies = []
op77.met_dependencies = [MemoryDep('primals_33', c0, {c0: 131072}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (131072, 1)
op77.sizes = ([131072], [])
primals_33_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf77_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op77_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_33', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf77', get_index_1, to_dtype, None)
        return store
op77 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf77', mode=None), StarDep(name='buf78', mode=None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 59047936}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf79', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf79', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (59047936, 1)
op81.sizes = ([115328, 512], [])
buf79_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf79_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf81_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op81_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf81', get_index_3, mul_1, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf80', mode=None), StarDep(name='buf81', mode=None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.mm


op83_op84: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op83_op84.writes = 
    [   MemoryDep('buf83', c0, {c0: 115328}, None),
        MemoryDep('buf84', c0, {c0: 14761984}, None)]
op83_op84.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 14761984}, None),
        MemoryDep('buf78', c0, {c0: 14761984}, None),
        MemoryDep('buf82', c0, {c0: 14761984}, None)]
op83_op84.met_dependencies = []
op83_op84.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op83_op84.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 115328}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 14761984}, None),
        MemoryDep('buf82', c0, {c0: 14761984}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (115328, 128)
op83.sizes = ([115328], [128])
buf78_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf82_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op83_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf82', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_2, reduction)
        return store_reduction
op83 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op83_op84.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 14761984}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 14761984}, None),
        MemoryDep('buf78', c0, {c0: 14761984}, None),
        MemoryDep('buf82', c0, {c0: 14761984}, None),
        MemoryDep('buf83', c0, {c0: 115328}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf84.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (14761984, 1)
op84.sizes = ([115328, 128], [])
buf78_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf82_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf3_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf84_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op84_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf82', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf83', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf3', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, add_2, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op83_op84 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp17, xmask)


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.mm


op86_op87: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op86_op87.writes = 
    [   MemoryDep('buf86', c0, {c0: 14761984}, None),
        MemoryDep('buf87', c0, {c0: 14761984}, None)]
op86_op87.unmet_dependencies = 
    [   MemoryDep('buf85', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf85', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op86_op87.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op86_op87.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86_op87.snodes[0] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 14761984}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf85', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op86.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (14761984, 1)
op86.sizes = ([128, 901, 2, 64], [])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf86_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op86_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf86', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op86 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op86_op87.snodes[1] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 14761984}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf85', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf85', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op87.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (14761984, 1)
op87.sizes = ([128, 901, 2, 64], [])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf85_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf87_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op87_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf87', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf85', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op87 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op86_op87 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op88: ExternKernelSchedulerNode(FallbackKernel)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = 
    [   StarDep(name='buf85', mode=None),
        StarDep(name='buf86', mode=None),
        StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: FallbackKernel
    buf88.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
    ]
]
op88.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op89: ExternKernelSchedulerNode(MultiOutput)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: MultiOutput
    buf89.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = None


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf89', mode=None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op93.node.kernel = extern_kernels.mm


op94_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op94_op95.writes = 
    [   MemoryDep('buf94', c0, {c0: 115328}, None),
        MemoryDep('buf95', c0, {c0: 14761984}, None)]
op94_op95.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 14761984}, None),
        MemoryDep('buf93', c0, {c0: 14761984}, None)]
op94_op95.met_dependencies = []
op94_op95.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op94_op95.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 115328}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 14761984}, None),
        MemoryDep('buf93', c0, {c0: 14761984}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (115328, 128)
op94.sizes = ([115328], [128])
buf84_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf93_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op94_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_2, reduction)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op94_op95.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 14761984}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 14761984}, None),
        MemoryDep('buf93', c0, {c0: 14761984}, None),
        MemoryDep('buf94', c0, {c0: 115328}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (14761984, 1)
op95.sizes = ([115328, 128], [])
buf84_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf93_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf95_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op95_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf95', get_index_3, to_dtype_1, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op94_op95 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf95', mode=None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 59047936}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf96', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf96', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (59047936, 1)
op97.sizes = ([115328, 512], [])
buf96_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf96_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf97_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op97_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf96', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf97', get_index_3, mul_1, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.mm


op99_op100: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op99_op100.writes = 
    [   MemoryDep('buf100', c0, {c0: 14761984}, None),
        MemoryDep('buf99', c0, {c0: 115328}, None)]
op99_op100.unmet_dependencies = 
    [   MemoryDep('buf95', c0, {c0: 14761984}, None),
        MemoryDep('buf98', c0, {c0: 14761984}, None)]
op99_op100.met_dependencies = []
op99_op100.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op99_op100.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 115328}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf95', c0, {c0: 14761984}, None),
        MemoryDep('buf98', c0, {c0: 14761984}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (115328, 128)
op99.sizes = ([115328], [128])
buf95_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf98_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op99_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_2, reduction)
        return store_reduction
op99 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op99_op100.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 14761984}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf95', c0, {c0: 14761984}, None),
        MemoryDep('buf98', c0, {c0: 14761984}, None),
        MemoryDep('buf99', c0, {c0: 115328}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (14761984, 1)
op100.sizes = ([115328, 128], [])
buf95_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf98_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf100_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op100_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf98', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf100', get_index_3, to_dtype_1, None)
        return store
op100 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op99_op100 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf24', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op101.node.kernel = extern_kernels.mm


op102_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op102_op103.writes = 
    [   MemoryDep('buf102', c0, {c0: 14761984}, None),
        MemoryDep('buf103', c0, {c0: 14761984}, None)]
op102_op103.unmet_dependencies = 
    [   MemoryDep('buf101', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf101', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op102_op103.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op102_op103.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102_op103.snodes[0] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 14761984}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op102.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (14761984, 1)
op102.sizes = ([128, 901, 2, 64], [])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf102_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op102_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf102', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op102 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op102_op103.snodes[1] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 14761984}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf101', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf101', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op103.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (14761984, 1)
op103.sizes = ([128, 901, 2, 64], [])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf101_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf103_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op103_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf103', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf101', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op103 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op102_op103 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op104: ExternKernelSchedulerNode(FallbackKernel)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = 
    [   StarDep(name='buf101', mode=None),
        StarDep(name='buf102', mode=None),
        StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: FallbackKernel
    buf104.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op104.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op105: ExternKernelSchedulerNode(MultiOutput)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: MultiOutput
    buf105.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = None


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf105', mode=None), StarDep(name='buf34', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op109.node.kernel = extern_kernels.mm


op110_op111: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op110_op111.writes = 
    [   MemoryDep('buf110', c0, {c0: 115328}, None),
        MemoryDep('buf111', c0, {c0: 14761984}, None)]
op110_op111.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 14761984}, None),
        MemoryDep('buf109', c0, {c0: 14761984}, None)]
op110_op111.met_dependencies = []
op110_op111.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op110_op111.snodes[0] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 115328}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 14761984}, None),
        MemoryDep('buf109', c0, {c0: 14761984}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (115328, 128)
op110.sizes = ([115328], [128])
buf100_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf109_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op110_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_2, reduction)
        return store_reduction
op110 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op110_op111.snodes[1] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 14761984}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 14761984}, None),
        MemoryDep('buf109', c0, {c0: 14761984}, None),
        MemoryDep('buf110', c0, {c0: 115328}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (14761984, 1)
op111.sizes = ([115328, 128], [])
buf100_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf109_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf111_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op111_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf110', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf111', get_index_3, to_dtype_1, None)
        return store
op111 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op110_op111 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf37', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 59047936}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf112', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf112', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (59047936, 1)
op113.sizes = ([115328, 512], [])
buf112_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf112_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf113_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op113_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf112', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf113', get_index_3, mul_1, None)
        return store
op113 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None), StarDep(name='buf40', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op114.node.kernel = extern_kernels.mm


op115_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op115_op116.writes = 
    [   MemoryDep('buf115', c0, {c0: 115328}, None),
        MemoryDep('buf116', c0, {c0: 14761984}, None)]
op115_op116.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 14761984}, None),
        MemoryDep('buf114', c0, {c0: 14761984}, None)]
op115_op116.met_dependencies = []
op115_op116.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
    ]
]
op115_op116.snodes[0] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 115328}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 14761984}, None),
        MemoryDep('buf114', c0, {c0: 14761984}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (115328, 128)
op115.sizes = ([115328], [128])
buf111_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf114_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op115_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_2, reduction)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op115_op116.snodes[1] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 14761984}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 14761984}, None),
        MemoryDep('buf114', c0, {c0: 14761984}, None),
        MemoryDep('buf115', c0, {c0: 115328}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (14761984, 1)
op116.sizes = ([115328, 128], [])
buf111_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf114_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf116_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op116_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf116', get_index_3, to_dtype_1, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op115_op116 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None), StarDep(name='buf44', mode=None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.node.kernel = extern_kernels.mm


op118_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op118_op119.writes = 
    [   MemoryDep('buf118', c0, {c0: 14761984}, None),
        MemoryDep('buf119', c0, {c0: 14761984}, None)]
op118_op119.unmet_dependencies = 
    [   MemoryDep('buf117', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf117', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op118_op119.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op118_op119.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118_op119.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 14761984}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf117', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op118.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (14761984, 1)
op118.sizes = ([128, 901, 2, 64], [])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf118_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op118_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf118', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op118 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op118_op119.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 14761984}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf117', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf117', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op119.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (14761984, 1)
op119.sizes = ([128, 901, 2, 64], [])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf117_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf119_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op119_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf119', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf117', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op119 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op118_op119 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op120: ExternKernelSchedulerNode(FallbackKernel)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = 
    [   StarDep(name='buf117', mode=None),
        StarDep(name='buf118', mode=None),
        StarDep(name='buf119', mode=None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: FallbackKernel
    buf120.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
    ]
]
op120.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op121: ExternKernelSchedulerNode(MultiOutput)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: MultiOutput
    buf121.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = None


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf121', mode=None), StarDep(name='buf54', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
    ]
]
op125.node.kernel = extern_kernels.mm


op126_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op126_op127.writes = 
    [   MemoryDep('buf126', c0, {c0: 115328}, None),
        MemoryDep('buf127', c0, {c0: 14761984}, None)]
op126_op127.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 14761984}, None),
        MemoryDep('buf125', c0, {c0: 14761984}, None)]
op126_op127.met_dependencies = []
op126_op127.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op126_op127.snodes[0] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 115328}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 14761984}, None),
        MemoryDep('buf125', c0, {c0: 14761984}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (115328, 128)
op126.sizes = ([115328], [128])
buf116_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf125_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op126_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf125', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_2, reduction)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op126_op127.snodes[1] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 14761984}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 14761984}, None),
        MemoryDep('buf125', c0, {c0: 14761984}, None),
        MemoryDep('buf126', c0, {c0: 115328}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (14761984, 1)
op127.sizes = ([115328, 128], [])
buf116_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf125_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf127_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op127_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf125', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf126', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf127', get_index_3, to_dtype_1, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op126_op127 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None), StarDep(name='buf57', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 59047936}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf128', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf128', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (59047936, 1)
op129.sizes = ([115328, 512], [])
buf128_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf128_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf129_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op129_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf128', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf128', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf129', get_index_3, mul_1, None)
        return store
op129 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None), StarDep(name='buf60', mode=None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.mm


op131_op132: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op131_op132.writes = 
    [   MemoryDep('buf131', c0, {c0: 115328}, None),
        MemoryDep('buf132', c0, {c0: 14761984}, None)]
op131_op132.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 14761984}, None),
        MemoryDep('buf130', c0, {c0: 14761984}, None)]
op131_op132.met_dependencies = []
op131_op132.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op131_op132.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 115328}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 14761984}, None),
        MemoryDep('buf130', c0, {c0: 14761984}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (115328, 128)
op131.sizes = ([115328], [128])
buf127_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf130_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op131_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_2, reduction)
        return store_reduction
op131 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op131_op132.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 14761984}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 14761984}, None),
        MemoryDep('buf130', c0, {c0: 14761984}, None),
        MemoryDep('buf131', c0, {c0: 115328}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (14761984, 1)
op132.sizes = ([115328, 128], [])
buf127_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf130_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf132_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op132_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf131', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf132', get_index_3, to_dtype_1, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op131_op132 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None), StarDep(name='buf64', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.mm


op134_op135: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op134_op135.writes = 
    [   MemoryDep('buf134', c0, {c0: 14761984}, None),
        MemoryDep('buf135', c0, {c0: 14761984}, None)]
op134_op135.unmet_dependencies = 
    [   MemoryDep('buf133', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf133', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op134_op135.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op134_op135.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134_op135.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 14761984}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf133', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op134.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (14761984, 1)
op134.sizes = ([128, 901, 2, 64], [])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf134_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op134_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf134', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op134 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op134_op135.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 14761984}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf133', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf133', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op135.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (14761984, 1)
op135.sizes = ([128, 901, 2, 64], [])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf133_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf135_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op135_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf135', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf133', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op135 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op134_op135 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op136: ExternKernelSchedulerNode(FallbackKernel)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = 
    [   StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None),
        StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: FallbackKernel
    buf136.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op137: ExternKernelSchedulerNode(MultiOutput)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: MultiOutput
    buf137.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = None


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf74', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142_op143: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op142_op143.writes = 
    [   MemoryDep('buf142', c0, {c0: 115328}, None),
        MemoryDep('buf143', c0, {c0: 14761984}, None)]
op142_op143.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 14761984}, None),
        MemoryDep('buf141', c0, {c0: 14761984}, None)]
op142_op143.met_dependencies = []
op142_op143.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op142_op143.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 115328}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 14761984}, None),
        MemoryDep('buf141', c0, {c0: 14761984}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (115328, 128)
op142.sizes = ([115328], [128])
buf132_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf141_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op142_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_2, reduction)
        return store_reduction
op142 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op142_op143.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 14761984}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 14761984}, None),
        MemoryDep('buf141', c0, {c0: 14761984}, None),
        MemoryDep('buf142', c0, {c0: 115328}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (14761984, 1)
op143.sizes = ([115328, 128], [])
buf132_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf141_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf143_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op143_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf142', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf143', get_index_3, to_dtype_1, None)
        return store
op143 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op142_op143 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None), StarDep(name='buf77', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 59047936}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf144', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf144', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (59047936, 1)
op145.sizes = ([115328, 512], [])
buf144_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf144_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf145_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op145_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf144', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf145', get_index_3, mul_1, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None), StarDep(name='buf80', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op146.node.kernel = extern_kernels.mm


op147_op148: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op147_op148.writes = 
    [   MemoryDep('buf147', c0, {c0: 115328}, None),
        MemoryDep('buf148', c0, {c0: 14761984}, None)]
op147_op148.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 14761984}, None),
        MemoryDep('buf146', c0, {c0: 14761984}, None)]
op147_op148.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_2', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_3', c0, {c0: 14761984}, None)]
op147_op148.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op147_op148.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 115328}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 14761984}, None),
        MemoryDep('buf146', c0, {c0: 14761984}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (115328, 128)
op147.sizes = ([115328], [128])
buf143_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf146_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op147_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_2, reduction)
        return store_reduction
op147 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op147_op148.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 14761984}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 14761984}, None),
        MemoryDep('buf146', c0, {c0: 14761984}, None),
        MemoryDep('buf147', c0, {c0: 115328}, None)]
op148.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_2', c1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_3', c0, {c0: 14761984}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (14761984, 1)
op148.sizes = ([128, 901, 128], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_2_layout = FixedLayout('cuda', torch.bfloat16, size=[128], stride=[1])
primals_3_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf143_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf146_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf148_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op148_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = z0
    index1 = z2
    index2 = 115328*z0 + 128*z1 + z2
    index3 = 901*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_2', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_3', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf143', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf146', get_index_4)
        add = ops.add(load_3, load_4)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf147', get_index_5)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        add_2 = ops.add(where, to_dtype_1)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf148', get_index_6, add_2, None)
        return store
op148 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: '*bf16', 5: '*fp32', 6: '*bf16', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = (xindex // 115328)
        x0 = xindex % 128
        x3 = xindex
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last').to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (x3), None).to(tl.float32)
        tmp4 = tl.load(in_ptr3 + (x3), None).to(tl.float32)
        tmp5 = tl.load(in_ptr4 + (x3), None).to(tl.float32)
        tmp8 = tl.load(in_ptr5 + (x4), None, eviction_policy='evict_last')
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6.to(tl.float32)
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp16 = tmp3 + tmp15
        tl.store(out_ptr0 + (x3), tmp16, None)
op147_op148 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*i1', 3: '*bf16', 4: '*bf16', 5: '*fp32', 6: '*bf16', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        x3 = (xindex // 901)
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp9 = tl.load(in_ptr2 + (x3), xmask, eviction_policy='evict_last').to(tl.int1)
        tmp10 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last').to(tl.float32)
        tmp11 = tl.load(in_ptr4 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp12 = tl.where(tmp9, tmp10, tmp11)
        tmp13 = 128.0
        tmp14 = tmp8 / tmp13
        tmp15 = 1e-05
        tmp16 = tmp14 + tmp15
        tmp17 = libdevice.rsqrt(tmp16)
        tmp18 = tmp3 * tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp12 + tmp19
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp20, xmask)
        tl.store(out_ptr0 + (x0), tmp8, xmask)


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 49152}, None)]
op149.unmet_dependencies = []
op149.met_dependencies = [MemoryDep('primals_35', c0, {c0: 49152}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (49152, 1)
op149.sizes = ([49152], [])
primals_35_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf149_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op149_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_35', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf149', get_index_1, to_dtype, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf148', mode=None), StarDep(name='buf149', mode=None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op150.node.kernel = extern_kernels.mm


op151_op152: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op151_op152.writes = 
    [   MemoryDep('buf151', c0, {c0: 14761984}, None),
        MemoryDep('buf152', c0, {c0: 14761984}, None)]
op151_op152.unmet_dependencies = 
    [   MemoryDep('buf150', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf150', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op151_op152.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op151_op152.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151_op152.snodes[0] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 14761984}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf150', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op151.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (14761984, 1)
op151.sizes = ([128, 901, 2, 64], [])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf151_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op151_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf151', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op151 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op151_op152.snodes[1] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 14761984}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf150', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf150', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op152.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (14761984, 1)
op152.sizes = ([128, 901, 2, 64], [])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf150_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf152_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op152_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf152', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf150', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op152 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op151_op152 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op153: ExternKernelSchedulerNode(FallbackKernel)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = 
    [   StarDep(name='buf150', mode=None),
        StarDep(name='buf151', mode=None),
        StarDep(name='buf152', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: FallbackKernel
    buf153.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op153.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op154: ExternKernelSchedulerNode(MultiOutput)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: MultiOutput
    buf154.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = None


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 16384}, None)]
op158.unmet_dependencies = []
op158.met_dependencies = [MemoryDep('primals_36', c0, {c0: 16384}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf158.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op158.group.device = cuda:0
op158.group.iteration = (16384, 1)
op158.sizes = ([16384], [])
primals_36_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf158_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op158_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_36', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf158', get_index_1, to_dtype, None)
        return store
op158 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf154', mode=None), StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.mm


op160_op162: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op160_op162.writes = 
    [   MemoryDep('buf160', c0, {c0: 115328}, None),
        MemoryDep('buf162', c0, {c0: 14761984}, None)]
op160_op162.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 14761984}, None),
        MemoryDep('buf159', c0, {c0: 14761984}, None)]
op160_op162.met_dependencies = []
op160_op162.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op160_op162.snodes[0] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 115328}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 14761984}, None),
        MemoryDep('buf159', c0, {c0: 14761984}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (115328, 128)
op160.sizes = ([115328], [128])
buf148_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf159_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op160_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_2, reduction)
        return store_reduction
op160 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op160_op162.snodes[1] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 14761984}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 14761984}, None),
        MemoryDep('buf159', c0, {c0: 14761984}, None),
        MemoryDep('buf160', c0, {c0: 115328}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (14761984, 1)
op162.sizes = ([115328, 128], [])
buf148_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf159_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf162_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op162_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf159', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf160', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf162', get_index_3, to_dtype_1, None)
        return store
op162 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op160_op162 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 65536}, None)]
op164.unmet_dependencies = []
op164.met_dependencies = [MemoryDep('primals_38', c0, {c0: 65536}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (65536, 1)
op164.sizes = ([65536], [])
primals_38_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf164_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op164_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_38', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf164', get_index_1, to_dtype, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 131072}, None)]
op161.unmet_dependencies = []
op161.met_dependencies = [MemoryDep('primals_37', c0, {c0: 131072}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (131072, 1)
op161.sizes = ([131072], [])
primals_37_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf161_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op161_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_37', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf161', get_index_1, to_dtype, None)
        return store
op161 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None), StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.node.kernel = extern_kernels.mm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 59047936}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf163', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf163', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (59047936, 1)
op165.sizes = ([115328, 512], [])
buf163_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf163_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf165_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op165_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf163', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf165', get_index_3, mul_1, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None), StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
    ]
]
op166.node.kernel = extern_kernels.mm


op167_op169: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op167_op169.writes = 
    [   MemoryDep('buf167', c0, {c0: 115328}, None),
        MemoryDep('buf169', c0, {c0: 14761984}, None)]
op167_op169.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 14761984}, None),
        MemoryDep('buf166', c0, {c0: 14761984}, None)]
op167_op169.met_dependencies = []
op167_op169.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf167.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op167_op169.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 115328}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 14761984}, None),
        MemoryDep('buf166', c0, {c0: 14761984}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf167.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (115328, 128)
op167.sizes = ([115328], [128])
buf162_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf166_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op167_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf167', get_index_2, reduction)
        return store_reduction
op167 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op167_op169.snodes[1] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 14761984}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 14761984}, None),
        MemoryDep('buf166', c0, {c0: 14761984}, None),
        MemoryDep('buf167', c0, {c0: 115328}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (14761984, 1)
op169.sizes = ([115328, 128], [])
buf162_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf166_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf169_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op169_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf166', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf167', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf169', get_index_3, to_dtype_1, None)
        return store
op169 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op167_op169 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 49152}, None)]
op168.unmet_dependencies = []
op168.met_dependencies = [MemoryDep('primals_39', c0, {c0: 49152}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (49152, 1)
op168.sizes = ([49152], [])
primals_39_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf168_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op168_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_39', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf168', get_index_1, to_dtype, None)
        return store
op168 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf168', mode=None), StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf170.users = [
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op170.node.kernel = extern_kernels.mm


op171_op172: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op171_op172.writes = 
    [   MemoryDep('buf171', c0, {c0: 14761984}, None),
        MemoryDep('buf172', c0, {c0: 14761984}, None)]
op171_op172.unmet_dependencies = 
    [   MemoryDep('buf170', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf170', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op171_op172.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op171_op172.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171_op172.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 14761984}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf170', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op171.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (14761984, 1)
op171.sizes = ([128, 901, 2, 64], [])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf171_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op171_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf171', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op171 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op171_op172.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 14761984}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf170', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf170', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op172.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (14761984, 1)
op172.sizes = ([128, 901, 2, 64], [])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf170_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf172_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op172_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf172', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf170', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op172 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op171_op172 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op173: ExternKernelSchedulerNode(FallbackKernel)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = 
    [   StarDep(name='buf170', mode=None),
        StarDep(name='buf171', mode=None),
        StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: FallbackKernel
    buf173.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op173.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op174: ExternKernelSchedulerNode(MultiOutput)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: MultiOutput
    buf174.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = None


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 16384}, None)]
op178.unmet_dependencies = []
op178.met_dependencies = [MemoryDep('primals_40', c0, {c0: 16384}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (16384, 1)
op178.sizes = ([16384], [])
primals_40_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf178_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op178_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_40', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, to_dtype, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf174', mode=None), StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.mm


op180_op182: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op180_op182.writes = 
    [   MemoryDep('buf180', c0, {c0: 115328}, None),
        MemoryDep('buf182', c0, {c0: 14761984}, None)]
op180_op182.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 14761984}, None),
        MemoryDep('buf179', c0, {c0: 14761984}, None)]
op180_op182.met_dependencies = []
op180_op182.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op180_op182.snodes[0] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 115328}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 14761984}, None),
        MemoryDep('buf179', c0, {c0: 14761984}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (115328, 128)
op180.sizes = ([115328], [128])
buf169_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf179_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op180_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf179', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_2, reduction)
        return store_reduction
op180 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op180_op182.snodes[1] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 14761984}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf169', c0, {c0: 14761984}, None),
        MemoryDep('buf179', c0, {c0: 14761984}, None),
        MemoryDep('buf180', c0, {c0: 115328}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (14761984, 1)
op182.sizes = ([115328, 128], [])
buf169_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf179_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf182_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op182_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf179', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf180', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf182', get_index_3, to_dtype_1, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op180_op182 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 65536}, None)]
op184.unmet_dependencies = []
op184.met_dependencies = [MemoryDep('primals_42', c0, {c0: 65536}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf184.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (65536, 1)
op184.sizes = ([65536], [])
primals_42_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf184_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op184_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_42', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf184', get_index_1, to_dtype, None)
        return store
op184 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 131072}, None)]
op181.unmet_dependencies = []
op181.met_dependencies = [MemoryDep('primals_41', c0, {c0: 131072}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (131072, 1)
op181.sizes = ([131072], [])
primals_41_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf181_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op181_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_41', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf181', get_index_1, to_dtype, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.node.kernel = extern_kernels.mm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 59047936}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf183', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf183', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (59047936, 1)
op185.sizes = ([115328, 512], [])
buf183_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf183_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf185_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op185_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf183', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf185', get_index_3, mul_1, None)
        return store
op185 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf184', mode=None), StarDep(name='buf185', mode=None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op186.node.kernel = extern_kernels.mm


op187_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op187_op189.writes = 
    [   MemoryDep('buf187', c0, {c0: 115328}, None),
        MemoryDep('buf189', c0, {c0: 14761984}, None)]
op187_op189.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 14761984}, None),
        MemoryDep('buf186', c0, {c0: 14761984}, None)]
op187_op189.met_dependencies = []
op187_op189.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op187_op189.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 115328}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 14761984}, None),
        MemoryDep('buf186', c0, {c0: 14761984}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (115328, 128)
op187.sizes = ([115328], [128])
buf182_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf186_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op187_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_2, reduction)
        return store_reduction
op187 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op187_op189.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 14761984}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 14761984}, None),
        MemoryDep('buf186', c0, {c0: 14761984}, None),
        MemoryDep('buf187', c0, {c0: 115328}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (14761984, 1)
op189.sizes = ([115328, 128], [])
buf182_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf186_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf189_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op189_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf187', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf189', get_index_3, to_dtype_1, None)
        return store
op189 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op187_op189 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 49152}, None)]
op188.unmet_dependencies = []
op188.met_dependencies = [MemoryDep('primals_43', c0, {c0: 49152}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (49152, 1)
op188.sizes = ([49152], [])
primals_43_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf188_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op188_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_43', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf188', get_index_1, to_dtype, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf188', mode=None), StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.mm


op191_op192: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op191_op192.writes = 
    [   MemoryDep('buf191', c0, {c0: 14761984}, None),
        MemoryDep('buf192', c0, {c0: 14761984}, None)]
op191_op192.unmet_dependencies = 
    [   MemoryDep('buf190', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf190', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op191_op192.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op191_op192.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191_op192.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 14761984}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf190', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op191.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (14761984, 1)
op191.sizes = ([128, 901, 2, 64], [])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf191_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op191_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf191', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op191 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op191_op192.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 14761984}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf190', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf190', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op192.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (14761984, 1)
op192.sizes = ([128, 901, 2, 64], [])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf190_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf192_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op192_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf192', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op192 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op191_op192 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op193: ExternKernelSchedulerNode(FallbackKernel)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = 
    [   StarDep(name='buf190', mode=None),
        StarDep(name='buf191', mode=None),
        StarDep(name='buf192', mode=None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: FallbackKernel
    buf193.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf193.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
    ]
]
op193.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op194: ExternKernelSchedulerNode(MultiOutput)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: MultiOutput
    buf194.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op194.node.kernel = None


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 16384}, None)]
op198.unmet_dependencies = []
op198.met_dependencies = [MemoryDep('primals_44', c0, {c0: 16384}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (16384, 1)
op198.sizes = ([16384], [])
primals_44_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf198_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op198_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_44', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf198', get_index_1, to_dtype, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf194', mode=None), StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200_op202: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op200_op202.writes = 
    [   MemoryDep('buf200', c0, {c0: 115328}, None),
        MemoryDep('buf202', c0, {c0: 14761984}, None)]
op200_op202.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 14761984}, None),
        MemoryDep('buf199', c0, {c0: 14761984}, None)]
op200_op202.met_dependencies = []
op200_op202.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op200_op202.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 115328}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 14761984}, None),
        MemoryDep('buf199', c0, {c0: 14761984}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf200.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (115328, 128)
op200.sizes = ([115328], [128])
buf189_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf199_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op200_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf200', get_index_2, reduction)
        return store_reduction
op200 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op200_op202.snodes[1] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 14761984}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 14761984}, None),
        MemoryDep('buf199', c0, {c0: 14761984}, None),
        MemoryDep('buf200', c0, {c0: 115328}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (14761984, 1)
op202.sizes = ([115328, 128], [])
buf189_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf199_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf202_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op202_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf200', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf202', get_index_3, to_dtype_1, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op200_op202 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 65536}, None)]
op204.unmet_dependencies = []
op204.met_dependencies = [MemoryDep('primals_46', c0, {c0: 65536}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (65536, 1)
op204.sizes = ([65536], [])
primals_46_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf204_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op204_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_46', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf204', get_index_1, to_dtype, None)
        return store
op204 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 131072}, None)]
op201.unmet_dependencies = []
op201.met_dependencies = [MemoryDep('primals_45', c0, {c0: 131072}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf201.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (131072, 1)
op201.sizes = ([131072], [])
primals_45_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf201_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op201_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_45', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf201', get_index_1, to_dtype, None)
        return store
op201 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 59047936}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf203', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf203', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (59047936, 1)
op205.sizes = ([115328, 512], [])
buf203_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf203_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf205_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op205_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf203', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf205', get_index_3, mul_1, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf204', mode=None), StarDep(name='buf205', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op206.node.kernel = extern_kernels.mm


op207_op209: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op207_op209.writes = 
    [   MemoryDep('buf207', c0, {c0: 115328}, None),
        MemoryDep('buf209', c0, {c0: 14761984}, None)]
op207_op209.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 14761984}, None),
        MemoryDep('buf206', c0, {c0: 14761984}, None)]
op207_op209.met_dependencies = []
op207_op209.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf207.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf209.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
    ]
]
op207_op209.snodes[0] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 115328}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 14761984}, None),
        MemoryDep('buf206', c0, {c0: 14761984}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf207.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (115328, 128)
op207.sizes = ([115328], [128])
buf202_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf206_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op207_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_2, reduction)
        return store_reduction
op207 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op207_op209.snodes[1] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 14761984}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 14761984}, None),
        MemoryDep('buf206', c0, {c0: 14761984}, None),
        MemoryDep('buf207', c0, {c0: 115328}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf209.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (14761984, 1)
op209.sizes = ([115328, 128], [])
buf202_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf206_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf209_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op209_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf206', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf207', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf209', get_index_3, to_dtype_1, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op207_op209 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 49152}, None)]
op208.unmet_dependencies = []
op208.met_dependencies = [MemoryDep('primals_47', c0, {c0: 49152}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (49152, 1)
op208.sizes = ([49152], [])
primals_47_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf208_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op208_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf208', get_index_1, to_dtype, None)
        return store
op208 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.mm


op211_op212: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op211_op212.writes = 
    [   MemoryDep('buf211', c0, {c0: 14761984}, None),
        MemoryDep('buf212', c0, {c0: 14761984}, None)]
op211_op212.unmet_dependencies = 
    [   MemoryDep('buf210', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf210', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op211_op212.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op211_op212.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211_op212.snodes[0] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 14761984}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf210', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op211.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (14761984, 1)
op211.sizes = ([128, 901, 2, 64], [])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf211_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op211_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf211', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op211 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op211_op212.snodes[1] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 14761984}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf210', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf210', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op212.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (14761984, 1)
op212.sizes = ([128, 901, 2, 64], [])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf210_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf212_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op212_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf212', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf210', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op212 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op211_op212 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op213: ExternKernelSchedulerNode(FallbackKernel)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = 
    [   StarDep(name='buf210', mode=None),
        StarDep(name='buf211', mode=None),
        StarDep(name='buf212', mode=None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: FallbackKernel
    buf213.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
    ]
]
op213.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op214: ExternKernelSchedulerNode(MultiOutput)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: MultiOutput
    buf214.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = None


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 16384}, None)]
op218.unmet_dependencies = []
op218.met_dependencies = [MemoryDep('primals_48', c0, {c0: 16384}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf218.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (16384, 1)
op218.sizes = ([16384], [])
primals_48_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf218_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op218_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_48', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf218', get_index_1, to_dtype, None)
        return store
op218 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf214', mode=None), StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
    ]
]
op219.node.kernel = extern_kernels.mm


op220_op222: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op220_op222.writes = 
    [   MemoryDep('buf220', c0, {c0: 115328}, None),
        MemoryDep('buf222', c0, {c0: 14761984}, None)]
op220_op222.unmet_dependencies = 
    [   MemoryDep('buf209', c0, {c0: 14761984}, None),
        MemoryDep('buf219', c0, {c0: 14761984}, None)]
op220_op222.met_dependencies = []
op220_op222.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op220_op222.snodes[0] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 115328}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf209', c0, {c0: 14761984}, None),
        MemoryDep('buf219', c0, {c0: 14761984}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (115328, 128)
op220.sizes = ([115328], [128])
buf209_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf219_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op220_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_2, reduction)
        return store_reduction
op220 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op220_op222.snodes[1] =
op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 14761984}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf209', c0, {c0: 14761984}, None),
        MemoryDep('buf219', c0, {c0: 14761984}, None),
        MemoryDep('buf220', c0, {c0: 115328}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op222.group.device = cuda:0
op222.group.iteration = (14761984, 1)
op222.sizes = ([115328, 128], [])
buf209_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf219_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf222_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op222_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf219', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf220', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf222', get_index_3, to_dtype_1, None)
        return store
op222 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op220_op222 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 65536}, None)]
op224.unmet_dependencies = []
op224.met_dependencies = [MemoryDep('primals_50', c0, {c0: 65536}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf224.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (65536, 1)
op224.sizes = ([65536], [])
primals_50_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf224_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op224_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_50', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf224', get_index_1, to_dtype, None)
        return store
op224 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 131072}, None)]
op221.unmet_dependencies = []
op221.met_dependencies = [MemoryDep('primals_49', c0, {c0: 131072}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (131072, 1)
op221.sizes = ([131072], [])
primals_49_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf221_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op221_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf221', get_index_1, to_dtype, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None), StarDep(name='buf222', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 59047936}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf223', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf223', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (59047936, 1)
op225.sizes = ([115328, 512], [])
buf223_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf223_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf225_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op225_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf223', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf223', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf225', get_index_3, mul_1, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.mm


op227_op228_op229: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op227_op228_op229.writes = 
    [   MemoryDep('buf227', c0, {c0: 115328}, None),
        MemoryDep('buf228', c0, {c0: 14761984}, None),
        MemoryDep('buf229', c0, {c0: 14761984}, None)]
op227_op228_op229.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf143', c0, {c0: 14761984}, None),
        MemoryDep('buf146', c0, {c0: 14761984}, None),
        MemoryDep('buf147', c0, {c0: 115328}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf222', c0, {c0: 14761984}, None),
        MemoryDep('buf226', c0, {c0: 14761984}, None)]
op227_op228_op229.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op227_op228_op229.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op227_op228_op229.snodes[0] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 115328}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 14761984}, None),
        MemoryDep('buf226', c0, {c0: 14761984}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (115328, 128)
op227.sizes = ([115328], [128])
buf222_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf226_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op227_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf227', get_index_2, reduction)
        return store_reduction
op227 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op227_op228_op229.snodes[1] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 14761984}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf222', c0, {c0: 14761984}, None),
        MemoryDep('buf226', c0, {c0: 14761984}, None),
        MemoryDep('buf227', c0, {c0: 115328}, None)]
op228.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (14761984, 1)
op228.sizes = ([128, 901, 128], [])
buf222_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf226_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_17_layout = FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_15_layout = FixedLayout('cuda', torch.float32, size=[10, 128], stride=[128, 1])
buf228_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op228_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = 115328*z0 + 128*z1 + z2
    index1 = 901*z0 + z1
    index2 = z1
    index3 = z0
    index4 = z2
    index5 = 900*z0 + I
    index6 = 128*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(901, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock3)
        constant_6 = ops.constant(11.313708498984761, torch.bfloat16)
        mul_1 = ops.mul(where, constant_6)
        add_2 = ops.add(to_dtype_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('primals_17', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf0', get_index)
        set_indirect1 = self.set_indirect1(load)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('primals_15', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
op228 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*i32', 4: '*fp32', 5: '*i32', 6: '*fp32', 7: '*bf16', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x4 = (xindex // 128)
        x1 = (xindex // 128) % 901
        x2 = (xindex // 115328)
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (x3), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x3), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = x1
        tmp13 = tl.full([1], 0, tl.int64)
        tmp14 = tmp12 >= tmp13
        tmp15 = tl.full([1], 1, tl.int64)
        tmp16 = tmp12 < tmp15
        tmp17 = tl.load(in_ptr3 + (x2), tmp16, eviction_policy='evict_last', other=0.0)
        tmp18 = tl.full([XBLOCK], 1, tl.int32)
        tmp19 = tmp17 + tmp18
        tmp20 = tmp17 < 0
        tmp21 = tl.where(tmp20, tmp19, tmp17)
        tl.device_assert(((0 <= tl.broadcast_to(tmp21, [XBLOCK])) & (tl.broadcast_to(tmp21, [XBLOCK]) < 1)) | ~(tmp16), "index out of bounds: 0 <= tl.broadcast_to(tmp21, [XBLOCK]) < 1")
        tmp23 = tl.load(in_ptr4 + (x0), tmp16, eviction_policy='evict_last', other=0.0)
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp16, tmp24, tmp25)
        tmp27 = tmp12 >= tmp15
        tmp28 = tl.full([1], 901, tl.int64)
        tmp29 = tmp12 < tmp28
        tmp30 = tl.load(in_ptr5 + ((900*x2) + ((-1) + x1)), tmp27, eviction_policy='evict_last', other=0.0)
        tmp31 = tl.full([XBLOCK], 10, tl.int32)
        tmp32 = tmp30 + tmp31
        tmp33 = tmp30 < 0
        tmp34 = tl.where(tmp33, tmp32, tmp30)
        tl.device_assert(((0 <= tl.broadcast_to(tmp34, [XBLOCK])) & (tl.broadcast_to(tmp34, [XBLOCK]) < 10)) | ~(tmp27), "index out of bounds: 0 <= tl.broadcast_to(tmp34, [XBLOCK]) < 10")
        tmp36 = tl.load(in_ptr6 + (x0 + (128*tmp34)), tmp27, other=0.0)
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp27, tmp37, tmp38)
        tmp40 = tl.where(tmp16, tmp26, tmp39)
        tmp41 = 11.313708498984761
        tmp42 = tmp40 * tmp41
        tmp43 = tmp11 + tmp42
        tl.store(out_ptr0 + (x3), tmp43, None)
op227_op228_op229.snodes[2] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 14761984}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 14761984}, None),
        MemoryDep('buf146', c0, {c0: 14761984}, None),
        MemoryDep('buf147', c0, {c0: 115328}, None),
        MemoryDep('buf228', c0, {c0: 14761984}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (14761984, 1)
op229.sizes = ([115328, 128], [])
buf143_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf146_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf228_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf229_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op229_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf147', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf229', get_index_4, add_2, None)
        return store
op229 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op227_op228_op229 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*i32', 3: '*fp32', 4: '*i32', 5: '*fp32', 6: '*bf16', 7: '*bf16', 8: '*fp32', 9: '*fp32', 10: '*bf16', 11: '*bf16', 12: 'i32', 13: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(12, 13))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        x2 = xindex % 901
        x3 = (xindex // 901)
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp48 = tl.load(in_ptr6 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp49 = tl.load(in_ptr7 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp52 = tl.load(in_ptr8 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp16 = x2
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 >= tmp17
        tmp19 = tl.full([1, 1], 1, tl.int64)
        tmp20 = tmp16 < tmp19
        tmp21 = tl.load(in_ptr2 + (tl.broadcast_to(x3, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full([XBLOCK, RBLOCK], 1, tl.int32)
        tmp23 = tmp21 + tmp22
        tmp24 = tmp21 < 0
        tmp25 = tl.where(tmp24, tmp23, tmp21)
        tl.device_assert(((0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1)) | ~(tmp20 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1")
        tmp27 = tl.load(in_ptr3 + (tl.broadcast_to(r1, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp20, tmp28, tmp29)
        tmp31 = tmp16 >= tmp19
        tmp32 = tl.full([1, 1], 901, tl.int64)
        tmp33 = tmp16 < tmp32
        tmp34 = tl.load(in_ptr4 + (tl.broadcast_to((900*x3) + ((-1) + x2), [XBLOCK, RBLOCK])), tmp31 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.full([XBLOCK, RBLOCK], 10, tl.int32)
        tmp36 = tmp34 + tmp35
        tmp37 = tmp34 < 0
        tmp38 = tl.where(tmp37, tmp36, tmp34)
        tl.device_assert(((0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10)) | ~(tmp31 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10")
        tmp40 = tl.load(in_ptr5 + (tl.broadcast_to(r1 + (128*tmp38), [XBLOCK, RBLOCK])), tmp31 & xmask, other=0.0)
        tmp41 = tmp40.to(tl.float32)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp31, tmp41, tmp42)
        tmp44 = tl.where(tmp20, tmp30, tmp43)
        tmp45 = 11.313708498984761
        tmp46 = tmp44 * tmp45
        tmp47 = tmp15 + tmp46
        tmp50 = tmp48 + tmp49
        tmp51 = tmp50.to(tl.float32)
        tmp53 = tmp52 / tmp9
        tmp54 = tmp53 + tmp11
        tmp55 = libdevice.rsqrt(tmp54)
        tmp56 = tmp51 * tmp55
        tmp57 = tmp56.to(tl.float32)
        tmp58 = tmp57 + tmp47
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp47, xmask)
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp58, xmask)
        tl.store(out_ptr0 + (x0), tmp8, xmask)


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf4', mode=None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = extern_kernels.mm


op231_op232: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op231_op232.writes = 
    [   MemoryDep('buf231', c0, {c0: 14761984}, None),
        MemoryDep('buf232', c0, {c0: 14761984}, None)]
op231_op232.unmet_dependencies = 
    [   MemoryDep('buf230', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf230', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op231_op232.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op231_op232.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231_op232.snodes[0] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 14761984}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf230', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op231.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (14761984, 1)
op231.sizes = ([128, 901, 2, 64], [])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf231_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op231_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf231', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op231 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op231_op232.snodes[1] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 14761984}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf230', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf230', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op232.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (14761984, 1)
op232.sizes = ([128, 901, 2, 64], [])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf230_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf232_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf232', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf230', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op232 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op231_op232 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op233: ExternKernelSchedulerNode(FallbackKernel)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = 
    [   StarDep(name='buf230', mode=None),
        StarDep(name='buf231', mode=None),
        StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: FallbackKernel
    buf233.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf233.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op233.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op234: ExternKernelSchedulerNode(MultiOutput)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: MultiOutput
    buf234.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op234.node.kernel = None


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf234', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op238.node.kernel = extern_kernels.mm


op239_op240: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op239_op240.writes = 
    [   MemoryDep('buf239', c0, {c0: 115328}, None),
        MemoryDep('buf240', c0, {c0: 14761984}, None)]
op239_op240.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 14761984}, None),
        MemoryDep('buf238', c0, {c0: 14761984}, None)]
op239_op240.met_dependencies = []
op239_op240.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op239_op240.snodes[0] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 115328}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 14761984}, None),
        MemoryDep('buf238', c0, {c0: 14761984}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (115328, 128)
op239.sizes = ([115328], [128])
buf229_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op239_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf239', get_index_2, reduction)
        return store_reduction
op239 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op239_op240.snodes[1] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 14761984}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 14761984}, None),
        MemoryDep('buf238', c0, {c0: 14761984}, None),
        MemoryDep('buf239', c0, {c0: 115328}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (14761984, 1)
op240.sizes = ([115328, 128], [])
buf229_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf238_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf240_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op240_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf238', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf239', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf240', get_index_3, to_dtype_1, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op239_op240 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 59047936}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf241', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf241', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (59047936, 1)
op242.sizes = ([115328, 512], [])
buf241_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf241_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf242_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op242_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf241', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf242', get_index_3, mul_1, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf242', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.mm


op244_op245: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op244_op245.writes = 
    [   MemoryDep('buf244', c0, {c0: 115328}, None),
        MemoryDep('buf245', c0, {c0: 14761984}, None)]
op244_op245.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 14761984}, None),
        MemoryDep('buf243', c0, {c0: 14761984}, None)]
op244_op245.met_dependencies = []
op244_op245.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
]
op244_op245.snodes[0] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 115328}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 14761984}, None),
        MemoryDep('buf243', c0, {c0: 14761984}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (115328, 128)
op244.sizes = ([115328], [128])
buf240_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf243_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op244_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_2, reduction)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op244_op245.snodes[1] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 14761984}, None)]
op245.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 14761984}, None),
        MemoryDep('buf243', c0, {c0: 14761984}, None),
        MemoryDep('buf244', c0, {c0: 115328}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf245.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (14761984, 1)
op245.sizes = ([115328, 128], [])
buf240_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf243_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf245_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op245_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf243', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf245', get_index_3, to_dtype_1, None)
        return store
op245 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op244_op245 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.mm


op247_op248: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op247_op248.writes = 
    [   MemoryDep('buf247', c0, {c0: 14761984}, None),
        MemoryDep('buf248', c0, {c0: 14761984}, None)]
op247_op248.unmet_dependencies = 
    [   MemoryDep('buf246', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf246', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op247_op248.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op247_op248.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247_op248.snodes[0] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 14761984}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf246', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op247.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (14761984, 1)
op247.sizes = ([128, 901, 2, 64], [])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf247_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op247_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf247', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op247 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op247_op248.snodes[1] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 14761984}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf246', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf246', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op248.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (14761984, 1)
op248.sizes = ([128, 901, 2, 64], [])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf246_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf248_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op248_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf248', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf246', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op248 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op247_op248 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op249: ExternKernelSchedulerNode(FallbackKernel)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = 
    [   StarDep(name='buf246', mode=None),
        StarDep(name='buf247', mode=None),
        StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: FallbackKernel
    buf249.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf249.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op249.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op250: ExternKernelSchedulerNode(MultiOutput)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: MultiOutput
    buf250.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = None


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf250', mode=None), StarDep(name='buf34', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
    ]
]
op254.node.kernel = extern_kernels.mm


op255_op256: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op255_op256.writes = 
    [   MemoryDep('buf255', c0, {c0: 115328}, None),
        MemoryDep('buf256', c0, {c0: 14761984}, None)]
op255_op256.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 14761984}, None),
        MemoryDep('buf254', c0, {c0: 14761984}, None)]
op255_op256.met_dependencies = []
op255_op256.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op255_op256.snodes[0] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 115328}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 14761984}, None),
        MemoryDep('buf254', c0, {c0: 14761984}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (115328, 128)
op255.sizes = ([115328], [128])
buf245_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf254_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op255_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_2, reduction)
        return store_reduction
op255 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op255_op256.snodes[1] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 14761984}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 14761984}, None),
        MemoryDep('buf254', c0, {c0: 14761984}, None),
        MemoryDep('buf255', c0, {c0: 115328}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (14761984, 1)
op256.sizes = ([115328, 128], [])
buf245_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf254_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf256_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op256_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf254', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf255', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf256', get_index_3, to_dtype_1, None)
        return store
op256 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op255_op256 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None), StarDep(name='buf37', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 59047936}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf257', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf257', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (59047936, 1)
op258.sizes = ([115328, 512], [])
buf257_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf257_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf258_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op258_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf257', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf258', get_index_3, mul_1, None)
        return store
op258 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None), StarDep(name='buf40', mode=None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260_op261: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op260_op261.writes = 
    [   MemoryDep('buf260', c0, {c0: 115328}, None),
        MemoryDep('buf261', c0, {c0: 14761984}, None)]
op260_op261.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 14761984}, None),
        MemoryDep('buf259', c0, {c0: 14761984}, None)]
op260_op261.met_dependencies = []
op260_op261.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op260_op261.snodes[0] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 115328}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 14761984}, None),
        MemoryDep('buf259', c0, {c0: 14761984}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (115328, 128)
op260.sizes = ([115328], [128])
buf256_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf259_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op260_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf260', get_index_2, reduction)
        return store_reduction
op260 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op260_op261.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 14761984}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf256', c0, {c0: 14761984}, None),
        MemoryDep('buf259', c0, {c0: 14761984}, None),
        MemoryDep('buf260', c0, {c0: 115328}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (14761984, 1)
op261.sizes = ([115328, 128], [])
buf256_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf259_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf261_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op261_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf260', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf261', get_index_3, to_dtype_1, None)
        return store
op261 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op260_op261 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf44', mode=None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.mm


op263_op264: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op263_op264.writes = 
    [   MemoryDep('buf263', c0, {c0: 14761984}, None),
        MemoryDep('buf264', c0, {c0: 14761984}, None)]
op263_op264.unmet_dependencies = 
    [   MemoryDep('buf262', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf262', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op263_op264.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op263_op264.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263_op264.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 14761984}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf262', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op263.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (14761984, 1)
op263.sizes = ([128, 901, 2, 64], [])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf263_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op263_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf263', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op263 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op263_op264.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 14761984}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf262', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf262', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op264.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (14761984, 1)
op264.sizes = ([128, 901, 2, 64], [])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf262_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf264_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op264_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf264', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf262', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op264 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op263_op264 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op265: ExternKernelSchedulerNode(FallbackKernel)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = 
    [   StarDep(name='buf262', mode=None),
        StarDep(name='buf263', mode=None),
        StarDep(name='buf264', mode=None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: FallbackKernel
    buf265.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op265.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op266: ExternKernelSchedulerNode(MultiOutput)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: MultiOutput
    buf266.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op266.node.kernel = None


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf54', mode=None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf270.users = [
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False),
    ]
]
op270.node.kernel = extern_kernels.mm


op271_op272: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op271_op272.writes = 
    [   MemoryDep('buf271', c0, {c0: 115328}, None),
        MemoryDep('buf272', c0, {c0: 14761984}, None)]
op271_op272.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 14761984}, None),
        MemoryDep('buf270', c0, {c0: 14761984}, None)]
op271_op272.met_dependencies = []
op271_op272.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf272.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
    ]
]
op271_op272.snodes[0] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 115328}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 14761984}, None),
        MemoryDep('buf270', c0, {c0: 14761984}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (115328, 128)
op271.sizes = ([115328], [128])
buf261_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf270_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op271_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf270', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf271', get_index_2, reduction)
        return store_reduction
op271 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op271_op272.snodes[1] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 14761984}, None)]
op272.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 14761984}, None),
        MemoryDep('buf270', c0, {c0: 14761984}, None),
        MemoryDep('buf271', c0, {c0: 115328}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf272.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
    ]
]
op272.group.device = cuda:0
op272.group.iteration = (14761984, 1)
op272.sizes = ([115328, 128], [])
buf261_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf270_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf272_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op272_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf270', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf271', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf272', get_index_3, to_dtype_1, None)
        return store
op272 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op271_op272 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op273: ExternKernelSchedulerNode(ExternKernelOut)
op273.writes = [StarDep(name='buf273', mode=None)]
op273.unmet_dependencies = [StarDep(name='buf272', mode=None), StarDep(name='buf57', mode=None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ExternKernelOut
    buf273.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.node.kernel = extern_kernels.mm


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 59047936}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf273', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf273', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (59047936, 1)
op274.sizes = ([115328, 512], [])
buf273_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf273_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf274_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op274_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf273', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf273', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf274', get_index_3, mul_1, None)
        return store
op274 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None), StarDep(name='buf60', mode=None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.mm


op276_op277: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op276_op277.writes = 
    [   MemoryDep('buf276', c0, {c0: 115328}, None),
        MemoryDep('buf277', c0, {c0: 14761984}, None)]
op276_op277.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 14761984}, None),
        MemoryDep('buf275', c0, {c0: 14761984}, None)]
op276_op277.met_dependencies = []
op276_op277.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf277.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op276_op277.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 115328}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 14761984}, None),
        MemoryDep('buf275', c0, {c0: 14761984}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (115328, 128)
op276.sizes = ([115328], [128])
buf272_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf275_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op276_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_2, reduction)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op276_op277.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 14761984}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 14761984}, None),
        MemoryDep('buf275', c0, {c0: 14761984}, None),
        MemoryDep('buf276', c0, {c0: 115328}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf277.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (14761984, 1)
op277.sizes = ([115328, 128], [])
buf272_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf275_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf277_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op277_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf275', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf277', get_index_3, to_dtype_1, None)
        return store
op277 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op276_op277 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None), StarDep(name='buf64', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op278.node.kernel = extern_kernels.mm


op279_op280: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op279_op280.writes = 
    [   MemoryDep('buf279', c0, {c0: 14761984}, None),
        MemoryDep('buf280', c0, {c0: 14761984}, None)]
op279_op280.unmet_dependencies = 
    [   MemoryDep('buf278', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf278', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op279_op280.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op279_op280.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279_op280.snodes[0] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 14761984}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf278', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op279.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (14761984, 1)
op279.sizes = ([128, 901, 2, 64], [])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf279_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op279_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf279', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op279 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op279_op280.snodes[1] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 14761984}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf278', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf278', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op280.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (14761984, 1)
op280.sizes = ([128, 901, 2, 64], [])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf278_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf280_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op280_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf280', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf278', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op280 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op279_op280 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op281: ExternKernelSchedulerNode(FallbackKernel)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = 
    [   StarDep(name='buf278', mode=None),
        StarDep(name='buf279', mode=None),
        StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: FallbackKernel
    buf281.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf281.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op281.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op282: ExternKernelSchedulerNode(MultiOutput)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: MultiOutput
    buf282.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op282.node.kernel = None


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf282', mode=None), StarDep(name='buf74', mode=None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.mm


op287_op288: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op287_op288.writes = 
    [   MemoryDep('buf287', c0, {c0: 115328}, None),
        MemoryDep('buf288', c0, {c0: 14761984}, None)]
op287_op288.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 14761984}, None),
        MemoryDep('buf286', c0, {c0: 14761984}, None)]
op287_op288.met_dependencies = []
op287_op288.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf288.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op287_op288.snodes[0] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 115328}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 14761984}, None),
        MemoryDep('buf286', c0, {c0: 14761984}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (115328, 128)
op287.sizes = ([115328], [128])
buf277_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf286_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op287_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf287', get_index_2, reduction)
        return store_reduction
op287 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op287_op288.snodes[1] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 14761984}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf277', c0, {c0: 14761984}, None),
        MemoryDep('buf286', c0, {c0: 14761984}, None),
        MemoryDep('buf287', c0, {c0: 115328}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf288.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op288.group.device = cuda:0
op288.group.iteration = (14761984, 1)
op288.sizes = ([115328, 128], [])
buf277_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf286_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf288_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op288_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf287', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf288', get_index_3, to_dtype_1, None)
        return store
op288 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op287_op288 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None), StarDep(name='buf77', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.mm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 59047936}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf289', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf289', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (59047936, 1)
op290.sizes = ([115328, 512], [])
buf289_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf289_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf290_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op290_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf289', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf289', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf290', get_index_3, mul_1, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None), StarDep(name='buf80', mode=None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op291.node.kernel = extern_kernels.mm


op292_op293: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op292_op293.writes = 
    [   MemoryDep('buf292', c0, {c0: 115328}, None),
        MemoryDep('buf293', c0, {c0: 14761984}, None)]
op292_op293.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 14761984}, None),
        MemoryDep('buf288', c0, {c0: 14761984}, None),
        MemoryDep('buf291', c0, {c0: 14761984}, None)]
op292_op293.met_dependencies = []
op292_op293.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op292_op293.snodes[0] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 115328}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf288', c0, {c0: 14761984}, None),
        MemoryDep('buf291', c0, {c0: 14761984}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (115328, 128)
op292.sizes = ([115328], [128])
buf288_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf291_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op292_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf292', get_index_2, reduction)
        return store_reduction
op292 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op292_op293.snodes[1] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 14761984}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 14761984}, None),
        MemoryDep('buf288', c0, {c0: 14761984}, None),
        MemoryDep('buf291', c0, {c0: 14761984}, None),
        MemoryDep('buf292', c0, {c0: 115328}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (14761984, 1)
op293.sizes = ([115328, 128], [])
buf288_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf291_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf228_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf293_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op293_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf292', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf293', get_index_4, add_2, None)
        return store
op293 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op292_op293 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp17, xmask)


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None), StarDep(name='buf4', mode=None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op294.node.kernel = extern_kernels.mm


op295_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op295_op296.writes = 
    [   MemoryDep('buf295', c0, {c0: 14761984}, None),
        MemoryDep('buf296', c0, {c0: 14761984}, None)]
op295_op296.unmet_dependencies = 
    [   MemoryDep('buf294', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf294', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op295_op296.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op295_op296.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf295.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op295_op296.snodes[0] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 14761984}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf294', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op295.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf295.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (14761984, 1)
op295.sizes = ([128, 901, 2, 64], [])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf295_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op295_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf295', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op295 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op295_op296.snodes[1] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 14761984}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf294', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf294', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op296.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (14761984, 1)
op296.sizes = ([128, 901, 2, 64], [])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf294_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf296_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op296_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf296', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op296 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op295_op296 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op297: ExternKernelSchedulerNode(FallbackKernel)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = 
    [   StarDep(name='buf294', mode=None),
        StarDep(name='buf295', mode=None),
        StarDep(name='buf296', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: FallbackKernel
    buf297.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf297.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False),
    ]
]
op297.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op298: ExternKernelSchedulerNode(MultiOutput)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: MultiOutput
    buf298.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op298.node.kernel = None


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf298', mode=None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
]
op302.node.kernel = extern_kernels.mm


op303_op304_op305_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op303_op304_op305_op306.writes = 
    [   MemoryDep('buf303', c0, {c0: 14761984}, None),
        MemoryDep('buf304', c0, {c0: 115328}, None),
        MemoryDep('buf305', c0, {c0: 115328}, None),
        MemoryDep('buf306', c0, {c0: 14761984}, None)]
op303_op304_op305_op306.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 14761984}, None),
        MemoryDep('buf302', c0, {c0: 14761984}, None)]
op303_op304_op305_op306.met_dependencies = []
op303_op304_op305_op306.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303_op304_op305_op306.snodes[0] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 14761984}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 14761984}, None),
        MemoryDep('buf302', c0, {c0: 14761984}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (14761984, 1)
op303.sizes = ([14761984], [])
buf293_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf302_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf303_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op303_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf303', get_index_2, add, None)
        return store
op303 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op303_op304_op305_op306.snodes[1] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 115328}, None)]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 14761984}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (115328, 128)
op304.sizes = ([115328], [128])
buf303_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op304_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf304', get_index_1, reduction)
        return store_reduction
op304 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op303_op304_op305_op306.snodes[2] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 115328}, None)]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 115328}, None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (115328, 1)
op305.sizes = ([115328], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf305_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op305_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf305', get_index_1, rsqrt, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op303_op304_op305_op306.snodes[3] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 14761984}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 14761984}, None),
        MemoryDep('buf305', c0, {c0: 115328}, None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (14761984, 1)
op306.sizes = ([115328, 128], [])
buf303_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf306_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op306_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf305', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf306', get_index_2, to_dtype_1, None)
        return store
op306 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op303_op304_op305_op306 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 59047936}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf307', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf307', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf308.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (59047936, 1)
op308.sizes = ([115328, 512], [])
buf307_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf307_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf308_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op308_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf307', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf308', get_index_3, mul_1, None)
        return store
op308 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf20', mode=None), StarDep(name='buf308', mode=None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op310_op311_op312_op313: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op310_op311_op312_op313.writes = 
    [   MemoryDep('buf310', c0, {c0: 14761984}, None),
        MemoryDep('buf311', c0, {c0: 115328}, None),
        MemoryDep('buf312', c0, {c0: 115328}, None),
        MemoryDep('buf313', c0, {c0: 14761984}, None)]
op310_op311_op312_op313.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 14761984}, None),
        MemoryDep('buf309', c0, {c0: 14761984}, None)]
op310_op311_op312_op313.met_dependencies = []
op310_op311_op312_op313.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op310_op311_op312_op313.snodes[0] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 14761984}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 14761984}, None),
        MemoryDep('buf309', c0, {c0: 14761984}, None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (14761984, 1)
op310.sizes = ([14761984], [])
buf306_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf309_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf310_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op310_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf310', get_index_2, add, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op310_op311_op312_op313.snodes[1] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 115328}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 14761984}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (115328, 128)
op311.sizes = ([115328], [128])
buf310_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op311_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_1, reduction)
        return store_reduction
op311 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op310_op311_op312_op313.snodes[2] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 115328}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 115328}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (115328, 1)
op312.sizes = ([115328], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf312_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op312_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, rsqrt, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op310_op311_op312_op313.snodes[3] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 14761984}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 14761984}, None),
        MemoryDep('buf312', c0, {c0: 115328}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (14761984, 1)
op313.sizes = ([115328, 128], [])
buf310_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf313_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op313_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf312', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf313', get_index_2, to_dtype_1, None)
        return store
op313 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op310_op311_op312_op313 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf24', mode=None), StarDep(name='buf313', mode=None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf314.users = [
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op314.node.kernel = extern_kernels.mm


op315_op316: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op315_op316.writes = 
    [   MemoryDep('buf315', c0, {c0: 14761984}, None),
        MemoryDep('buf316', c0, {c0: 14761984}, None)]
op315_op316.unmet_dependencies = 
    [   MemoryDep('buf314', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf314', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op315_op316.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op315_op316.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op315_op316.snodes[0] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 14761984}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf314', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op315.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf315.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (14761984, 1)
op315.sizes = ([128, 901, 2, 64], [])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf315_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op315_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf315', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op315 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op315_op316.snodes[1] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 14761984}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf314', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf314', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op316.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (14761984, 1)
op316.sizes = ([128, 901, 2, 64], [])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf314_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf316_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op316_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf316', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf314', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op316 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op315_op316 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op317: ExternKernelSchedulerNode(FallbackKernel)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = 
    [   StarDep(name='buf314', mode=None),
        StarDep(name='buf315', mode=None),
        StarDep(name='buf316', mode=None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: FallbackKernel
    buf317.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op317.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op318: ExternKernelSchedulerNode(MultiOutput)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: MultiOutput
    buf318.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf318.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op318.node.kernel = None


op322: ExternKernelSchedulerNode(ExternKernelOut)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf318', mode=None), StarDep(name='buf34', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ExternKernelOut
    buf322.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False)]
]
op322.node.kernel = extern_kernels.mm


op323_op324_op325_op326: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op323_op324_op325_op326.writes = 
    [   MemoryDep('buf323', c0, {c0: 14761984}, None),
        MemoryDep('buf324', c0, {c0: 115328}, None),
        MemoryDep('buf325', c0, {c0: 115328}, None),
        MemoryDep('buf326', c0, {c0: 14761984}, None)]
op323_op324_op325_op326.unmet_dependencies = 
    [   MemoryDep('buf313', c0, {c0: 14761984}, None),
        MemoryDep('buf322', c0, {c0: 14761984}, None)]
op323_op324_op325_op326.met_dependencies = []
op323_op324_op325_op326.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op323_op324_op325_op326.snodes[0] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 14761984}, None)]
op323.unmet_dependencies = 
    [   MemoryDep('buf313', c0, {c0: 14761984}, None),
        MemoryDep('buf322', c0, {c0: 14761984}, None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (14761984, 1)
op323.sizes = ([14761984], [])
buf313_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf322_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf323_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op323_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf322', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf323', get_index_2, add, None)
        return store
op323 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op323_op324_op325_op326.snodes[1] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 115328}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 14761984}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (115328, 128)
op324.sizes = ([115328], [128])
buf323_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op324_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_1, reduction)
        return store_reduction
op324 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op323_op324_op325_op326.snodes[2] =
op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 115328}, None)]
op325.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 115328}, None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op325.group.device = cuda:0
op325.group.iteration = (115328, 1)
op325.sizes = ([115328], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf325_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op325_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, rsqrt, None)
        return store
op325 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op323_op324_op325_op326.snodes[3] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 14761984}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 14761984}, None),
        MemoryDep('buf325', c0, {c0: 115328}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf326.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (14761984, 1)
op326.sizes = ([115328, 128], [])
buf323_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf326_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op326_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf325', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf326', get_index_2, to_dtype_1, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op323_op324_op325_op326 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None), StarDep(name='buf37', mode=None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op327.node.kernel = extern_kernels.mm


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 59047936}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf327', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf327', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (59047936, 1)
op328.sizes = ([115328, 512], [])
buf327_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf327_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf328_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op328_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf327', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf327', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf328', get_index_3, mul_1, None)
        return store
op328 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None), StarDep(name='buf40', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op329.node.kernel = extern_kernels.mm


op330_op331_op332_op333: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op330_op331_op332_op333.writes = 
    [   MemoryDep('buf330', c0, {c0: 14761984}, None),
        MemoryDep('buf331', c0, {c0: 115328}, None),
        MemoryDep('buf332', c0, {c0: 115328}, None),
        MemoryDep('buf333', c0, {c0: 14761984}, None)]
op330_op331_op332_op333.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 14761984}, None),
        MemoryDep('buf329', c0, {c0: 14761984}, None)]
op330_op331_op332_op333.met_dependencies = []
op330_op331_op332_op333.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf333.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op330_op331_op332_op333.snodes[0] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 14761984}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 14761984}, None),
        MemoryDep('buf329', c0, {c0: 14761984}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (14761984, 1)
op330.sizes = ([14761984], [])
buf326_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf329_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf330_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op330_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf329', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf330', get_index_2, add, None)
        return store
op330 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op330_op331_op332_op333.snodes[1] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 115328}, None)]
op331.unmet_dependencies = [MemoryDep('buf330', c0, {c0: 14761984}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (115328, 128)
op331.sizes = ([115328], [128])
buf330_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op331_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf331', get_index_1, reduction)
        return store_reduction
op331 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op330_op331_op332_op333.snodes[2] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 115328}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 115328}, None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (115328, 1)
op332.sizes = ([115328], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf332_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op332_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf332', get_index_1, rsqrt, None)
        return store
op332 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op330_op331_op332_op333.snodes[3] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 14761984}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf330', c0, {c0: 14761984}, None),
        MemoryDep('buf332', c0, {c0: 115328}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf333.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (14761984, 1)
op333.sizes = ([115328, 128], [])
buf330_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf333_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op333_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf333', get_index_2, to_dtype_1, None)
        return store
op333 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op330_op331_op332_op333 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf333', mode=None), StarDep(name='buf44', mode=None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op334.node.kernel = extern_kernels.mm


op335_op336: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op335_op336.writes = 
    [   MemoryDep('buf335', c0, {c0: 14761984}, None),
        MemoryDep('buf336', c0, {c0: 14761984}, None)]
op335_op336.unmet_dependencies = 
    [   MemoryDep('buf334', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf334', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op335_op336.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op335_op336.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf335.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf336.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op335_op336.snodes[0] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 14761984}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf334', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op335.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf335.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (14761984, 1)
op335.sizes = ([128, 901, 2, 64], [])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf335_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op335_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf335', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op335 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op335_op336.snodes[1] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 14761984}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf334', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf334', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op336.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf336.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op336.group.device = cuda:0
op336.group.iteration = (14761984, 1)
op336.sizes = ([128, 901, 2, 64], [])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf334_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf336_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op336_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf336', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf334', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op336 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op335_op336 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op337: ExternKernelSchedulerNode(FallbackKernel)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = 
    [   StarDep(name='buf334', mode=None),
        StarDep(name='buf335', mode=None),
        StarDep(name='buf336', mode=None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: FallbackKernel
    buf337.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf337.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
    ]
]
op337.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op338: ExternKernelSchedulerNode(MultiOutput)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: MultiOutput
    buf338.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf338.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op338.node.kernel = None


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf338', mode=None), StarDep(name='buf54', mode=None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op342.node.kernel = extern_kernels.mm


op343_op344_op345_op346: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op343_op344_op345_op346.writes = 
    [   MemoryDep('buf343', c0, {c0: 14761984}, None),
        MemoryDep('buf344', c0, {c0: 115328}, None),
        MemoryDep('buf345', c0, {c0: 115328}, None),
        MemoryDep('buf346', c0, {c0: 14761984}, None)]
op343_op344_op345_op346.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 14761984}, None),
        MemoryDep('buf342', c0, {c0: 14761984}, None)]
op343_op344_op345_op346.met_dependencies = []
op343_op344_op345_op346.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343_op344_op345_op346.snodes[0] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 14761984}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 14761984}, None),
        MemoryDep('buf342', c0, {c0: 14761984}, None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (14761984, 1)
op343.sizes = ([14761984], [])
buf333_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf342_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf343_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op343_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf342', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf343', get_index_2, add, None)
        return store
op343 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op343_op344_op345_op346.snodes[1] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 115328}, None)]
op344.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 14761984}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (115328, 128)
op344.sizes = ([115328], [128])
buf343_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op344_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf344', get_index_1, reduction)
        return store_reduction
op344 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op343_op344_op345_op346.snodes[2] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 115328}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 115328}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (115328, 1)
op345.sizes = ([115328], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf345_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op345_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf345', get_index_1, rsqrt, None)
        return store
op345 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op343_op344_op345_op346.snodes[3] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 14761984}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 14761984}, None),
        MemoryDep('buf345', c0, {c0: 115328}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op346.group.device = cuda:0
op346.group.iteration = (14761984, 1)
op346.sizes = ([115328, 128], [])
buf343_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf346_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op346_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf345', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf346', get_index_2, to_dtype_1, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op343_op344_op345_op346 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None), StarDep(name='buf57', mode=None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op347.node.kernel = extern_kernels.mm


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 59047936}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf347', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf347', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf348.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (59047936, 1)
op348.sizes = ([115328, 512], [])
buf347_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf347_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf348_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op348_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf347', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf347', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf348', get_index_3, mul_1, None)
        return store
op348 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op349: ExternKernelSchedulerNode(ExternKernelOut)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf348', mode=None), StarDep(name='buf60', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ExternKernelOut
    buf349.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False)]
]
op349.node.kernel = extern_kernels.mm


op350_op351_op352_op353: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op350_op351_op352_op353.writes = 
    [   MemoryDep('buf350', c0, {c0: 14761984}, None),
        MemoryDep('buf351', c0, {c0: 115328}, None),
        MemoryDep('buf352', c0, {c0: 115328}, None),
        MemoryDep('buf353', c0, {c0: 14761984}, None)]
op350_op351_op352_op353.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 14761984}, None),
        MemoryDep('buf349', c0, {c0: 14761984}, None)]
op350_op351_op352_op353.met_dependencies = []
op350_op351_op352_op353.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False)]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op350_op351_op352_op353.snodes[0] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 14761984}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf346', c0, {c0: 14761984}, None),
        MemoryDep('buf349', c0, {c0: 14761984}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (14761984, 1)
op350.sizes = ([14761984], [])
buf346_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf349_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf350_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op350_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf350', get_index_2, add, None)
        return store
op350 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op350_op351_op352_op353.snodes[1] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 115328}, None)]
op351.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 14761984}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (115328, 128)
op351.sizes = ([115328], [128])
buf350_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op351_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_1, reduction)
        return store_reduction
op351 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op350_op351_op352_op353.snodes[2] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 115328}, None)]
op352.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 115328}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (115328, 1)
op352.sizes = ([115328], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf352_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op352_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf352', get_index_1, rsqrt, None)
        return store
op352 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op350_op351_op352_op353.snodes[3] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 14761984}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 14761984}, None),
        MemoryDep('buf352', c0, {c0: 115328}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (14761984, 1)
op353.sizes = ([115328, 128], [])
buf350_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf353_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op353_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf352', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf353', get_index_2, to_dtype_1, None)
        return store
op353 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op350_op351_op352_op353 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf64', mode=None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op354.node.kernel = extern_kernels.mm


op355_op356: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op355_op356.writes = 
    [   MemoryDep('buf355', c0, {c0: 14761984}, None),
        MemoryDep('buf356', c0, {c0: 14761984}, None)]
op355_op356.unmet_dependencies = 
    [   MemoryDep('buf354', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf354', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op355_op356.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op355_op356.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf355.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op355_op356.snodes[0] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 14761984}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf354', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op355.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf355.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op355.group.device = cuda:0
op355.group.iteration = (14761984, 1)
op355.sizes = ([128, 901, 2, 64], [])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf355_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op355_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf355', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op355 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op355_op356.snodes[1] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 14761984}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf354', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf354', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op356.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (14761984, 1)
op356.sizes = ([128, 901, 2, 64], [])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf354_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf356_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op356_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf356', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf354', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op356 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op355_op356 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op357: ExternKernelSchedulerNode(FallbackKernel)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = 
    [   StarDep(name='buf354', mode=None),
        StarDep(name='buf355', mode=None),
        StarDep(name='buf356', mode=None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: FallbackKernel
    buf357.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf357.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
    ]
]
op357.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op358: ExternKernelSchedulerNode(MultiOutput)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: MultiOutput
    buf358.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf358.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op358.node.kernel = None


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf358', mode=None), StarDep(name='buf74', mode=None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363_op364_op365_op366: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op363_op364_op365_op366.writes = 
    [   MemoryDep('buf363', c0, {c0: 14761984}, None),
        MemoryDep('buf364', c0, {c0: 115328}, None),
        MemoryDep('buf365', c0, {c0: 115328}, None),
        MemoryDep('buf366', c0, {c0: 14761984}, None)]
op363_op364_op365_op366.unmet_dependencies = 
    [   MemoryDep('buf353', c0, {c0: 14761984}, None),
        MemoryDep('buf362', c0, {c0: 14761984}, None)]
op363_op364_op365_op366.met_dependencies = []
op363_op364_op365_op366.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363_op364_op365_op366.snodes[0] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 14761984}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf353', c0, {c0: 14761984}, None),
        MemoryDep('buf362', c0, {c0: 14761984}, None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (14761984, 1)
op363.sizes = ([14761984], [])
buf353_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf362_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf363_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op363_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf363', get_index_2, add, None)
        return store
op363 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op363_op364_op365_op366.snodes[1] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 115328}, None)]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 14761984}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (115328, 128)
op364.sizes = ([115328], [128])
buf363_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op364_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_1, reduction)
        return store_reduction
op364 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op363_op364_op365_op366.snodes[2] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 115328}, None)]
op365.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 115328}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op365.group.device = cuda:0
op365.group.iteration = (115328, 1)
op365.sizes = ([115328], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf365_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op365_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf365', get_index_1, rsqrt, None)
        return store
op365 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op363_op364_op365_op366.snodes[3] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 14761984}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 14761984}, None),
        MemoryDep('buf365', c0, {c0: 115328}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (14761984, 1)
op366.sizes = ([115328, 128], [])
buf363_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf366_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op366_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf365', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, to_dtype_1, None)
        return store
op366 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op363_op364_op365_op366 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None), StarDep(name='buf77', mode=None)]
op367.met_dependencies = []
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 59047936}, None)]
op368.unmet_dependencies = 
    [   MemoryDep('buf367', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf367', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf368.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (59047936, 1)
op368.sizes = ([115328, 512], [])
buf367_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf367_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf368_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op368_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf367', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf367', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf368', get_index_3, mul_1, None)
        return store
op368 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None), StarDep(name='buf80', mode=None)]
op369.met_dependencies = []
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370_op371_op372_op373_op374: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op370_op371_op372_op373_op374.writes = 
    [   MemoryDep('buf370', c0, {c0: 14761984}, None),
        MemoryDep('buf371', c0, {c0: 115328}, None),
        MemoryDep('buf372', c0, {c0: 115328}, None),
        MemoryDep('buf373', c0, {c0: 14761984}, None),
        MemoryDep('buf374', c0, {c0: 14761984}, None)]
op370_op371_op372_op373_op374.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 14761984}, None),
        MemoryDep('buf226', c0, {c0: 14761984}, None),
        MemoryDep('buf227', c0, {c0: 115328}, None),
        MemoryDep('buf366', c0, {c0: 14761984}, None),
        MemoryDep('buf369', c0, {c0: 14761984}, None)]
op370_op371_op372_op373_op374.met_dependencies = []
op370_op371_op372_op373_op374.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op370_op371_op372_op373_op374.snodes[0] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 14761984}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf366', c0, {c0: 14761984}, None),
        MemoryDep('buf369', c0, {c0: 14761984}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (14761984, 1)
op370.sizes = ([14761984], [])
buf366_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf369_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf370_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op370_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf370', get_index_2, add, None)
        return store
op370 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op370_op371_op372_op373_op374.snodes[1] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 115328}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 14761984}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (115328, 128)
op371.sizes = ([115328], [128])
buf370_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op371_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_1, reduction)
        return store_reduction
op371 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op370_op371_op372_op373_op374.snodes[2] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 115328}, None)]
op372.unmet_dependencies = [MemoryDep('buf371', c0, {c0: 115328}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (115328, 1)
op372.sizes = ([115328], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf372_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op372_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf372', get_index_1, rsqrt, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op370_op371_op372_op373_op374.snodes[3] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 14761984}, None)]
op373.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 14761984}, None),
        MemoryDep('buf372', c0, {c0: 115328}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (14761984, 1)
op373.sizes = ([115328, 128], [])
buf370_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf373_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op373_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf372', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf373', get_index_2, to_dtype_1, None)
        return store
op373 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op370_op371_op372_op373_op374.snodes[4] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 14761984}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf222', c0, {c0: 14761984}, None),
        MemoryDep('buf226', c0, {c0: 14761984}, None),
        MemoryDep('buf227', c0, {c0: 115328}, None),
        MemoryDep('buf373', c0, {c0: 14761984}, None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (14761984, 1)
op374.sizes = ([115328, 128], [])
buf222_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf226_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf373_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf374_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op374_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf226', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf373', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf374', get_index_4, add_2, None)
        return store
op374 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op370_op371_op372_op373_op374 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: '*bf16', 5: '*fp32', 6: '*bf16', 7: '*bf16', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8, 9))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp16 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp17 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp20 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp18 = tmp16 + tmp17
        tmp19 = tmp18.to(tl.float32)
        tmp21 = tmp20 / tmp9
        tmp22 = tmp21 + tmp11
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp19 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp25 + tmp15
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp26, xmask)


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf374', mode=None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op375.node.kernel = extern_kernels.mm


op376_op377: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op376_op377.writes = 
    [   MemoryDep('buf376', c0, {c0: 14761984}, None),
        MemoryDep('buf377', c0, {c0: 14761984}, None)]
op376_op377.unmet_dependencies = 
    [   MemoryDep('buf375', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf375', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op376_op377.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op376_op377.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf377.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op376_op377.snodes[0] =
op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 14761984}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf375', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op376.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (14761984, 1)
op376.sizes = ([128, 901, 2, 64], [])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf376_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op376_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf376', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op376 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op376_op377.snodes[1] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 14761984}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf375', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op377.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf377.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op377.group.device = cuda:0
op377.group.iteration = (14761984, 1)
op377.sizes = ([128, 901, 2, 64], [])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf375_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf377_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op377_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf377', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf375', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op377 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op376_op377 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op378: ExternKernelSchedulerNode(FallbackKernel)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = 
    [   StarDep(name='buf375', mode=None),
        StarDep(name='buf376', mode=None),
        StarDep(name='buf377', mode=None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: FallbackKernel
    buf378.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf378.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False),
    ]
]
op378.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op379: ExternKernelSchedulerNode(MultiOutput)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: MultiOutput
    buf379.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf379.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op379.node.kernel = None


op383: ExternKernelSchedulerNode(ExternKernelOut)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf379', mode=None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ExternKernelOut
    buf383.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf383.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False)]
]
op383.node.kernel = extern_kernels.mm


op384_op385_op386_op387: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op384_op385_op386_op387.writes = 
    [   MemoryDep('buf384', c0, {c0: 14761984}, None),
        MemoryDep('buf385', c0, {c0: 115328}, None),
        MemoryDep('buf386', c0, {c0: 115328}, None),
        MemoryDep('buf387', c0, {c0: 14761984}, None)]
op384_op385_op386_op387.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 14761984}, None),
        MemoryDep('buf383', c0, {c0: 14761984}, None)]
op384_op385_op386_op387.met_dependencies = []
op384_op385_op386_op387.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=True, is_weak=False)]
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op384_op385_op386_op387.snodes[0] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 14761984}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 14761984}, None),
        MemoryDep('buf383', c0, {c0: 14761984}, None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (14761984, 1)
op384.sizes = ([14761984], [])
buf374_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf383_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf384_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op384_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf383', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf384', get_index_2, add, None)
        return store
op384 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op384_op385_op386_op387.snodes[1] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 115328}, None)]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 14761984}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=True, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (115328, 128)
op385.sizes = ([115328], [128])
buf384_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op385_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_1, reduction)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op384_op385_op386_op387.snodes[2] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 115328}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 115328}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op386.group.device = cuda:0
op386.group.iteration = (115328, 1)
op386.sizes = ([115328], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf386_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op386_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf386', get_index_1, rsqrt, None)
        return store
op386 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op384_op385_op386_op387.snodes[3] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 14761984}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf384', c0, {c0: 14761984}, None),
        MemoryDep('buf386', c0, {c0: 115328}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (14761984, 1)
op387.sizes = ([115328, 128], [])
buf384_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf387_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op387_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf386', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf387', get_index_2, to_dtype_1, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op384_op385_op386_op387 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf161', mode=None), StarDep(name='buf387', mode=None)]
op388.met_dependencies = []
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op388.node.kernel = extern_kernels.mm


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 59047936}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf388', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf388', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf389.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op389.group.device = cuda:0
op389.group.iteration = (59047936, 1)
op389.sizes = ([115328, 512], [])
buf388_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf388_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf389_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op389_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf388', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf388', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf389', get_index_3, mul_1, None)
        return store
op389 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op390: ExternKernelSchedulerNode(ExternKernelOut)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf164', mode=None), StarDep(name='buf389', mode=None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ExternKernelOut
    buf390.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False)]
]
op390.node.kernel = extern_kernels.mm


op391_op392_op393_op394: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op391_op392_op393_op394.writes = 
    [   MemoryDep('buf391', c0, {c0: 14761984}, None),
        MemoryDep('buf392', c0, {c0: 115328}, None),
        MemoryDep('buf393', c0, {c0: 115328}, None),
        MemoryDep('buf394', c0, {c0: 14761984}, None)]
op391_op392_op393_op394.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 14761984}, None),
        MemoryDep('buf390', c0, {c0: 14761984}, None)]
op391_op392_op393_op394.met_dependencies = []
op391_op392_op393_op394.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf394.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op391_op392_op393_op394.snodes[0] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 14761984}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 14761984}, None),
        MemoryDep('buf390', c0, {c0: 14761984}, None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (14761984, 1)
op391.sizes = ([14761984], [])
buf387_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf390_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf391_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op391_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf390', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf391', get_index_2, add, None)
        return store
op391 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op391_op392_op393_op394.snodes[1] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 115328}, None)]
op392.unmet_dependencies = [MemoryDep('buf391', c0, {c0: 14761984}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (115328, 128)
op392.sizes = ([115328], [128])
buf391_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op392_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf392', get_index_1, reduction)
        return store_reduction
op392 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op391_op392_op393_op394.snodes[2] =
op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 115328}, None)]
op393.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 115328}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op393.group.device = cuda:0
op393.group.iteration = (115328, 1)
op393.sizes = ([115328], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf393_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op393_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf393', get_index_1, rsqrt, None)
        return store
op393 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op391_op392_op393_op394.snodes[3] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 14761984}, None)]
op394.unmet_dependencies = 
    [   MemoryDep('buf391', c0, {c0: 14761984}, None),
        MemoryDep('buf393', c0, {c0: 115328}, None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf394.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op394.group.device = cuda:0
op394.group.iteration = (14761984, 1)
op394.sizes = ([115328, 128], [])
buf391_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf394_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op394_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf393', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf394', get_index_2, to_dtype_1, None)
        return store
op394 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op391_op392_op393_op394 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf168', mode=None), StarDep(name='buf394', mode=None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op395.node.kernel = extern_kernels.mm


op396_op397: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op396_op397.writes = 
    [   MemoryDep('buf396', c0, {c0: 14761984}, None),
        MemoryDep('buf397', c0, {c0: 14761984}, None)]
op396_op397.unmet_dependencies = 
    [   MemoryDep('buf395', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf395', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op396_op397.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op396_op397.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf396.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf397.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op396_op397.snodes[0] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 14761984}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf395', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op396.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf396.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op396.group.device = cuda:0
op396.group.iteration = (14761984, 1)
op396.sizes = ([128, 901, 2, 64], [])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf396_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op396_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf396', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op396 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op396_op397.snodes[1] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 14761984}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf395', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf395', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op397.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf397.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (14761984, 1)
op397.sizes = ([128, 901, 2, 64], [])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf395_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf397_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op397_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf397', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf395', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op397 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op396_op397 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op398: ExternKernelSchedulerNode(FallbackKernel)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = 
    [   StarDep(name='buf395', mode=None),
        StarDep(name='buf396', mode=None),
        StarDep(name='buf397', mode=None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: FallbackKernel
    buf398.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf398.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False),
    ]
]
op398.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op399: ExternKernelSchedulerNode(MultiOutput)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: MultiOutput
    buf399.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf399.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op399.node.kernel = None


op403: ExternKernelSchedulerNode(ExternKernelOut)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf178', mode=None), StarDep(name='buf399', mode=None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ExternKernelOut
    buf403.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf403.users = [NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False)]
]
op403.node.kernel = extern_kernels.mm


op404_op405_op406_op407: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op404_op405_op406_op407.writes = 
    [   MemoryDep('buf404', c0, {c0: 14761984}, None),
        MemoryDep('buf405', c0, {c0: 115328}, None),
        MemoryDep('buf406', c0, {c0: 115328}, None),
        MemoryDep('buf407', c0, {c0: 14761984}, None)]
op404_op405_op406_op407.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 14761984}, None),
        MemoryDep('buf403', c0, {c0: 14761984}, None)]
op404_op405_op406_op407.met_dependencies = []
op404_op405_op406_op407.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf404.users = [
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf407.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op404_op405_op406_op407.snodes[0] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 14761984}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 14761984}, None),
        MemoryDep('buf403', c0, {c0: 14761984}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf404.users = [
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op404.group.device = cuda:0
op404.group.iteration = (14761984, 1)
op404.sizes = ([14761984], [])
buf394_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf403_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf404_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op404_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf403', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf404', get_index_2, add, None)
        return store
op404 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op404_op405_op406_op407.snodes[1] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 115328}, None)]
op405.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 14761984}, None)]
op405.met_dependencies = []
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (115328, 128)
op405.sizes = ([115328], [128])
buf404_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op405_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf405', get_index_1, reduction)
        return store_reduction
op405 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op404_op405_op406_op407.snodes[2] =
op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 115328}, None)]
op406.unmet_dependencies = [MemoryDep('buf405', c0, {c0: 115328}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (115328, 1)
op406.sizes = ([115328], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf406_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op406_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf406', get_index_1, rsqrt, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op404_op405_op406_op407.snodes[3] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 14761984}, None)]
op407.unmet_dependencies = 
    [   MemoryDep('buf404', c0, {c0: 14761984}, None),
        MemoryDep('buf406', c0, {c0: 115328}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf407.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op407.group.device = cuda:0
op407.group.iteration = (14761984, 1)
op407.sizes = ([115328, 128], [])
buf404_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf407_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op407_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf406', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf407', get_index_2, to_dtype_1, None)
        return store
op407 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op404_op405_op406_op407 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf407', mode=None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op408.node.kernel = extern_kernels.mm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 59047936}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf408', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf408', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf409.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (59047936, 1)
op409.sizes = ([115328, 512], [])
buf408_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf408_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf409_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op409_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf408', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf408', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf409', get_index_3, mul_1, None)
        return store
op409 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf184', mode=None), StarDep(name='buf409', mode=None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf410.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False)]
]
op410.node.kernel = extern_kernels.mm


op411_op412_op413_op414: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op411_op412_op413_op414.writes = 
    [   MemoryDep('buf411', c0, {c0: 14761984}, None),
        MemoryDep('buf412', c0, {c0: 115328}, None),
        MemoryDep('buf413', c0, {c0: 115328}, None),
        MemoryDep('buf414', c0, {c0: 14761984}, None)]
op411_op412_op413_op414.unmet_dependencies = 
    [   MemoryDep('buf407', c0, {c0: 14761984}, None),
        MemoryDep('buf410', c0, {c0: 14761984}, None)]
op411_op412_op413_op414.met_dependencies = []
op411_op412_op413_op414.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf414.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op411_op412_op413_op414.snodes[0] =
op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 14761984}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf407', c0, {c0: 14761984}, None),
        MemoryDep('buf410', c0, {c0: 14761984}, None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op411.group.device = cuda:0
op411.group.iteration = (14761984, 1)
op411.sizes = ([14761984], [])
buf407_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf410_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf411_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op411_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf411', get_index_2, add, None)
        return store
op411 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op411_op412_op413_op414.snodes[1] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 115328}, None)]
op412.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 14761984}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (115328, 128)
op412.sizes = ([115328], [128])
buf411_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op412_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf412', get_index_1, reduction)
        return store_reduction
op412 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op411_op412_op413_op414.snodes[2] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 115328}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', c0, {c0: 115328}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op413.group.device = cuda:0
op413.group.iteration = (115328, 1)
op413.sizes = ([115328], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf413_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op413_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf413', get_index_1, rsqrt, None)
        return store
op413 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op411_op412_op413_op414.snodes[3] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 14761984}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 14761984}, None),
        MemoryDep('buf413', c0, {c0: 115328}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf414.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op414.group.device = cuda:0
op414.group.iteration = (14761984, 1)
op414.sizes = ([115328, 128], [])
buf411_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf414_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op414_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf413', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf414', get_index_2, to_dtype_1, None)
        return store
op414 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op411_op412_op413_op414 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op415: ExternKernelSchedulerNode(ExternKernelOut)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf188', mode=None), StarDep(name='buf414', mode=None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ExternKernelOut
    buf415.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf415.users = [
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op415.node.kernel = extern_kernels.mm


op416_op417: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op416_op417.writes = 
    [   MemoryDep('buf416', c0, {c0: 14761984}, None),
        MemoryDep('buf417', c0, {c0: 14761984}, None)]
op416_op417.unmet_dependencies = 
    [   MemoryDep('buf415', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf415', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op416_op417.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op416_op417.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf416.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op416_op417.snodes[0] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 14761984}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf415', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op416.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf416.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op416.group.device = cuda:0
op416.group.iteration = (14761984, 1)
op416.sizes = ([128, 901, 2, 64], [])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf416_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op416_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf416', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op416 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op416_op417.snodes[1] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 14761984}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf415', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf415', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op417.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (14761984, 1)
op417.sizes = ([128, 901, 2, 64], [])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf415_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf417_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op417_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf417', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf415', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op417 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op416_op417 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op418: ExternKernelSchedulerNode(FallbackKernel)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = 
    [   StarDep(name='buf415', mode=None),
        StarDep(name='buf416', mode=None),
        StarDep(name='buf417', mode=None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: FallbackKernel
    buf418.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf418.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
]
op418.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op419: ExternKernelSchedulerNode(MultiOutput)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: MultiOutput
    buf419.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf419.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op419.node.kernel = None


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf198', mode=None), StarDep(name='buf419', mode=None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf423.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False)]
]
op423.node.kernel = extern_kernels.mm


op424_op425_op426_op427: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op424_op425_op426_op427.writes = 
    [   MemoryDep('buf424', c0, {c0: 14761984}, None),
        MemoryDep('buf425', c0, {c0: 115328}, None),
        MemoryDep('buf426', c0, {c0: 115328}, None),
        MemoryDep('buf427', c0, {c0: 14761984}, None)]
op424_op425_op426_op427.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 14761984}, None),
        MemoryDep('buf423', c0, {c0: 14761984}, None)]
op424_op425_op426_op427.met_dependencies = []
op424_op425_op426_op427.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False)]
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf426.users = [
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf427.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op424_op425_op426_op427.snodes[0] =
op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 14761984}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 14761984}, None),
        MemoryDep('buf423', c0, {c0: 14761984}, None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op424.group.device = cuda:0
op424.group.iteration = (14761984, 1)
op424.sizes = ([14761984], [])
buf414_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf423_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf424_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op424_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf423', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf424', get_index_2, add, None)
        return store
op424 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op424_op425_op426_op427.snodes[1] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 115328}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 14761984}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (115328, 128)
op425.sizes = ([115328], [128])
buf424_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op425_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf425', get_index_1, reduction)
        return store_reduction
op425 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op424_op425_op426_op427.snodes[2] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 115328}, None)]
op426.unmet_dependencies = [MemoryDep('buf425', c0, {c0: 115328}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf426.users = [
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op426.group.device = cuda:0
op426.group.iteration = (115328, 1)
op426.sizes = ([115328], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf426_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op426_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf426', get_index_1, rsqrt, None)
        return store
op426 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op424_op425_op426_op427.snodes[3] =
op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 14761984}, None)]
op427.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 14761984}, None),
        MemoryDep('buf426', c0, {c0: 115328}, None)]
op427.met_dependencies = []
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf427.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op427.group.device = cuda:0
op427.group.iteration = (14761984, 1)
op427.sizes = ([115328, 128], [])
buf424_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf427_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op427_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf426', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf427', get_index_2, to_dtype_1, None)
        return store
op427 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op424_op425_op426_op427 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf427', mode=None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op428.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 59047936}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf428', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf428', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf429.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (59047936, 1)
op429.sizes = ([115328, 512], [])
buf428_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf428_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf429_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op429_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf428', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf428', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf429', get_index_3, mul_1, None)
        return store
op429 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf204', mode=None), StarDep(name='buf429', mode=None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False)]
]
op430.node.kernel = extern_kernels.mm


op431_op432_op433_op434: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op431_op432_op433_op434.writes = 
    [   MemoryDep('buf431', c0, {c0: 14761984}, None),
        MemoryDep('buf432', c0, {c0: 115328}, None),
        MemoryDep('buf433', c0, {c0: 115328}, None),
        MemoryDep('buf434', c0, {c0: 14761984}, None)]
op431_op432_op433_op434.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 14761984}, None),
        MemoryDep('buf430', c0, {c0: 14761984}, None)]
op431_op432_op433_op434.met_dependencies = []
op431_op432_op433_op434.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False)]
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf434.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op431_op432_op433_op434.snodes[0] =
op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 14761984}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 14761984}, None),
        MemoryDep('buf430', c0, {c0: 14761984}, None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (14761984, 1)
op431.sizes = ([14761984], [])
buf427_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf430_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf431_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op431_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf430', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf431', get_index_2, add, None)
        return store
op431 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op431_op432_op433_op434.snodes[1] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 115328}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 14761984}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (115328, 128)
op432.sizes = ([115328], [128])
buf431_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op432_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf432', get_index_1, reduction)
        return store_reduction
op432 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op431_op432_op433_op434.snodes[2] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 115328}, None)]
op433.unmet_dependencies = [MemoryDep('buf432', c0, {c0: 115328}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op433.group.device = cuda:0
op433.group.iteration = (115328, 1)
op433.sizes = ([115328], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op433_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf433', get_index_1, rsqrt, None)
        return store
op433 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op431_op432_op433_op434.snodes[3] =
op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 14761984}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 14761984}, None),
        MemoryDep('buf433', c0, {c0: 115328}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf434.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op434.group.device = cuda:0
op434.group.iteration = (14761984, 1)
op434.sizes = ([115328, 128], [])
buf431_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf434_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op434_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf433', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf434', get_index_2, to_dtype_1, None)
        return store
op434 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op431_op432_op433_op434 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op435: ExternKernelSchedulerNode(ExternKernelOut)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf434', mode=None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ExternKernelOut
    buf435.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf435.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op435.node.kernel = extern_kernels.mm


op436_op437: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op436_op437.writes = 
    [   MemoryDep('buf436', c0, {c0: 14761984}, None),
        MemoryDep('buf437', c0, {c0: 14761984}, None)]
op436_op437.unmet_dependencies = 
    [   MemoryDep('buf435', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf435', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op436_op437.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op436_op437.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf436.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf437.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op436_op437.snodes[0] =
op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 14761984}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf435', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op436.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf436.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op436.group.device = cuda:0
op436.group.iteration = (14761984, 1)
op436.sizes = ([128, 901, 2, 64], [])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf436_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op436_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf436', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op436 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op436_op437.snodes[1] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 14761984}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf435', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf435', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op437.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf437.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op437.group.device = cuda:0
op437.group.iteration = (14761984, 1)
op437.sizes = ([128, 901, 2, 64], [])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf435_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf437_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op437_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf437', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf435', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op437 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op436_op437 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op438: ExternKernelSchedulerNode(FallbackKernel)
op438.writes = [StarDep(name='buf438', mode=None)]
op438.unmet_dependencies = 
    [   StarDep(name='buf435', mode=None),
        StarDep(name='buf436', mode=None),
        StarDep(name='buf437', mode=None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: FallbackKernel
    buf438.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf438.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
    ]
]
op438.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op439: ExternKernelSchedulerNode(MultiOutput)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = []
op439.outputs = [
    buf439: MultiOutput
    buf439.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf439.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op439.node.kernel = None


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf218', mode=None), StarDep(name='buf439', mode=None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op443.node.kernel = extern_kernels.mm


op444_op445_op446_op447: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op444_op445_op446_op447.writes = 
    [   MemoryDep('buf444', c0, {c0: 14761984}, None),
        MemoryDep('buf445', c0, {c0: 115328}, None),
        MemoryDep('buf446', c0, {c0: 115328}, None),
        MemoryDep('buf447', c0, {c0: 14761984}, None)]
op444_op445_op446_op447.unmet_dependencies = 
    [   MemoryDep('buf434', c0, {c0: 14761984}, None),
        MemoryDep('buf443', c0, {c0: 14761984}, None)]
op444_op445_op446_op447.met_dependencies = []
op444_op445_op446_op447.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf445.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False)]
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf446.users = [
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op444_op445_op446_op447.snodes[0] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 14761984}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf434', c0, {c0: 14761984}, None),
        MemoryDep('buf443', c0, {c0: 14761984}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op444.group.device = cuda:0
op444.group.iteration = (14761984, 1)
op444.sizes = ([14761984], [])
buf434_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf443_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf444_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op444_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf443', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf444', get_index_2, add, None)
        return store
op444 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op444_op445_op446_op447.snodes[1] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 115328}, None)]
op445.unmet_dependencies = [MemoryDep('buf444', c0, {c0: 14761984}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf445.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (115328, 128)
op445.sizes = ([115328], [128])
buf444_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op445_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf445', get_index_1, reduction)
        return store_reduction
op445 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op444_op445_op446_op447.snodes[2] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 115328}, None)]
op446.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 115328}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf446.users = [
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op446.group.device = cuda:0
op446.group.iteration = (115328, 1)
op446.sizes = ([115328], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf446_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op446_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf446', get_index_1, rsqrt, None)
        return store
op446 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op444_op445_op446_op447.snodes[3] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 14761984}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf444', c0, {c0: 14761984}, None),
        MemoryDep('buf446', c0, {c0: 115328}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op447.group.device = cuda:0
op447.group.iteration = (14761984, 1)
op447.sizes = ([115328, 128], [])
buf444_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf447_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op447_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf446', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf447', get_index_2, to_dtype_1, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op444_op445_op446_op447 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf221', mode=None), StarDep(name='buf447', mode=None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.mm


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 59047936}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf448', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf448', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf449.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op449.group.device = cuda:0
op449.group.iteration = (59047936, 1)
op449.sizes = ([115328, 512], [])
buf448_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf448_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf449_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op449_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf448', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf448', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf449', get_index_3, mul_1, None)
        return store
op449 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op450: ExternKernelSchedulerNode(ExternKernelOut)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf449', mode=None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ExternKernelOut
    buf450.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf450.users = [NodeUser(node=SchedulerNode(name='op451'), can_inplace=True, is_weak=False)]
]
op450.node.kernel = extern_kernels.mm


op451_op452_op453_op454_op464_op466: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op451_op452_op453_op454_op464_op466.writes = 
    [   MemoryDep('buf451', c0, {c0: 14761984}, None),
        MemoryDep('buf452', c0, {c0: 115328}, None),
        MemoryDep('buf453', c0, {c0: 115328}, None),
        MemoryDep('buf454', c0, {c0: 14761984}, None),
        MemoryDep('buf464', c0, {c0: 14761984}, None),
        MemoryDep('buf466', c0, {c0: 14761984}, None)]
op451_op452_op453_op454_op464_op466.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf373', c0, {c0: 14761984}, None),
        MemoryDep('buf447', c0, {c0: 14761984}, None),
        MemoryDep('buf450', c0, {c0: 14761984}, None)]
op451_op452_op453_op454_op464_op466.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op451_op452_op453_op454_op464_op466.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False)]
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf454.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf464.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False),
    ]
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf466.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op451_op452_op453_op454_op464_op466.snodes[0] =
op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 14761984}, None)]
op451.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 14761984}, None),
        MemoryDep('buf450', c0, {c0: 14761984}, None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op451.group.device = cuda:0
op451.group.iteration = (14761984, 1)
op451.sizes = ([14761984], [])
buf447_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf450_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf451_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op451_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf450', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf451', get_index_2, add, None)
        return store
op451 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(in_out_ptr0 + (x0), tmp2, None)
op451_op452_op453_op454_op464_op466.snodes[1] =
op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 115328}, None)]
op452.unmet_dependencies = [MemoryDep('buf451', c0, {c0: 14761984}, None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (115328, 128)
op452.sizes = ([115328], [128])
buf451_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op452_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf452', get_index_1, reduction)
        return store_reduction
op452 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2, 3))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tmp1 * tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(xmask, tmp3, 0)
        tmp6 = tl.sum(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op451_op452_op453_op454_op464_op466.snodes[2] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 115328}, None)]
op453.unmet_dependencies = [MemoryDep('buf452', c0, {c0: 115328}, None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (115328, 1)
op453.sizes = ([115328], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf453_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
class op453_loop_body:
    var_ranges = {z0: 115328}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf453', get_index_1, rsqrt, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(1,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), xmask)
        tmp1 = 128.0
        tmp2 = tmp0 / tmp1
        tmp3 = 1e-05
        tmp4 = tmp2 + tmp3
        tmp5 = libdevice.rsqrt(tmp4)
        tl.store(in_out_ptr0 + (x0), tmp5, xmask)
op451_op452_op453_op454_op464_op466.snodes[3] =
op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 14761984}, None)]
op454.unmet_dependencies = 
    [   MemoryDep('buf451', c0, {c0: 14761984}, None),
        MemoryDep('buf453', c0, {c0: 115328}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf454.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (14761984, 1)
op454.sizes = ([115328, 128], [])
buf451_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 1])
buf454_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op454_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf453', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf454', get_index_2, to_dtype_1, None)
        return store
op454 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, None)
op451_op452_op453_op454_op464_op466.snodes[4] =
op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 14761984}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf454', c0, {c0: 14761984}, None)]
op464.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf464.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False),
    ]
]
op464.group.device = cuda:0
op464.group.iteration = (14761984, 1)
op464.sizes = ([128, 901, 128], [])
buf454_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_17_layout = FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_15_layout = FixedLayout('cuda', torch.float32, size=[10, 128], stride=[128, 1])
buf464_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op464_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = 115328*z0 + 128*z1 + z2
    index1 = z1
    index2 = z0
    index3 = z2
    index4 = 900*z0 + I
    index5 = 128*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_4 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(901, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock3)
        constant_4 = ops.constant(11.313708498984761, torch.bfloat16)
        mul = ops.mul(where, constant_4)
        add = ops.add(load, mul)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf464', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('primals_17', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
    def masked_subblock3(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf0', get_index)
        set_indirect1 = self.set_indirect1(load)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('primals_15', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
op464 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*i32', 2: '*fp32', 3: '*i32', 4: '*fp32', 5: '*bf16', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x1 = (xindex // 128) % 901
        x2 = (xindex // 115328)
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (x3), None).to(tl.float32)
        tmp1 = x1
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 >= tmp2
        tmp4 = tl.full([1], 1, tl.int64)
        tmp5 = tmp1 < tmp4
        tmp6 = tl.load(in_ptr1 + (x2), tmp5, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.full([XBLOCK], 1, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert(((0 <= tl.broadcast_to(tmp10, [XBLOCK])) & (tl.broadcast_to(tmp10, [XBLOCK]) < 1)) | ~(tmp5), "index out of bounds: 0 <= tl.broadcast_to(tmp10, [XBLOCK]) < 1")
        tmp12 = tl.load(in_ptr2 + (x0), tmp5, eviction_policy='evict_last', other=0.0)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tl.full(tmp13.shape, 0.0, tmp13.dtype)
        tmp15 = tl.where(tmp5, tmp13, tmp14)
        tmp16 = tmp1 >= tmp4
        tmp17 = tl.full([1], 901, tl.int64)
        tmp18 = tmp1 < tmp17
        tmp19 = tl.load(in_ptr3 + ((900*x2) + ((-1) + x1)), tmp16, eviction_policy='evict_last', other=0.0)
        tmp20 = tl.full([XBLOCK], 10, tl.int32)
        tmp21 = tmp19 + tmp20
        tmp22 = tmp19 < 0
        tmp23 = tl.where(tmp22, tmp21, tmp19)
        tl.device_assert(((0 <= tl.broadcast_to(tmp23, [XBLOCK])) & (tl.broadcast_to(tmp23, [XBLOCK]) < 10)) | ~(tmp16), "index out of bounds: 0 <= tl.broadcast_to(tmp23, [XBLOCK]) < 10")
        tmp25 = tl.load(in_ptr4 + (x0 + (128*tmp23)), tmp16, other=0.0)
        tmp26 = tmp25.to(tl.float32)
        tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
        tmp28 = tl.where(tmp16, tmp26, tmp27)
        tmp29 = tl.where(tmp5, tmp15, tmp28)
        tmp30 = 11.313708498984761
        tmp31 = tmp29 * tmp30
        tmp32 = tmp0 + tmp31
        tl.store(out_ptr0 + (x3), tmp32, None)
op451_op452_op453_op454_op464_op466.snodes[5] =
op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 14761984}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 14761984}, None),
        MemoryDep('buf464', c0, {c0: 14761984}, None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf466.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op466.group.device = cuda:0
op466.group.iteration = (14761984, 1)
op466.sizes = ([14761984], [])
buf373_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf464_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf466_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op466_loop_body:
    var_ranges = {z0: 14761984}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf464', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf466', get_index_2, add, None)
        return store
op466 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x0), tmp2, None)
op451_op452_op453_op454_op464_op466 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*bf16', 3: '*i32', 4: '*fp32', 5: '*i32', 6: '*fp32', 7: '*bf16', 8: '*bf16', 9: '*bf16', 10: '*bf16', 11: 'i32', 12: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(11, 12))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        x2 = xindex % 901
        x3 = (xindex // 901)
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_out_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp48 = tl.load(in_ptr5 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp16 = x2
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 >= tmp17
        tmp19 = tl.full([1, 1], 1, tl.int64)
        tmp20 = tmp16 < tmp19
        tmp21 = tl.load(in_ptr1 + (tl.broadcast_to(x3, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full([XBLOCK, RBLOCK], 1, tl.int32)
        tmp23 = tmp21 + tmp22
        tmp24 = tmp21 < 0
        tmp25 = tl.where(tmp24, tmp23, tmp21)
        tl.device_assert(((0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1)) | ~(tmp20 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1")
        tmp27 = tl.load(in_ptr2 + (tl.broadcast_to(r1, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp20, tmp28, tmp29)
        tmp31 = tmp16 >= tmp19
        tmp32 = tl.full([1, 1], 901, tl.int64)
        tmp33 = tmp16 < tmp32
        tmp34 = tl.load(in_ptr3 + (tl.broadcast_to((900*x3) + ((-1) + x2), [XBLOCK, RBLOCK])), tmp31 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.full([XBLOCK, RBLOCK], 10, tl.int32)
        tmp36 = tmp34 + tmp35
        tmp37 = tmp34 < 0
        tmp38 = tl.where(tmp37, tmp36, tmp34)
        tl.device_assert(((0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10)) | ~(tmp31 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10")
        tmp40 = tl.load(in_ptr4 + (tl.broadcast_to(r1 + (128*tmp38), [XBLOCK, RBLOCK])), tmp31 & xmask, other=0.0)
        tmp41 = tmp40.to(tl.float32)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp31, tmp41, tmp42)
        tmp44 = tl.where(tmp20, tmp30, tmp43)
        tmp45 = 11.313708498984761
        tmp46 = tmp44 * tmp45
        tmp47 = tmp15 + tmp46
        tmp49 = tmp48 + tmp47
        tl.store(in_out_ptr0 + (r1 + (128*x0)), tmp2, xmask)
        tl.debug_barrier()
        tl.store(in_out_ptr1 + (x0), tmp13, xmask)
        tl.store(out_ptr0 + (r1 + (128*x0)), tmp15, xmask)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp47, xmask)
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp49, xmask)


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 1280}, None)]
op455.unmet_dependencies = []
op455.met_dependencies = [MemoryDep('primals_51', c0, {c0: 1280}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.bfloat16, size=[10, 128], stride=[128, 1])
    buf455.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (1280, 1)
op455.sizes = ([1280], [])
primals_51_layout = FixedLayout('cuda', torch.float32, size=[10, 128], stride=[128, 1])
buf455_layout = FixedLayout('cuda', torch.bfloat16, size=[10, 128], stride=[128, 1])
class op455_loop_body:
    var_ranges = {z0: 1280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_51', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf455', get_index_1, to_dtype, None)
        return store
op455 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2048], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1280
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, xmask)


op456: ExternKernelSchedulerNode(ExternKernelOut)
op456.writes = [StarDep(name='buf456', mode=None)]
op456.unmet_dependencies = [StarDep(name='buf454', mode=None), StarDep(name='buf455', mode=None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ExternKernelOut
    buf456.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 10], stride=[10, 1])
    buf456.users = [
        NodeUser(node=SchedulerNode(name='op889'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op898'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op456.node.kernel = extern_kernels.mm


op889_op898_op899_op900: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op889_op898_op899_op900.writes = 
    [   MemoryDep('buf889', c0, {c0: 115200}, None),
        MemoryDep('buf898', 9008*c0 + c1, {c0: 128, c1: 9000}, None),
        MemoryDep('buf899', 9088*c0 + c1, {c0: 128, c1: 9000}, None),
        MemoryDep('buf900', c0, {c0: 115200}, None)]
op889_op898_op899_op900.unmet_dependencies = [MemoryDep('buf456', 9010*c0 + c1 + 10, {c0: 128, c1: 9000}, None)]
op889_op898_op899_op900.met_dependencies = []
op889_op898_op899_op900.outputs = [
    buf889: ComputedBuffer
    buf889.layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
    buf889.users = [
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
    ]
    buf898: ComputedBuffer
    buf898.layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
    buf898.users = [
        NodeUser(node=SchedulerNode(name='op899'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op900'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf899: ComputedBuffer
    buf899.layout = FixedLayout('cuda', torch.bool, size=[128, 900, 10], stride=[9088, 10, 1])
    buf899.users = [
        NodeUser(node=SchedulerNode(name='op900'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf900: ComputedBuffer
    buf900.layout = FixedLayout('cuda', torch.float64, size=[128, 900, 1], stride=[900, 1, 1])
    buf900.users = [
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op889_op898_op899_op900.snodes[0] =
op889: SchedulerNode(ComputedBuffer)
op889.writes = [MemoryDep('buf889', c0, {c0: 115200}, None)]
op889.unmet_dependencies = [MemoryDep('buf456', 9010*c0 + c1 + 10, {c0: 128, c1: 9000}, None)]
op889.met_dependencies = []
op889.outputs = [
    buf889: ComputedBuffer
    buf889.layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
    buf889.users = [
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
    ]
]
op889.group.device = cuda:0
op889.group.iteration = (115200, 10)
op889.sizes = ([128, 900], [10])
buf456_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 10], stride=[10, 1])
buf889_layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
class op889_loop_body:
    var_ranges = {z0: 128, z1: 900, z2: 10}
    index0 = 9010*z0 + 10*z1 + z2 + 10
    index1 = 900*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        reduction = ops.reduction(torch.int64, torch.bfloat16, 'argmax', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf889', get_index_1, reduction)
        return store_reduction
op889 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        rnumel = 10
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r2 = rindex
        x0 = xindex % 900
        x1 = (xindex // 900)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (10 + r2 + (10*x0) + (9010*x1)), rmask & xmask, other=0.0).to(tl.float32)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(rmask & xmask, tmp1, float("-inf"))
        tmp4 = tl.broadcast_to(rindex, tmp3.shape)
        _, tmp2_tmp = triton_helpers.max_with_index(tmp3, tmp4, 1)
        tmp2 = tmp2_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp2, xmask)
op889_op898_op899_op900.snodes[1] =
op898: SchedulerNode(ComputedBuffer)
op898.writes = [MemoryDep('buf898', 9008*c0 + c1, {c0: 128, c1: 9000}, None)]
op898.unmet_dependencies = [MemoryDep('buf456', 9010*c0 + c1 + 10, {c0: 128, c1: 9000}, None)]
op898.met_dependencies = []
op898.outputs = [
    buf898: ComputedBuffer
    buf898.layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
    buf898.users = [
        NodeUser(node=SchedulerNode(name='op899'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op900'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op898.group.device = cuda:0
op898.group.iteration = (1152000, 1)
op898.sizes = ([128, 9000], [])
buf456_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 10], stride=[10, 1])
buf898_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
class op898_loop_body:
    var_ranges = {z0: 128, z1: 9000}
    index0 = 9010*z0 + z1 + 10
    index1 = 9008*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        to_dtype = ops.to_dtype(load, torch.float64, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf898', get_index_1, to_dtype, None)
        return store
op898 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1152000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex % 9000
        x1 = (xindex // 9000)
        tmp0 = tl.load(in_ptr0 + (10 + x0 + (9010*x1)), xmask).to(tl.float32)
        tmp1 = tmp0.to(tl.float64)
        tl.store(out_ptr0 + (x0 + (9008*x1)), tmp1, xmask)
op889_op898_op899_op900.snodes[2] =
op899: SchedulerNode(ComputedBuffer)
op899.writes = [MemoryDep('buf899', 9088*c0 + c1, {c0: 128, c1: 9000}, None)]
op899.unmet_dependencies = [MemoryDep('buf898', 9008*c0 + c1, {c0: 128, c1: 9000}, None)]
op899.met_dependencies = []
op899.outputs = [
    buf899: ComputedBuffer
    buf899.layout = FixedLayout('cuda', torch.bool, size=[128, 900, 10], stride=[9088, 10, 1])
    buf899.users = [
        NodeUser(node=SchedulerNode(name='op900'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op899.group.device = cuda:0
op899.group.iteration = (1152000, 1)
op899.sizes = ([128, 9000], [])
buf898_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
buf899_layout = FixedLayout('cuda', torch.bool, size=[128, 900, 10], stride=[9088, 10, 1])
class op899_loop_body:
    var_ranges = {z0: 128, z1: 9000}
    index0 = 9008*z0 + z1
    index1 = 9088*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf898', get_index)
        constant = ops.constant(0.0, torch.float64)
        lt = ops.lt(load, constant)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf899', get_index_1, lt, None)
        return store
op899 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp64', 1: '*i1', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1152000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex % 9000
        x1 = (xindex // 9000)
        tmp0 = tl.load(in_ptr0 + (x0 + (9008*x1)), xmask)
        tmp1 = tl.full([1], 0.0, tl.float64)
        tmp2 = tmp0 < tmp1
        tl.store(out_ptr0 + (x0 + (9088*x1)), tmp2, xmask)
op889_op898_op899_op900.snodes[3] =
op900: SchedulerNode(ComputedBuffer)
op900.writes = [MemoryDep('buf900', c0, {c0: 115200}, None)]
op900.unmet_dependencies = 
    [   MemoryDep('buf898', 9008*c0 + c1, {c0: 128, c1: 9000}, None),
        MemoryDep('buf899', 9088*c0 + c1, {c0: 128, c1: 9000}, None)]
op900.met_dependencies = []
op900.outputs = [
    buf900: ComputedBuffer
    buf900.layout = FixedLayout('cuda', torch.float64, size=[128, 900, 1], stride=[900, 1, 1])
    buf900.users = [
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op900.group.device = cuda:0
op900.group.iteration = (115200, 10)
op900.sizes = ([128, 900], [10])
buf899_layout = FixedLayout('cuda', torch.bool, size=[128, 900, 10], stride=[9088, 10, 1])
buf898_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
buf900_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 1], stride=[900, 1, 1])
class op900_loop_body:
    var_ranges = {z0: 128, z1: 900, z2: 10}
    index0 = 9088*z0 + 10*z1 + z2
    index1 = 9008*z0 + 10*z1 + z2
    index2 = 900*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf899', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf898', get_index_1)
        constant = ops.constant(1.0, torch.float64)
        sub = ops.sub(constant, load_1)
        constant_1 = ops.constant(1e-30, torch.float64)
        add = ops.add(sub, constant_1)
        reciprocal = ops.reciprocal(add)
        constant_2 = ops.constant(1.0, torch.float64)
        mul = ops.mul(reciprocal, constant_2)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf898', get_index_2)
        constant_3 = ops.constant(1.0, torch.float64)
        add_1 = ops.add(load_2, constant_3)
        where = ops.where(load, mul, add_1)
        reduction = ops.reduction(torch.float64, torch.float64, 'sum', where)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf900', get_index_3, reduction)
        return store_reduction
op900 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp64', 2: '*fp64', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        rnumel = 10
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r2 = rindex
        x0 = xindex % 900
        x1 = (xindex // 900)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (r2 + (10*x0) + (9088*x1)), rmask & xmask, other=0.0).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r2 + (10*x0) + (9008*x1)), rmask & xmask, other=0.0)
        tmp2 = tl.full([1, 1], 1.0, tl.float64)
        tmp3 = tmp2 - tmp1
        tmp4 = tl.full([1, 1], 1e-30, tl.float64)
        tmp5 = tmp3 + tmp4
        tmp6 = tl.full([1, 1], 1, tl.int32)
        tmp7 = tmp6 / tmp5
        tmp8 = tmp7 * tmp2
        tmp9 = tmp1 + tmp2
        tmp10 = tl.where(tmp0, tmp8, tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.where(rmask & xmask, tmp11, 0)
        tmp14 = tl.sum(tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp14, xmask)
op889_op898_op899_op900 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*i64', 2: '*fp64', 3: '*i1', 4: '*fp64', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, out_ptr2, out_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        rnumel = 10
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r2 = rindex
        x0 = xindex % 900
        x1 = (xindex // 900)
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (10 + r2 + (10*x0) + (9010*x1)), rmask & xmask, other=0.0).to(tl.float32)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(rmask & xmask, tmp1, float("-inf"))
        tmp4 = tl.broadcast_to(rindex, tmp3.shape)
        _, tmp2_tmp = triton_helpers.max_with_index(tmp3, tmp4, 1)
        tmp2 = tmp2_tmp[:, None]
        tmp5 = tmp0.to(tl.float64)
        tmp6 = tl.full([1, 1], 0.0, tl.float64)
        tmp7 = tmp5 < tmp6
        tmp8 = tl.full([1, 1], 1.0, tl.float64)
        tmp9 = tmp8 - tmp5
        tmp10 = tl.full([1, 1], 1e-30, tl.float64)
        tmp11 = tmp9 + tmp10
        tmp12 = tl.full([1, 1], 1, tl.int32)
        tmp13 = tmp12 / tmp11
        tmp14 = tmp13 * tmp8
        tmp15 = tmp5 + tmp8
        tmp16 = tl.where(tmp7, tmp14, tmp15)
        tmp17 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
        tmp19 = tl.where(rmask & xmask, tmp17, 0)
        tmp20 = tl.sum(tmp19, 1)[:, None]
        tl.store(out_ptr1 + (r2 + (10*x0) + (9008*x1)), tmp5, rmask & xmask)
        tl.store(out_ptr2 + (r2 + (10*x0) + (9088*x1)), tmp7, rmask & xmask)
        tl.store(out_ptr0 + (x3), tmp2, xmask)
        tl.store(out_ptr3 + (x3), tmp20, xmask)


op1_op886_op901_op887_op888_op890_op893: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op1_op886_op901_op887_op888_op890_op893.writes = 
    [   MemoryDep('buf1', c0, {c0: 115200}, None),
        MemoryDep('buf886', c0, {c0: 115200}, None),
        MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf888', c0, {c0: 128}, None),
        MemoryDep('buf890', c0, {c0: 128}, None),
        MemoryDep('buf893', c0, {c0: 128}, None),
        MemoryDep('buf901', c0, {c0: 115200}, None)]
op1_op886_op901_op887_op888_op890_op893.unmet_dependencies = [MemoryDep('buf889', c0, {c0: 115200}, None)]
op1_op886_op901_op887_op888_op890_op893.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_10', c0, {c0: 115200}, None),
        MemoryDep('primals_9', c0, {c0: 115200}, None)]
op1_op886_op901_op887_op888_op890_op893.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op886'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf886: ComputedBuffer
    buf886.layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
    buf886.users = [
        NodeUser(node=SchedulerNode(name='op887'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf901: ComputedBuffer
    buf901.layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
    buf901.users = [
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf887: ComputedBuffer
    buf887.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf887.users = [
        NodeUser(node=SchedulerNode(name='op888'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op892'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
    ]
    buf888: ComputedBuffer
    buf888.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf888.users = [
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf890: ComputedBuffer
    buf890.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf890.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False)]
    buf893: ComputedBuffer
    buf893.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf893.users = [NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False)]
]
op1_op886_op901_op887_op888_op890_op893.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 115200}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_10', c0, {c0: 115200}, None),
        MemoryDep('primals_9', c0, {c0: 115200}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op886'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (115200, 1)
op1.sizes = ([128, 900], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_10_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_9_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf1_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
class op1_loop_body:
    var_ranges = {z0: 128, z1: 900}
    index0 = z0
    index1 = 900*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_10', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_9', get_index_2)
        where = ops.where(load, load_1, load_2)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf1', get_index_3, where, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: '*i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x1 = (xindex // 900)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x2), xmask)
        tmp2 = tl.load(in_ptr2 + (x2), xmask)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tl.store(out_ptr0 + (x2), tmp3, xmask)
op1_op886_op901_op887_op888_op890_op893.snodes[1] =
op886: SchedulerNode(ComputedBuffer)
op886.writes = [MemoryDep('buf886', c0, {c0: 115200}, None)]
op886.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 115200}, None)]
op886.met_dependencies = []
op886.outputs = [
    buf886: ComputedBuffer
    buf886.layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
    buf886.users = [
        NodeUser(node=SchedulerNode(name='op887'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op890'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op901'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op886.group.device = cuda:0
op886.group.iteration = (115200, 1)
op886.sizes = ([115200], [])
buf1_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
class op886_loop_body:
    var_ranges = {z0: 115200}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(-100, torch.int32)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf886', get_index_1, ne, None)
        return store
op886 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*i1', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl.full([1], -100, tl.int32)
        tmp2 = tmp0 != tmp1
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op1_op886_op901_op887_op888_op890_op893.snodes[2] =
op901: SchedulerNode(ComputedBuffer)
op901.writes = [MemoryDep('buf901', c0, {c0: 115200}, None)]
op901.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 115200}, None),
        MemoryDep('buf886', c0, {c0: 115200}, None)]
op901.met_dependencies = []
op901.outputs = [
    buf901: ComputedBuffer
    buf901.layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
    buf901.users = [
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op901.group.device = cuda:0
op901.group.iteration = (115200, 1)
op901.sizes = ([115200], [])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
buf1_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf901_layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
class op901_loop_body:
    var_ranges = {z0: 115200}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf886', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf1', get_index_1)
        constant = ops.constant(0, torch.int32)
        where = ops.where(load, load_1, constant)
        to_dtype = ops.to_dtype(where, torch.int64, src_dtype = torch.int32)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf901', get_index_2, to_dtype, None)
        return store
op901 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i64', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 115200
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl.full([1], 0, tl.int32)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp4 = tmp3.to(tl.int64)
        tl.store(out_ptr0 + (x0), tmp4, xmask)
op1_op886_op901_op887_op888_op890_op893.snodes[3] =
op887: SchedulerNode(ComputedBuffer)
op887.writes = [MemoryDep('buf887', c0, {c0: 128}, None)]
op887.unmet_dependencies = [MemoryDep('buf886', c0, {c0: 115200}, None)]
op887.met_dependencies = []
op887.outputs = [
    buf887: ComputedBuffer
    buf887.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf887.users = [
        NodeUser(node=SchedulerNode(name='op888'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op892'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
    ]
]
op887.group.device = cuda:0
op887.group.iteration = (128, 900)
op887.sizes = ([128], [900])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
class op887_loop_body:
    var_ranges = {z0: 128, z1: 900}
    index0 = 900*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf886', get_index)
        to_dtype = ops.to_dtype(load, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf887', get_index_1, reduction)
        return store_reduction
op887 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 128
        XBLOCK: tl.constexpr = 1
        rnumel = 900
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (900*x0)), rmask, other=0.0).to(tl.int1)
        tmp1 = tmp0.to(tl.int64)
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = tl.where(rmask, tmp2, 0)
        tmp5 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp5, None)
op1_op886_op901_op887_op888_op890_op893.snodes[4] =
op888: SchedulerNode(ComputedBuffer)
op888.writes = [MemoryDep('buf888', c0, {c0: 128}, None)]
op888.unmet_dependencies = [MemoryDep('buf887', c0, {c0: 128}, None)]
op888.met_dependencies = []
op888.outputs = [
    buf888: ComputedBuffer
    buf888.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf888.users = [
        NodeUser(node=SchedulerNode(name='op893'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op902'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op888.group.device = cuda:0
op888.group.iteration = (128, 1)
op888.sizes = ([128], [])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf888_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
class op888_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf887', get_index)
        constant = ops.constant(1, torch.int64)
        maximum = ops.maximum(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf888', get_index_1, maximum, None)
        return store
op888 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl.full([1], 1, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op1_op886_op901_op887_op888_op890_op893.snodes[5] =
op890: SchedulerNode(ComputedBuffer)
op890.writes = [MemoryDep('buf890', c0, {c0: 128}, None)]
op890.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 115200}, None),
        MemoryDep('buf886', c0, {c0: 115200}, None),
        MemoryDep('buf889', c0, {c0: 115200}, None)]
op890.met_dependencies = []
op890.outputs = [
    buf890: ComputedBuffer
    buf890.layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
    buf890.users = [NodeUser(node=SchedulerNode(name='op891'), can_inplace=True, is_weak=False)]
]
op890.group.device = cuda:0
op890.group.iteration = (128, 900)
op890.sizes = ([128], [900])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
buf889_layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
buf1_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf890_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
class op890_loop_body:
    var_ranges = {z0: 128, z1: 900}
    index0 = 900*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf886', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf889', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int64, src_dtype = torch.int32)
        eq = ops.eq(load_1, to_dtype)
        bitwise_and = ops.bitwise_and(load, eq)
        to_dtype_1 = ops.to_dtype(bitwise_and, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype_1)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf890', get_index_3, reduction)
        return store_reduction
op890 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i32', 3: '*i64', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 128
        XBLOCK: tl.constexpr = 1
        rnumel = 900
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (900*x0)), rmask, other=0.0).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r1 + (900*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (900*x0)), rmask, other=0.0)
        tmp3 = tmp2.to(tl.int64)
        tmp4 = tmp1 == tmp3
        tmp5 = tmp0 & tmp4
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [RBLOCK])
        tmp9 = tl.where(rmask, tmp7, 0)
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp9, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op1_op886_op901_op887_op888_op890_op893.snodes[6] =
op893: SchedulerNode(ComputedBuffer)
op893.writes = [MemoryDep('buf893', c0, {c0: 128}, None)]
op893.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 115200}, None),
        MemoryDep('buf886', c0, {c0: 115200}, None),
        MemoryDep('buf888', c0, {c0: 128}, None),
        MemoryDep('buf889', c0, {c0: 115200}, None)]
op893.met_dependencies = []
op893.outputs = [
    buf893: ComputedBuffer
    buf893.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf893.users = [NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False)]
]
op893.group.device = cuda:0
op893.group.iteration = (128, 900)
op893.sizes = ([128], [900])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
buf889_layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
buf1_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
buf888_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf893_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
class op893_loop_body:
    var_ranges = {z0: 128, z1: 900}
    index0 = 900*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf886', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf889', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.int64, src_dtype = torch.int32)
        eq = ops.eq(load_1, to_dtype)
        bitwise_and = ops.bitwise_and(load, eq)
        to_dtype_1 = ops.to_dtype(bitwise_and, torch.float32, src_dtype = torch.bool)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf888', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(to_dtype_1, to_dtype_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', truediv)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf893', get_index_4, reduction)
        return store_reduction
op893 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i32', 3: '*i64', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 128
        XBLOCK: tl.constexpr = 1
        rnumel = 900
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (900*x0)), rmask, other=0.0).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r1 + (900*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (900*x0)), rmask, other=0.0)
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp2.to(tl.int64)
        tmp4 = tmp1 == tmp3
        tmp5 = tmp0 & tmp4
        tmp6 = tmp5.to(tl.float32)
        tmp8 = tmp7.to(tl.float32)
        tmp9 = tmp6 / tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp13, None)
op1_op886_op901_op887_op888_op890_op893 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: '*i64', 4: '*i32', 5: '*i1', 6: '*i64', 7: '*i64', 8: '*i64', 9: '*i64', 10: '*fp32', 11: 'i32', 12: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(11,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 3, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, xnumel, rnumel):
        xnumel = 128
        XBLOCK: tl.constexpr = 1
        rnumel = 900
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last').to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r1 + (900*x0)), rmask, other=0.0)
        tmp2 = tl.load(in_ptr2 + (r1 + (900*x0)), rmask, other=0.0)
        tmp16 = tl.load(in_ptr3 + (r1 + (900*x0)), rmask, other=0.0)
        tmp3 = tl.where(tmp0, tmp1, tmp2)
        tmp4 = tl.full([1], -100, tl.int32)
        tmp5 = tmp3 != tmp4
        tmp6 = tl.full([1], 0, tl.int32)
        tmp7 = tl.where(tmp5, tmp3, tmp6)
        tmp8 = tmp7.to(tl.int64)
        tmp9 = tmp5.to(tl.int64)
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = tl.where(rmask, tmp10, 0)
        tmp13 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tmp14 = tl.full([1], 1, tl.int64)
        tmp15 = triton_helpers.maximum(tmp13, tmp14)
        tmp17 = tmp3.to(tl.int64)
        tmp18 = tmp16 == tmp17
        tmp19 = tmp5 & tmp18
        tmp20 = tmp19.to(tl.int64)
        tmp21 = tl.broadcast_to(tmp20, [RBLOCK])
        tmp23 = tl.where(rmask, tmp21, 0)
        tmp24 = triton_helpers.promote_to_tensor(tl.sum(tmp23, 0))
        tmp25 = tmp19.to(tl.float32)
        tmp26 = tmp15.to(tl.float32)
        tmp27 = tmp25 / tmp26
        tmp28 = tl.broadcast_to(tmp27, [RBLOCK])
        tmp30 = tl.where(rmask, tmp28, 0)
        tmp31 = triton_helpers.promote_to_tensor(tl.sum(tmp30, 0))
        tl.store(out_ptr0 + (r1 + (900*x0)), tmp3, rmask)
        tl.store(out_ptr1 + (r1 + (900*x0)), tmp5, rmask)
        tl.store(out_ptr2 + (r1 + (900*x0)), tmp8, rmask)
        tl.store(out_ptr4 + (x0), tmp15, None)
        tl.store(out_ptr3 + (x0), tmp13, None)
        tl.store(out_ptr5 + (x0), tmp24, None)
        tl.store(out_ptr6 + (x0), tmp31, None)


op299: ExternKernelSchedulerNode(MultiOutput)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: MultiOutput
    buf299.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf299.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op299.node.kernel = None


op301: ExternKernelSchedulerNode(MultiOutput)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: MultiOutput
    buf301.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf301.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op301.node.kernel = None


op319: ExternKernelSchedulerNode(MultiOutput)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: MultiOutput
    buf319.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf319.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op319.node.kernel = None


op321: ExternKernelSchedulerNode(MultiOutput)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: MultiOutput
    buf321.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf321.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op321.node.kernel = None


op339: ExternKernelSchedulerNode(MultiOutput)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: MultiOutput
    buf339.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf339.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op339.node.kernel = None


op341: ExternKernelSchedulerNode(MultiOutput)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: MultiOutput
    buf341.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf341.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op341.node.kernel = None


op359: ExternKernelSchedulerNode(MultiOutput)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf357', mode=None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: MultiOutput
    buf359.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf359.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op359.node.kernel = None


op361: ExternKernelSchedulerNode(MultiOutput)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf357', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: MultiOutput
    buf361.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf361.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op361.node.kernel = None


op380: ExternKernelSchedulerNode(MultiOutput)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: MultiOutput
    buf380.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf380.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op380.node.kernel = None


op382: ExternKernelSchedulerNode(MultiOutput)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: MultiOutput
    buf382.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf382.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op382.node.kernel = None


op400: ExternKernelSchedulerNode(MultiOutput)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: MultiOutput
    buf400.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf400.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op400.node.kernel = None


op402: ExternKernelSchedulerNode(MultiOutput)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: MultiOutput
    buf402.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf402.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op402.node.kernel = None


op420: ExternKernelSchedulerNode(MultiOutput)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: MultiOutput
    buf420.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf420.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op420.node.kernel = None


op422: ExternKernelSchedulerNode(MultiOutput)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: MultiOutput
    buf422.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf422.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op422.node.kernel = None


op440: ExternKernelSchedulerNode(MultiOutput)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: MultiOutput
    buf440.layout = FixedLayout('cuda', torch.float32, size=[128, 2, 901], stride=[1802, 901, 1])
    buf440.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op440.node.kernel = None


op442: ExternKernelSchedulerNode(MultiOutput)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: MultiOutput
    buf442.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf442.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op442.node.kernel = None


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 256}, None)]
op457.unmet_dependencies = []
op457.met_dependencies = [MemoryDep('primals_52', c0, {c0: 256}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[1, 128])
    buf457.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op457.group.device = cuda:0
op457.group.iteration = (256, 1)
op457.sizes = ([256], [])
primals_52_layout = FixedLayout('cuda', torch.float32, size=[2, 128], stride=[128, 1])
buf457_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[1, 128])
class op457_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_52', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf457', get_index_1, to_dtype, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, xmask)


op458: ExternKernelSchedulerNode(ExternKernelOut)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf454', mode=None), StarDep(name='buf457', mode=None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ExternKernelOut
    buf458.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[2, 1])
    buf458.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False)]
]
op458.node.kernel = extern_kernels.mm


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 256}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 256}, None)]
op459.met_dependencies = [MemoryDep('primals_53', c1, {c0: 128, c1: 2}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op459.group.device = cuda:0
op459.group.iteration = (256, 1)
op459.sizes = ([128, 2], [])
buf458_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[2, 1])
primals_53_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
class op459_loop_body:
    var_ranges = {z0: 128, z1: 2}
    index0 = 2*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_53', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf459', get_index_2, to_dtype_1, None)
        return store
op459 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x2 = xindex
        x0 = xindex % 2
        tmp0 = tl.load(in_ptr0 + (x2), xmask).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp1.to(tl.float32)
        tmp3 = tmp0 + tmp2
        tmp4 = tmp3.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp4, xmask)


op461: ExternKernelSchedulerNode(RandomSeeds)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = []
op461.met_dependencies = []
op461.outputs = [
    buf461: RandomSeeds
    buf461.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
    ]
]
op461.node.kernel = aten.randint.low_out


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 49152}, None)]
op465.unmet_dependencies = []
op465.met_dependencies = [MemoryDep('primals_19', c0, {c0: 49152}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf465.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
]
op465.group.device = cuda:0
op465.group.iteration = (49152, 1)
op465.sizes = ([49152], [])
primals_19_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf465_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op465_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_19', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf465', get_index_1, to_dtype, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf465', mode=None), StarDep(name='buf466', mode=None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False),
    ]
]
op467.node.kernel = extern_kernels.mm


op468_op469: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op468_op469.writes = 
    [   MemoryDep('buf468', c0, {c0: 14761984}, None),
        MemoryDep('buf469', c0, {c0: 14761984}, None)]
op468_op469.unmet_dependencies = 
    [   MemoryDep('buf467', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf467', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op468_op469.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op468_op469.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op468_op469.snodes[0] =
op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 14761984}, None)]
op468.unmet_dependencies = 
    [   MemoryDep('buf467', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op468.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (14761984, 1)
op468.sizes = ([128, 901, 2, 64], [])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf468_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op468_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf468', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op468 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op468_op469.snodes[1] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 14761984}, None)]
op469.unmet_dependencies = 
    [   MemoryDep('buf467', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf467', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op469.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (14761984, 1)
op469.sizes = ([128, 901, 2, 64], [])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf467_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf469_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op469_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf469', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf467', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op469 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op468_op469 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op470: ExternKernelSchedulerNode(FallbackKernel)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = 
    [   StarDep(name='buf467', mode=None),
        StarDep(name='buf468', mode=None),
        StarDep(name='buf469', mode=None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: FallbackKernel
    buf470.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf470.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
    ]
]
op470.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op471: ExternKernelSchedulerNode(MultiOutput)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf470', mode=None)]
op471.met_dependencies = []
op471.outputs = [
    buf471: MultiOutput
    buf471.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op471.node.kernel = None


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 16384}, None)]
op475.unmet_dependencies = []
op475.met_dependencies = [MemoryDep('primals_20', c0, {c0: 16384}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf475.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False),
    ]
]
op475.group.device = cuda:0
op475.group.iteration = (16384, 1)
op475.sizes = ([16384], [])
primals_20_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf475_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op475_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_20', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf475', get_index_1, to_dtype, None)
        return store
op475 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op476: ExternKernelSchedulerNode(ExternKernelOut)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf471', mode=None), StarDep(name='buf475', mode=None)]
op476.met_dependencies = []
op476.outputs = [
    buf476: ExternKernelOut
    buf476.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf476.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op476.node.kernel = extern_kernels.mm


op477_op479: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op477_op479.writes = 
    [   MemoryDep('buf477', c0, {c0: 115328}, None),
        MemoryDep('buf479', c0, {c0: 14761984}, None)]
op477_op479.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 14761984}, None),
        MemoryDep('buf476', c0, {c0: 14761984}, None)]
op477_op479.met_dependencies = []
op477_op479.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf479.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False),
    ]
]
op477_op479.snodes[0] =
op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 115328}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 14761984}, None),
        MemoryDep('buf476', c0, {c0: 14761984}, None)]
op477.met_dependencies = []
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (115328, 128)
op477.sizes = ([115328], [128])
buf466_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf476_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op477_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf476', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf477', get_index_2, reduction)
        return store_reduction
op477 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op477_op479.snodes[1] =
op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 14761984}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 14761984}, None),
        MemoryDep('buf476', c0, {c0: 14761984}, None),
        MemoryDep('buf477', c0, {c0: 115328}, None)]
op479.met_dependencies = []
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf479.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False),
    ]
]
op479.group.device = cuda:0
op479.group.iteration = (14761984, 1)
op479.sizes = ([115328, 128], [])
buf466_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf476_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf479_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op479_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf476', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf477', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf479', get_index_3, to_dtype_1, None)
        return store
op479 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op477_op479 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 65536}, None)]
op481.unmet_dependencies = []
op481.met_dependencies = [MemoryDep('primals_22', c0, {c0: 65536}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf481.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (65536, 1)
op481.sizes = ([65536], [])
primals_22_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf481_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op481_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_22', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf481', get_index_1, to_dtype, None)
        return store
op481 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 131072}, None)]
op478.unmet_dependencies = []
op478.met_dependencies = [MemoryDep('primals_21', c0, {c0: 131072}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (131072, 1)
op478.sizes = ([131072], [])
primals_21_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf478_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op478_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf478', get_index_1, to_dtype, None)
        return store
op478 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf479', mode=None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = extern_kernels.mm


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 59047936}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf480', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf480', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (59047936, 1)
op482.sizes = ([115328, 512], [])
buf480_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf480_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf482_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op482_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf480', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf482', get_index_3, mul_1, None)
        return store
op482 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf482', mode=None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False),
    ]
]
op483.node.kernel = extern_kernels.mm


op484_op486: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op484_op486.writes = 
    [   MemoryDep('buf484', c0, {c0: 115328}, None),
        MemoryDep('buf486', c0, {c0: 14761984}, None)]
op484_op486.unmet_dependencies = 
    [   MemoryDep('buf479', c0, {c0: 14761984}, None),
        MemoryDep('buf483', c0, {c0: 14761984}, None)]
op484_op486.met_dependencies = []
op484_op486.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf486.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
    ]
]
op484_op486.snodes[0] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 115328}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf479', c0, {c0: 14761984}, None),
        MemoryDep('buf483', c0, {c0: 14761984}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (115328, 128)
op484.sizes = ([115328], [128])
buf479_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf483_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op484_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf483', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_2, reduction)
        return store_reduction
op484 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op484_op486.snodes[1] =
op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 14761984}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf479', c0, {c0: 14761984}, None),
        MemoryDep('buf483', c0, {c0: 14761984}, None),
        MemoryDep('buf484', c0, {c0: 115328}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf486.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
    ]
]
op486.group.device = cuda:0
op486.group.iteration = (14761984, 1)
op486.sizes = ([115328, 128], [])
buf479_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf483_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf486_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op486_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf483', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf484', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf486', get_index_3, to_dtype_1, None)
        return store
op486 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op484_op486 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 49152}, None)]
op485.unmet_dependencies = []
op485.met_dependencies = [MemoryDep('primals_23', c0, {c0: 49152}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf485.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False),
    ]
]
op485.group.device = cuda:0
op485.group.iteration = (49152, 1)
op485.sizes = ([49152], [])
primals_23_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf485_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op485_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_23', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf485', get_index_1, to_dtype, None)
        return store
op485 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op487: ExternKernelSchedulerNode(ExternKernelOut)
op487.writes = [StarDep(name='buf487', mode=None)]
op487.unmet_dependencies = [StarDep(name='buf485', mode=None), StarDep(name='buf486', mode=None)]
op487.met_dependencies = []
op487.outputs = [
    buf487: ExternKernelOut
    buf487.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf487.users = [
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False),
    ]
]
op487.node.kernel = extern_kernels.mm


op488_op489: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op488_op489.writes = 
    [   MemoryDep('buf488', c0, {c0: 14761984}, None),
        MemoryDep('buf489', c0, {c0: 14761984}, None)]
op488_op489.unmet_dependencies = 
    [   MemoryDep('buf487', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf487', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op488_op489.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op488_op489.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op488_op489.snodes[0] =
op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 14761984}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf487', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op488.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (14761984, 1)
op488.sizes = ([128, 901, 2, 64], [])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf488_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op488_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf488', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op488 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op488_op489.snodes[1] =
op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 14761984}, None)]
op489.unmet_dependencies = 
    [   MemoryDep('buf487', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf487', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op489.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (14761984, 1)
op489.sizes = ([128, 901, 2, 64], [])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf487_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf489_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op489_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf489', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf487', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op489 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op488_op489 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op490: ExternKernelSchedulerNode(FallbackKernel)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = 
    [   StarDep(name='buf487', mode=None),
        StarDep(name='buf488', mode=None),
        StarDep(name='buf489', mode=None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: FallbackKernel
    buf490.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf490.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op494'), can_inplace=False, is_weak=False),
    ]
]
op490.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op491: ExternKernelSchedulerNode(MultiOutput)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op491.met_dependencies = []
op491.outputs = [
    buf491: MultiOutput
    buf491.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf491.users = [NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
]
op491.node.kernel = None


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 16384}, None)]
op495.unmet_dependencies = []
op495.met_dependencies = [MemoryDep('primals_24', c0, {c0: 16384}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf495.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op779'), can_inplace=False, is_weak=False),
    ]
]
op495.group.device = cuda:0
op495.group.iteration = (16384, 1)
op495.sizes = ([16384], [])
primals_24_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf495_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op495_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_24', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf495', get_index_1, to_dtype, None)
        return store
op495 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op496: ExternKernelSchedulerNode(ExternKernelOut)
op496.writes = [StarDep(name='buf496', mode=None)]
op496.unmet_dependencies = [StarDep(name='buf491', mode=None), StarDep(name='buf495', mode=None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: ExternKernelOut
    buf496.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf496.users = [
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
    ]
]
op496.node.kernel = extern_kernels.mm


op497_op499: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op497_op499.writes = 
    [   MemoryDep('buf497', c0, {c0: 115328}, None),
        MemoryDep('buf499', c0, {c0: 14761984}, None)]
op497_op499.unmet_dependencies = 
    [   MemoryDep('buf486', c0, {c0: 14761984}, None),
        MemoryDep('buf496', c0, {c0: 14761984}, None)]
op497_op499.met_dependencies = []
op497_op499.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf497.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf499.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
    ]
]
op497_op499.snodes[0] =
op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 115328}, None)]
op497.unmet_dependencies = 
    [   MemoryDep('buf486', c0, {c0: 14761984}, None),
        MemoryDep('buf496', c0, {c0: 14761984}, None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf497.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (115328, 128)
op497.sizes = ([115328], [128])
buf486_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf496_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op497_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf496', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf497', get_index_2, reduction)
        return store_reduction
op497 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op497_op499.snodes[1] =
op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 14761984}, None)]
op499.unmet_dependencies = 
    [   MemoryDep('buf486', c0, {c0: 14761984}, None),
        MemoryDep('buf496', c0, {c0: 14761984}, None),
        MemoryDep('buf497', c0, {c0: 115328}, None)]
op499.met_dependencies = []
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf499.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
    ]
]
op499.group.device = cuda:0
op499.group.iteration = (14761984, 1)
op499.sizes = ([115328, 128], [])
buf486_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf496_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf499_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op499_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf496', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf497', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf499', get_index_3, to_dtype_1, None)
        return store
op499 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op497_op499 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 65536}, None)]
op501.unmet_dependencies = []
op501.met_dependencies = [MemoryDep('primals_26', c0, {c0: 65536}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf501.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False),
    ]
]
op501.group.device = cuda:0
op501.group.iteration = (65536, 1)
op501.sizes = ([65536], [])
primals_26_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf501_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op501_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_26', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf501', get_index_1, to_dtype, None)
        return store
op501 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 131072}, None)]
op498.unmet_dependencies = []
op498.met_dependencies = [MemoryDep('primals_25', c0, {c0: 131072}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf498.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
    ]
]
op498.group.device = cuda:0
op498.group.iteration = (131072, 1)
op498.sizes = ([131072], [])
primals_25_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf498_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op498_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_25', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf498', get_index_1, to_dtype, None)
        return store
op498 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op500: ExternKernelSchedulerNode(ExternKernelOut)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = [StarDep(name='buf498', mode=None), StarDep(name='buf499', mode=None)]
op500.met_dependencies = []
op500.outputs = [
    buf500: ExternKernelOut
    buf500.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf500.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op500.node.kernel = extern_kernels.mm


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 59047936}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf500', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf500', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (59047936, 1)
op502.sizes = ([115328, 512], [])
buf500_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf500_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf502_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op502_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf500', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf500', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf500', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf502', get_index_3, mul_1, None)
        return store
op502 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf501', mode=None), StarDep(name='buf502', mode=None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
    ]
]
op503.node.kernel = extern_kernels.mm


op504_op506: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op504_op506.writes = 
    [   MemoryDep('buf504', c0, {c0: 115328}, None),
        MemoryDep('buf506', c0, {c0: 14761984}, None)]
op504_op506.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 14761984}, None),
        MemoryDep('buf503', c0, {c0: 14761984}, None)]
op504_op506.met_dependencies = []
op504_op506.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False),
    ]
]
op504_op506.snodes[0] =
op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 115328}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 14761984}, None),
        MemoryDep('buf503', c0, {c0: 14761984}, None)]
op504.met_dependencies = []
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (115328, 128)
op504.sizes = ([115328], [128])
buf499_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf503_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op504_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf503', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf504', get_index_2, reduction)
        return store_reduction
op504 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op504_op506.snodes[1] =
op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 14761984}, None)]
op506.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 14761984}, None),
        MemoryDep('buf503', c0, {c0: 14761984}, None),
        MemoryDep('buf504', c0, {c0: 115328}, None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (14761984, 1)
op506.sizes = ([115328, 128], [])
buf499_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf503_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf506_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op506_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf503', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf504', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf506', get_index_3, to_dtype_1, None)
        return store
op506 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op504_op506 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 49152}, None)]
op505.unmet_dependencies = []
op505.met_dependencies = [MemoryDep('primals_27', c0, {c0: 49152}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf505.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op505.group.device = cuda:0
op505.group.iteration = (49152, 1)
op505.sizes = ([49152], [])
primals_27_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf505_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op505_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf505', get_index_1, to_dtype, None)
        return store
op505 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op507: ExternKernelSchedulerNode(ExternKernelOut)
op507.writes = [StarDep(name='buf507', mode=None)]
op507.unmet_dependencies = [StarDep(name='buf505', mode=None), StarDep(name='buf506', mode=None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ExternKernelOut
    buf507.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op507.node.kernel = extern_kernels.mm


op508_op509: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op508_op509.writes = 
    [   MemoryDep('buf508', c0, {c0: 14761984}, None),
        MemoryDep('buf509', c0, {c0: 14761984}, None)]
op508_op509.unmet_dependencies = 
    [   MemoryDep('buf507', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf507', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op508_op509.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op508_op509.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf508.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op508_op509.snodes[0] =
op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 14761984}, None)]
op508.unmet_dependencies = 
    [   MemoryDep('buf507', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op508.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf508.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (14761984, 1)
op508.sizes = ([128, 901, 2, 64], [])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf508_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op508_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf508', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op508 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op508_op509.snodes[1] =
op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 14761984}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf507', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf507', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op509.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (14761984, 1)
op509.sizes = ([128, 901, 2, 64], [])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf507_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf509_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op509_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf509', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op509 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op508_op509 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op510: ExternKernelSchedulerNode(FallbackKernel)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = 
    [   StarDep(name='buf507', mode=None),
        StarDep(name='buf508', mode=None),
        StarDep(name='buf509', mode=None)]
op510.met_dependencies = []
op510.outputs = [
    buf510: FallbackKernel
    buf510.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf510.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
    ]
]
op510.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op511: ExternKernelSchedulerNode(MultiOutput)
op511.writes = [StarDep(name='buf511', mode=None)]
op511.unmet_dependencies = [StarDep(name='buf510', mode=None)]
op511.met_dependencies = []
op511.outputs = [
    buf511: MultiOutput
    buf511.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf511.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op511.node.kernel = None


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 16384}, None)]
op515.unmet_dependencies = []
op515.met_dependencies = [MemoryDep('primals_28', c0, {c0: 16384}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf515.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op795'), can_inplace=False, is_weak=False),
    ]
]
op515.group.device = cuda:0
op515.group.iteration = (16384, 1)
op515.sizes = ([16384], [])
primals_28_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf515_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op515_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_28', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf515', get_index_1, to_dtype, None)
        return store
op515 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf511', mode=None), StarDep(name='buf515', mode=None)]
op516.met_dependencies = []
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False),
    ]
]
op516.node.kernel = extern_kernels.mm


op517_op519: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op517_op519.writes = 
    [   MemoryDep('buf517', c0, {c0: 115328}, None),
        MemoryDep('buf519', c0, {c0: 14761984}, None)]
op517_op519.unmet_dependencies = 
    [   MemoryDep('buf506', c0, {c0: 14761984}, None),
        MemoryDep('buf516', c0, {c0: 14761984}, None)]
op517_op519.met_dependencies = []
op517_op519.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf517.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf519.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op517_op519.snodes[0] =
op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 115328}, None)]
op517.unmet_dependencies = 
    [   MemoryDep('buf506', c0, {c0: 14761984}, None),
        MemoryDep('buf516', c0, {c0: 14761984}, None)]
op517.met_dependencies = []
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf517.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (115328, 128)
op517.sizes = ([115328], [128])
buf506_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf516_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op517_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf517', get_index_2, reduction)
        return store_reduction
op517 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op517_op519.snodes[1] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 14761984}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf506', c0, {c0: 14761984}, None),
        MemoryDep('buf516', c0, {c0: 14761984}, None),
        MemoryDep('buf517', c0, {c0: 115328}, None)]
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf519.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op519.group.device = cuda:0
op519.group.iteration = (14761984, 1)
op519.sizes = ([115328, 128], [])
buf506_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf516_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf519_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op519_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf517', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf519', get_index_3, to_dtype_1, None)
        return store
op519 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op517_op519 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 65536}, None)]
op521.unmet_dependencies = []
op521.met_dependencies = [MemoryDep('primals_30', c0, {c0: 65536}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf521.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op800'), can_inplace=False, is_weak=False),
    ]
]
op521.group.device = cuda:0
op521.group.iteration = (65536, 1)
op521.sizes = ([65536], [])
primals_30_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf521_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op521_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_30', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf521', get_index_1, to_dtype, None)
        return store
op521 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 131072}, None)]
op518.unmet_dependencies = []
op518.met_dependencies = [MemoryDep('primals_29', c0, {c0: 131072}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf518.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False),
    ]
]
op518.group.device = cuda:0
op518.group.iteration = (131072, 1)
op518.sizes = ([131072], [])
primals_29_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf518_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op518_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_29', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf518', get_index_1, to_dtype, None)
        return store
op518 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op520: ExternKernelSchedulerNode(ExternKernelOut)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf519', mode=None)]
op520.met_dependencies = []
op520.outputs = [
    buf520: ExternKernelOut
    buf520.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf520.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op520.node.kernel = extern_kernels.mm


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 59047936}, None)]
op522.unmet_dependencies = 
    [   MemoryDep('buf520', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf520', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op522.met_dependencies = []
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (59047936, 1)
op522.sizes = ([115328, 512], [])
buf520_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf520_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf522_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op522_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf520', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf520', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf522', get_index_3, mul_1, None)
        return store
op522 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op523: ExternKernelSchedulerNode(ExternKernelOut)
op523.writes = [StarDep(name='buf523', mode=None)]
op523.unmet_dependencies = [StarDep(name='buf521', mode=None), StarDep(name='buf522', mode=None)]
op523.met_dependencies = []
op523.outputs = [
    buf523: ExternKernelOut
    buf523.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf523.users = [
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op523.node.kernel = extern_kernels.mm


op524_op526: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op524_op526.writes = 
    [   MemoryDep('buf524', c0, {c0: 115328}, None),
        MemoryDep('buf526', c0, {c0: 14761984}, None)]
op524_op526.unmet_dependencies = 
    [   MemoryDep('buf519', c0, {c0: 14761984}, None),
        MemoryDep('buf523', c0, {c0: 14761984}, None)]
op524_op526.met_dependencies = []
op524_op526.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf524.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf526.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
    ]
]
op524_op526.snodes[0] =
op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 115328}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf519', c0, {c0: 14761984}, None),
        MemoryDep('buf523', c0, {c0: 14761984}, None)]
op524.met_dependencies = []
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf524.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (115328, 128)
op524.sizes = ([115328], [128])
buf519_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf523_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op524_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf519', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf524', get_index_2, reduction)
        return store_reduction
op524 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op524_op526.snodes[1] =
op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 14761984}, None)]
op526.unmet_dependencies = 
    [   MemoryDep('buf519', c0, {c0: 14761984}, None),
        MemoryDep('buf523', c0, {c0: 14761984}, None),
        MemoryDep('buf524', c0, {c0: 115328}, None)]
op526.met_dependencies = []
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf526.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
    ]
]
op526.group.device = cuda:0
op526.group.iteration = (14761984, 1)
op526.sizes = ([115328, 128], [])
buf519_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf523_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf526_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op526_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf519', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf524', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf526', get_index_3, to_dtype_1, None)
        return store
op526 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op524_op526 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 49152}, None)]
op525.unmet_dependencies = []
op525.met_dependencies = [MemoryDep('primals_31', c0, {c0: 49152}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf525.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False),
    ]
]
op525.group.device = cuda:0
op525.group.iteration = (49152, 1)
op525.sizes = ([49152], [])
primals_31_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf525_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op525_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_31', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf525', get_index_1, to_dtype, None)
        return store
op525 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op527: ExternKernelSchedulerNode(ExternKernelOut)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf526', mode=None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: ExternKernelOut
    buf527.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op527.node.kernel = extern_kernels.mm


op528_op529: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op528_op529.writes = 
    [   MemoryDep('buf528', c0, {c0: 14761984}, None),
        MemoryDep('buf529', c0, {c0: 14761984}, None)]
op528_op529.unmet_dependencies = 
    [   MemoryDep('buf527', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf527', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op528_op529.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op528_op529.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528_op529.snodes[0] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 14761984}, None)]
op528.unmet_dependencies = 
    [   MemoryDep('buf527', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op528.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (14761984, 1)
op528.sizes = ([128, 901, 2, 64], [])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf528_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op528_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf528', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op528 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op528_op529.snodes[1] =
op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 14761984}, None)]
op529.unmet_dependencies = 
    [   MemoryDep('buf527', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf527', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op529.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (14761984, 1)
op529.sizes = ([128, 901, 2, 64], [])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf527_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf529_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op529_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf529', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf527', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op529 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op528_op529 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op530: ExternKernelSchedulerNode(FallbackKernel)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = 
    [   StarDep(name='buf527', mode=None),
        StarDep(name='buf528', mode=None),
        StarDep(name='buf529', mode=None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: FallbackKernel
    buf530.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf530.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
    ]
]
op530.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op531: ExternKernelSchedulerNode(MultiOutput)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf530', mode=None)]
op531.met_dependencies = []
op531.outputs = [
    buf531: MultiOutput
    buf531.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf531.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op531.node.kernel = None


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 16384}, None)]
op535.unmet_dependencies = []
op535.met_dependencies = [MemoryDep('primals_32', c0, {c0: 16384}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf535.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op811'), can_inplace=False, is_weak=False),
    ]
]
op535.group.device = cuda:0
op535.group.iteration = (16384, 1)
op535.sizes = ([16384], [])
primals_32_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf535_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op535_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_32', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf535', get_index_1, to_dtype, None)
        return store
op535 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf531', mode=None), StarDep(name='buf535', mode=None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.mm


op537_op539: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op537_op539.writes = 
    [   MemoryDep('buf537', c0, {c0: 115328}, None),
        MemoryDep('buf539', c0, {c0: 14761984}, None)]
op537_op539.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 14761984}, None),
        MemoryDep('buf536', c0, {c0: 14761984}, None)]
op537_op539.met_dependencies = []
op537_op539.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf537.users = [NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf539.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False),
    ]
]
op537_op539.snodes[0] =
op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 115328}, None)]
op537.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 14761984}, None),
        MemoryDep('buf536', c0, {c0: 14761984}, None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf537.users = [NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (115328, 128)
op537.sizes = ([115328], [128])
buf526_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf536_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op537_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf537', get_index_2, reduction)
        return store_reduction
op537 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op537_op539.snodes[1] =
op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 14761984}, None)]
op539.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 14761984}, None),
        MemoryDep('buf536', c0, {c0: 14761984}, None),
        MemoryDep('buf537', c0, {c0: 115328}, None)]
op539.met_dependencies = []
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf539.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False),
    ]
]
op539.group.device = cuda:0
op539.group.iteration = (14761984, 1)
op539.sizes = ([115328, 128], [])
buf526_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf536_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf539_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op539_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf536', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf537', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf539', get_index_3, to_dtype_1, None)
        return store
op539 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op537_op539 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 65536}, None)]
op541.unmet_dependencies = []
op541.met_dependencies = [MemoryDep('primals_34', c0, {c0: 65536}, None)]
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf541.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op816'), can_inplace=False, is_weak=False),
    ]
]
op541.group.device = cuda:0
op541.group.iteration = (65536, 1)
op541.sizes = ([65536], [])
primals_34_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf541_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op541_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_34', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf541', get_index_1, to_dtype, None)
        return store
op541 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 131072}, None)]
op538.unmet_dependencies = []
op538.met_dependencies = [MemoryDep('primals_33', c0, {c0: 131072}, None)]
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf538.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op814'), can_inplace=False, is_weak=False),
    ]
]
op538.group.device = cuda:0
op538.group.iteration = (131072, 1)
op538.sizes = ([131072], [])
primals_33_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf538_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op538_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_33', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf538', get_index_1, to_dtype, None)
        return store
op538 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op540: ExternKernelSchedulerNode(ExternKernelOut)
op540.writes = [StarDep(name='buf540', mode=None)]
op540.unmet_dependencies = [StarDep(name='buf538', mode=None), StarDep(name='buf539', mode=None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ExternKernelOut
    buf540.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf540.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op540.node.kernel = extern_kernels.mm


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 59047936}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf540', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf540', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf542.users = [NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (59047936, 1)
op542.sizes = ([115328, 512], [])
buf540_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf540_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf542_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op542_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf540', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf540', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf542', get_index_3, mul_1, None)
        return store
op542 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = [StarDep(name='buf541', mode=None), StarDep(name='buf542', mode=None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf543.users = [
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=True, is_weak=False),
    ]
]
op543.node.kernel = extern_kernels.mm


op544_op545: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op544_op545.writes = 
    [   MemoryDep('buf544', c0, {c0: 115328}, None),
        MemoryDep('buf545', c0, {c0: 14761984}, None)]
op544_op545.unmet_dependencies = 
    [   MemoryDep('buf464', c0, {c0: 14761984}, None),
        MemoryDep('buf539', c0, {c0: 14761984}, None),
        MemoryDep('buf543', c0, {c0: 14761984}, None)]
op544_op545.met_dependencies = []
op544_op545.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf544.users = [NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf545.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False),
    ]
]
op544_op545.snodes[0] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 115328}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf539', c0, {c0: 14761984}, None),
        MemoryDep('buf543', c0, {c0: 14761984}, None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf544.users = [NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (115328, 128)
op544.sizes = ([115328], [128])
buf539_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf543_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op544_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf544', get_index_2, reduction)
        return store_reduction
op544 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op544_op545.snodes[1] =
op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 14761984}, None)]
op545.unmet_dependencies = 
    [   MemoryDep('buf464', c0, {c0: 14761984}, None),
        MemoryDep('buf539', c0, {c0: 14761984}, None),
        MemoryDep('buf543', c0, {c0: 14761984}, None),
        MemoryDep('buf544', c0, {c0: 115328}, None)]
op545.met_dependencies = []
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf545.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False),
    ]
]
op545.group.device = cuda:0
op545.group.iteration = (14761984, 1)
op545.sizes = ([115328, 128], [])
buf539_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf543_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf464_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf545_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op545_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf544', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf464', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf545', get_index_4, add_2, None)
        return store
op545 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op544_op545 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp17, xmask)


op546: ExternKernelSchedulerNode(ExternKernelOut)
op546.writes = [StarDep(name='buf546', mode=None)]
op546.unmet_dependencies = [StarDep(name='buf465', mode=None), StarDep(name='buf545', mode=None)]
op546.met_dependencies = []
op546.outputs = [
    buf546: ExternKernelOut
    buf546.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf546.users = [
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
    ]
]
op546.node.kernel = extern_kernels.mm


op547_op548: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op547_op548.writes = 
    [   MemoryDep('buf547', c0, {c0: 14761984}, None),
        MemoryDep('buf548', c0, {c0: 14761984}, None)]
op547_op548.unmet_dependencies = 
    [   MemoryDep('buf546', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf546', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op547_op548.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op547_op548.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf547.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op547_op548.snodes[0] =
op547: SchedulerNode(ComputedBuffer)
op547.writes = [MemoryDep('buf547', c0, {c0: 14761984}, None)]
op547.unmet_dependencies = 
    [   MemoryDep('buf546', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op547.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op547.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf547.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op547.group.device = cuda:0
op547.group.iteration = (14761984, 1)
op547.sizes = ([128, 901, 2, 64], [])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf547_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op547_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf547', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op547 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op547_op548.snodes[1] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 14761984}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf546', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf546', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op548.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (14761984, 1)
op548.sizes = ([128, 901, 2, 64], [])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf546_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf548_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op548_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf548', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf546', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op548 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op547_op548 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op549: ExternKernelSchedulerNode(FallbackKernel)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = 
    [   StarDep(name='buf546', mode=None),
        StarDep(name='buf547', mode=None),
        StarDep(name='buf548', mode=None)]
op549.met_dependencies = []
op549.outputs = [
    buf549: FallbackKernel
    buf549.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf549.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False),
    ]
]
op549.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op550: ExternKernelSchedulerNode(MultiOutput)
op550.writes = [StarDep(name='buf550', mode=None)]
op550.unmet_dependencies = [StarDep(name='buf549', mode=None)]
op550.met_dependencies = []
op550.outputs = [
    buf550: MultiOutput
    buf550.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf550.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op550.node.kernel = None


op554: ExternKernelSchedulerNode(ExternKernelOut)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf475', mode=None), StarDep(name='buf550', mode=None)]
op554.met_dependencies = []
op554.outputs = [
    buf554: ExternKernelOut
    buf554.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf554.users = [
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False),
    ]
]
op554.node.kernel = extern_kernels.mm


op555_op556: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op555_op556.writes = 
    [   MemoryDep('buf555', c0, {c0: 115328}, None),
        MemoryDep('buf556', c0, {c0: 14761984}, None)]
op555_op556.unmet_dependencies = 
    [   MemoryDep('buf545', c0, {c0: 14761984}, None),
        MemoryDep('buf554', c0, {c0: 14761984}, None)]
op555_op556.met_dependencies = []
op555_op556.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=True, is_weak=False),
    ]
]
op555_op556.snodes[0] =
op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 115328}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf545', c0, {c0: 14761984}, None),
        MemoryDep('buf554', c0, {c0: 14761984}, None)]
op555.met_dependencies = []
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (115328, 128)
op555.sizes = ([115328], [128])
buf545_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf554_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op555_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf554', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf555', get_index_2, reduction)
        return store_reduction
op555 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op555_op556.snodes[1] =
op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 14761984}, None)]
op556.unmet_dependencies = 
    [   MemoryDep('buf545', c0, {c0: 14761984}, None),
        MemoryDep('buf554', c0, {c0: 14761984}, None),
        MemoryDep('buf555', c0, {c0: 115328}, None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=True, is_weak=False),
    ]
]
op556.group.device = cuda:0
op556.group.iteration = (14761984, 1)
op556.sizes = ([115328, 128], [])
buf545_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf554_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf556_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op556_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf554', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf555', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf556', get_index_3, to_dtype_1, None)
        return store
op556 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op555_op556 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf556', mode=None)]
op557.met_dependencies = []
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf557.users = [NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = extern_kernels.mm


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', c0, {c0: 59047936}, None)]
op558.unmet_dependencies = 
    [   MemoryDep('buf557', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf557', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op558.met_dependencies = []
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (59047936, 1)
op558.sizes = ([115328, 512], [])
buf557_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf557_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf558_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op558_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf557', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf557', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf558', get_index_3, mul_1, None)
        return store
op558 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op559: ExternKernelSchedulerNode(ExternKernelOut)
op559.writes = [StarDep(name='buf559', mode=None)]
op559.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf558', mode=None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ExternKernelOut
    buf559.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=True, is_weak=False),
    ]
]
op559.node.kernel = extern_kernels.mm


op560_op561: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op560_op561.writes = 
    [   MemoryDep('buf560', c0, {c0: 115328}, None),
        MemoryDep('buf561', c0, {c0: 14761984}, None)]
op560_op561.unmet_dependencies = 
    [   MemoryDep('buf556', c0, {c0: 14761984}, None),
        MemoryDep('buf559', c0, {c0: 14761984}, None)]
op560_op561.met_dependencies = []
op560_op561.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf560.users = [NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf561.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False),
    ]
]
op560_op561.snodes[0] =
op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 115328}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf556', c0, {c0: 14761984}, None),
        MemoryDep('buf559', c0, {c0: 14761984}, None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf560.users = [NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (115328, 128)
op560.sizes = ([115328], [128])
buf556_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf559_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op560_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf559', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf560', get_index_2, reduction)
        return store_reduction
op560 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op560_op561.snodes[1] =
op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 14761984}, None)]
op561.unmet_dependencies = 
    [   MemoryDep('buf556', c0, {c0: 14761984}, None),
        MemoryDep('buf559', c0, {c0: 14761984}, None),
        MemoryDep('buf560', c0, {c0: 115328}, None)]
op561.met_dependencies = []
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf561.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False),
    ]
]
op561.group.device = cuda:0
op561.group.iteration = (14761984, 1)
op561.sizes = ([115328, 128], [])
buf556_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf559_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf561_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op561_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf559', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf560', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf561', get_index_3, to_dtype_1, None)
        return store
op561 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op560_op561 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op562: ExternKernelSchedulerNode(ExternKernelOut)
op562.writes = [StarDep(name='buf562', mode=None)]
op562.unmet_dependencies = [StarDep(name='buf485', mode=None), StarDep(name='buf561', mode=None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ExternKernelOut
    buf562.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf562.users = [
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False),
    ]
]
op562.node.kernel = extern_kernels.mm


op563_op564: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op563_op564.writes = 
    [   MemoryDep('buf563', c0, {c0: 14761984}, None),
        MemoryDep('buf564', c0, {c0: 14761984}, None)]
op563_op564.unmet_dependencies = 
    [   MemoryDep('buf562', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf562', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op563_op564.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op563_op564.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563_op564.snodes[0] =
op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 14761984}, None)]
op563.unmet_dependencies = 
    [   MemoryDep('buf562', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op563.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op563.group.device = cuda:0
op563.group.iteration = (14761984, 1)
op563.sizes = ([128, 901, 2, 64], [])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf563_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op563_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf563', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op563 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op563_op564.snodes[1] =
op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 14761984}, None)]
op564.unmet_dependencies = 
    [   MemoryDep('buf562', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf562', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op564.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (14761984, 1)
op564.sizes = ([128, 901, 2, 64], [])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf562_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf564_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op564_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf564', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf562', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op564 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op563_op564 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op565: ExternKernelSchedulerNode(FallbackKernel)
op565.writes = [StarDep(name='buf565', mode=None)]
op565.unmet_dependencies = 
    [   StarDep(name='buf562', mode=None),
        StarDep(name='buf563', mode=None),
        StarDep(name='buf564', mode=None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: FallbackKernel
    buf565.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf565.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False),
    ]
]
op565.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op566: ExternKernelSchedulerNode(MultiOutput)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf565', mode=None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: MultiOutput
    buf566.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf566.users = [NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op566.node.kernel = None


op570: ExternKernelSchedulerNode(ExternKernelOut)
op570.writes = [StarDep(name='buf570', mode=None)]
op570.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf566', mode=None)]
op570.met_dependencies = []
op570.outputs = [
    buf570: ExternKernelOut
    buf570.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf570.users = [
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False),
    ]
]
op570.node.kernel = extern_kernels.mm


op571_op572: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op571_op572.writes = 
    [   MemoryDep('buf571', c0, {c0: 115328}, None),
        MemoryDep('buf572', c0, {c0: 14761984}, None)]
op571_op572.unmet_dependencies = 
    [   MemoryDep('buf561', c0, {c0: 14761984}, None),
        MemoryDep('buf570', c0, {c0: 14761984}, None)]
op571_op572.met_dependencies = []
op571_op572.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf571.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf572.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op571_op572.snodes[0] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 115328}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf561', c0, {c0: 14761984}, None),
        MemoryDep('buf570', c0, {c0: 14761984}, None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf571.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (115328, 128)
op571.sizes = ([115328], [128])
buf561_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf570_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op571_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf570', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf571', get_index_2, reduction)
        return store_reduction
op571 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op571_op572.snodes[1] =
op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 14761984}, None)]
op572.unmet_dependencies = 
    [   MemoryDep('buf561', c0, {c0: 14761984}, None),
        MemoryDep('buf570', c0, {c0: 14761984}, None),
        MemoryDep('buf571', c0, {c0: 115328}, None)]
op572.met_dependencies = []
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf572.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op572.group.device = cuda:0
op572.group.iteration = (14761984, 1)
op572.sizes = ([115328, 128], [])
buf561_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf570_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf572_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op572_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf570', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf571', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf572', get_index_3, to_dtype_1, None)
        return store
op572 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op571_op572 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op573: ExternKernelSchedulerNode(ExternKernelOut)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf498', mode=None), StarDep(name='buf572', mode=None)]
op573.met_dependencies = []
op573.outputs = [
    buf573: ExternKernelOut
    buf573.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf573.users = [NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op573.node.kernel = extern_kernels.mm


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 59047936}, None)]
op574.unmet_dependencies = 
    [   MemoryDep('buf573', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf573', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op574.met_dependencies = []
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (59047936, 1)
op574.sizes = ([115328, 512], [])
buf573_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf573_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf574_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op574_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf573', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf573', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf574', get_index_3, mul_1, None)
        return store
op574 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op575: ExternKernelSchedulerNode(ExternKernelOut)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf501', mode=None), StarDep(name='buf574', mode=None)]
op575.met_dependencies = []
op575.outputs = [
    buf575: ExternKernelOut
    buf575.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf575.users = [
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op575.node.kernel = extern_kernels.mm


op576_op577: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op576_op577.writes = 
    [   MemoryDep('buf576', c0, {c0: 115328}, None),
        MemoryDep('buf577', c0, {c0: 14761984}, None)]
op576_op577.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 14761984}, None),
        MemoryDep('buf575', c0, {c0: 14761984}, None)]
op576_op577.met_dependencies = []
op576_op577.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op576_op577.snodes[0] =
op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 115328}, None)]
op576.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 14761984}, None),
        MemoryDep('buf575', c0, {c0: 14761984}, None)]
op576.met_dependencies = []
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (115328, 128)
op576.sizes = ([115328], [128])
buf572_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf575_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op576_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf572', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf575', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf576', get_index_2, reduction)
        return store_reduction
op576 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op576_op577.snodes[1] =
op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 14761984}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf572', c0, {c0: 14761984}, None),
        MemoryDep('buf575', c0, {c0: 14761984}, None),
        MemoryDep('buf576', c0, {c0: 115328}, None)]
op577.met_dependencies = []
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (14761984, 1)
op577.sizes = ([115328, 128], [])
buf572_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf575_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf577_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op577_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf572', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf575', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf576', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf577', get_index_3, to_dtype_1, None)
        return store
op577 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op576_op577 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf505', mode=None), StarDep(name='buf577', mode=None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf578.users = [
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False),
    ]
]
op578.node.kernel = extern_kernels.mm


op579_op580: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op579_op580.writes = 
    [   MemoryDep('buf579', c0, {c0: 14761984}, None),
        MemoryDep('buf580', c0, {c0: 14761984}, None)]
op579_op580.unmet_dependencies = 
    [   MemoryDep('buf578', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf578', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op579_op580.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op579_op580.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op579_op580.snodes[0] =
op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 14761984}, None)]
op579.unmet_dependencies = 
    [   MemoryDep('buf578', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op579.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (14761984, 1)
op579.sizes = ([128, 901, 2, 64], [])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf579_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op579_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf579', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op579 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op579_op580.snodes[1] =
op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 14761984}, None)]
op580.unmet_dependencies = 
    [   MemoryDep('buf578', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf578', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op580.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (14761984, 1)
op580.sizes = ([128, 901, 2, 64], [])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf578_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf580_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op580_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf580', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op580 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op579_op580 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op581: ExternKernelSchedulerNode(FallbackKernel)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = 
    [   StarDep(name='buf578', mode=None),
        StarDep(name='buf579', mode=None),
        StarDep(name='buf580', mode=None)]
op581.met_dependencies = []
op581.outputs = [
    buf581: FallbackKernel
    buf581.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf581.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False),
    ]
]
op581.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op582: ExternKernelSchedulerNode(MultiOutput)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf581', mode=None)]
op582.met_dependencies = []
op582.outputs = [
    buf582: MultiOutput
    buf582.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op582.node.kernel = None


op586: ExternKernelSchedulerNode(ExternKernelOut)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf515', mode=None), StarDep(name='buf582', mode=None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ExternKernelOut
    buf586.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf586.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op586.node.kernel = extern_kernels.mm


op587_op588: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op587_op588.writes = 
    [   MemoryDep('buf587', c0, {c0: 115328}, None),
        MemoryDep('buf588', c0, {c0: 14761984}, None)]
op587_op588.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 14761984}, None),
        MemoryDep('buf586', c0, {c0: 14761984}, None)]
op587_op588.met_dependencies = []
op587_op588.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf588.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False),
    ]
]
op587_op588.snodes[0] =
op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 115328}, None)]
op587.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 14761984}, None),
        MemoryDep('buf586', c0, {c0: 14761984}, None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (115328, 128)
op587.sizes = ([115328], [128])
buf577_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf586_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op587_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf586', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf587', get_index_2, reduction)
        return store_reduction
op587 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op587_op588.snodes[1] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 14761984}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 14761984}, None),
        MemoryDep('buf586', c0, {c0: 14761984}, None),
        MemoryDep('buf587', c0, {c0: 115328}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf588.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False),
    ]
]
op588.group.device = cuda:0
op588.group.iteration = (14761984, 1)
op588.sizes = ([115328, 128], [])
buf577_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf586_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf588_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op588_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf577', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf586', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf587', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf588', get_index_3, to_dtype_1, None)
        return store
op588 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op587_op588 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op589: ExternKernelSchedulerNode(ExternKernelOut)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf588', mode=None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ExternKernelOut
    buf589.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.node.kernel = extern_kernels.mm


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 59047936}, None)]
op590.unmet_dependencies = 
    [   MemoryDep('buf589', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf589', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (59047936, 1)
op590.sizes = ([115328, 512], [])
buf589_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf589_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf590_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op590_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf589', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf589', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf590', get_index_3, mul_1, None)
        return store
op590 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op591: ExternKernelSchedulerNode(ExternKernelOut)
op591.writes = [StarDep(name='buf591', mode=None)]
op591.unmet_dependencies = [StarDep(name='buf521', mode=None), StarDep(name='buf590', mode=None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ExternKernelOut
    buf591.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf591.users = [
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False),
    ]
]
op591.node.kernel = extern_kernels.mm


op592_op593: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op592_op593.writes = 
    [   MemoryDep('buf592', c0, {c0: 115328}, None),
        MemoryDep('buf593', c0, {c0: 14761984}, None)]
op592_op593.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 14761984}, None),
        MemoryDep('buf591', c0, {c0: 14761984}, None)]
op592_op593.met_dependencies = []
op592_op593.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf592.users = [NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf593.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=True, is_weak=False),
    ]
]
op592_op593.snodes[0] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 115328}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 14761984}, None),
        MemoryDep('buf591', c0, {c0: 14761984}, None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf592.users = [NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (115328, 128)
op592.sizes = ([115328], [128])
buf588_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf591_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op592_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf592', get_index_2, reduction)
        return store_reduction
op592 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op592_op593.snodes[1] =
op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 14761984}, None)]
op593.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 14761984}, None),
        MemoryDep('buf591', c0, {c0: 14761984}, None),
        MemoryDep('buf592', c0, {c0: 115328}, None)]
op593.met_dependencies = []
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf593.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=True, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (14761984, 1)
op593.sizes = ([115328, 128], [])
buf588_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf591_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf593_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op593_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf591', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf592', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf593', get_index_3, to_dtype_1, None)
        return store
op593 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op592_op593 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op594: ExternKernelSchedulerNode(ExternKernelOut)
op594.writes = [StarDep(name='buf594', mode=None)]
op594.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf593', mode=None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ExternKernelOut
    buf594.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf594.users = [
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
    ]
]
op594.node.kernel = extern_kernels.mm


op595_op596: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op595_op596.writes = 
    [   MemoryDep('buf595', c0, {c0: 14761984}, None),
        MemoryDep('buf596', c0, {c0: 14761984}, None)]
op595_op596.unmet_dependencies = 
    [   MemoryDep('buf594', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf594', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op595_op596.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op595_op596.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf595.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op595_op596.snodes[0] =
op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 14761984}, None)]
op595.unmet_dependencies = 
    [   MemoryDep('buf594', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op595.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf595.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op595.group.device = cuda:0
op595.group.iteration = (14761984, 1)
op595.sizes = ([128, 901, 2, 64], [])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf595_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op595_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf595', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op595 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op595_op596.snodes[1] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 14761984}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf594', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf594', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op596.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (14761984, 1)
op596.sizes = ([128, 901, 2, 64], [])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf594_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf596_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op596_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf596', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf594', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op596 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op595_op596 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op597: ExternKernelSchedulerNode(FallbackKernel)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = 
    [   StarDep(name='buf594', mode=None),
        StarDep(name='buf595', mode=None),
        StarDep(name='buf596', mode=None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: FallbackKernel
    buf597.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf597.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False),
    ]
]
op597.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op598: ExternKernelSchedulerNode(MultiOutput)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf597', mode=None)]
op598.met_dependencies = []
op598.outputs = [
    buf598: MultiOutput
    buf598.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op598.node.kernel = None


op602: ExternKernelSchedulerNode(ExternKernelOut)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf535', mode=None), StarDep(name='buf598', mode=None)]
op602.met_dependencies = []
op602.outputs = [
    buf602: ExternKernelOut
    buf602.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf602.users = [
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=True, is_weak=False),
    ]
]
op602.node.kernel = extern_kernels.mm


op603_op604: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op603_op604.writes = 
    [   MemoryDep('buf603', c0, {c0: 115328}, None),
        MemoryDep('buf604', c0, {c0: 14761984}, None)]
op603_op604.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 14761984}, None),
        MemoryDep('buf602', c0, {c0: 14761984}, None)]
op603_op604.met_dependencies = []
op603_op604.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf603.users = [NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False)]
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf604.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
    ]
]
op603_op604.snodes[0] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 115328}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 14761984}, None),
        MemoryDep('buf602', c0, {c0: 14761984}, None)]
op603.met_dependencies = []
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf603.users = [NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (115328, 128)
op603.sizes = ([115328], [128])
buf593_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf602_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op603_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf602', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf603', get_index_2, reduction)
        return store_reduction
op603 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op603_op604.snodes[1] =
op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 14761984}, None)]
op604.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 14761984}, None),
        MemoryDep('buf602', c0, {c0: 14761984}, None),
        MemoryDep('buf603', c0, {c0: 115328}, None)]
op604.met_dependencies = []
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf604.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
    ]
]
op604.group.device = cuda:0
op604.group.iteration = (14761984, 1)
op604.sizes = ([115328, 128], [])
buf593_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf602_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf604_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op604_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf602', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf603', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf604', get_index_3, to_dtype_1, None)
        return store
op604 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op603_op604 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op605: ExternKernelSchedulerNode(ExternKernelOut)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf538', mode=None), StarDep(name='buf604', mode=None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ExternKernelOut
    buf605.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf605.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op605.node.kernel = extern_kernels.mm


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 59047936}, None)]
op606.unmet_dependencies = 
    [   MemoryDep('buf605', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf605', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (59047936, 1)
op606.sizes = ([115328, 512], [])
buf605_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf605_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf606_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op606_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf605', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf605', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf606', get_index_3, mul_1, None)
        return store
op606 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf541', mode=None), StarDep(name='buf606', mode=None)]
op607.met_dependencies = []
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
    ]
]
op607.node.kernel = extern_kernels.mm


op608_op610: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op608_op610.writes = 
    [   MemoryDep('buf608', c0, {c0: 115328}, None),
        MemoryDep('buf610', c0, {c0: 14761984}, None)]
op608_op610.unmet_dependencies = 
    [   MemoryDep('buf454', c0, {c0: 14761984}, None),
        MemoryDep('buf604', c0, {c0: 14761984}, None),
        MemoryDep('buf607', c0, {c0: 14761984}, None)]
op608_op610.met_dependencies = []
op608_op610.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf608.users = [
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False),
    ]
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf610.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
    ]
]
op608_op610.snodes[0] =
op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 115328}, None)]
op608.unmet_dependencies = 
    [   MemoryDep('buf604', c0, {c0: 14761984}, None),
        MemoryDep('buf607', c0, {c0: 14761984}, None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf608.users = [
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False),
    ]
]
op608.group.device = cuda:0
op608.group.iteration = (115328, 128)
op608.sizes = ([115328], [128])
buf604_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf607_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op608_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf607', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf608', get_index_2, reduction)
        return store_reduction
op608 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op608_op610.snodes[1] =
op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 14761984}, None)]
op610.unmet_dependencies = 
    [   MemoryDep('buf454', c0, {c0: 14761984}, None),
        MemoryDep('buf604', c0, {c0: 14761984}, None),
        MemoryDep('buf607', c0, {c0: 14761984}, None),
        MemoryDep('buf608', c0, {c0: 115328}, None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf610.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
    ]
]
op610.group.device = cuda:0
op610.group.iteration = (14761984, 1)
op610.sizes = ([115328, 128], [])
buf454_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf604_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf607_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf610_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op610_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf604', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf607', get_index_2)
        add = ops.add(load_1, load_2)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf608', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        add_2 = ops.add(load, to_dtype_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf610', get_index_4, add_2, None)
        return store
op610 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*fp32', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp2 = tl.load(in_ptr2 + (x2), None).to(tl.float32)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = 128.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-05
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp0 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op608_op610 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*fp32', 4: '*bf16', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp9 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp10 = 128.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-05
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp3 * tmp14
        tmp16 = tmp15.to(tl.float32)
        tmp17 = tmp9 + tmp16
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp17, xmask)
        tl.store(out_ptr0 + (x0), tmp8, xmask)


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 49152}, None)]
op609.unmet_dependencies = []
op609.met_dependencies = [MemoryDep('primals_35', c0, {c0: 49152}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf609.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False),
    ]
]
op609.group.device = cuda:0
op609.group.iteration = (49152, 1)
op609.sizes = ([49152], [])
primals_35_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf609_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op609_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_35', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf609', get_index_1, to_dtype, None)
        return store
op609 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op611: ExternKernelSchedulerNode(ExternKernelOut)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf609', mode=None), StarDep(name='buf610', mode=None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ExternKernelOut
    buf611.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op611.node.kernel = extern_kernels.mm


op612_op613: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op612_op613.writes = 
    [   MemoryDep('buf612', c0, {c0: 14761984}, None),
        MemoryDep('buf613', c0, {c0: 14761984}, None)]
op612_op613.unmet_dependencies = 
    [   MemoryDep('buf611', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf611', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op612_op613.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op612_op613.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf612.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612_op613.snodes[0] =
op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 14761984}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf611', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op612.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf612.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (14761984, 1)
op612.sizes = ([128, 901, 2, 64], [])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf612_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op612_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf612', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op612 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op612_op613.snodes[1] =
op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 14761984}, None)]
op613.unmet_dependencies = 
    [   MemoryDep('buf611', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf611', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op613.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (14761984, 1)
op613.sizes = ([128, 901, 2, 64], [])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf611_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf613_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op613_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf613', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf611', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op613 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op612_op613 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op614: ExternKernelSchedulerNode(FallbackKernel)
op614.writes = [StarDep(name='buf614', mode=None)]
op614.unmet_dependencies = 
    [   StarDep(name='buf611', mode=None),
        StarDep(name='buf612', mode=None),
        StarDep(name='buf613', mode=None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: FallbackKernel
    buf614.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf614.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False),
    ]
]
op614.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op615: ExternKernelSchedulerNode(MultiOutput)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf614', mode=None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: MultiOutput
    buf615.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False)]
]
op615.node.kernel = None


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 16384}, None)]
op619.unmet_dependencies = []
op619.met_dependencies = [MemoryDep('primals_36', c0, {c0: 16384}, None)]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf619.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op827'), can_inplace=False, is_weak=False),
    ]
]
op619.group.device = cuda:0
op619.group.iteration = (16384, 1)
op619.sizes = ([16384], [])
primals_36_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf619_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op619_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_36', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf619', get_index_1, to_dtype, None)
        return store
op619 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op620: ExternKernelSchedulerNode(ExternKernelOut)
op620.writes = [StarDep(name='buf620', mode=None)]
op620.unmet_dependencies = [StarDep(name='buf615', mode=None), StarDep(name='buf619', mode=None)]
op620.met_dependencies = []
op620.outputs = [
    buf620: ExternKernelOut
    buf620.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf620.users = [
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
    ]
]
op620.node.kernel = extern_kernels.mm


op621_op623: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op621_op623.writes = 
    [   MemoryDep('buf621', c0, {c0: 115328}, None),
        MemoryDep('buf623', c0, {c0: 14761984}, None)]
op621_op623.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 14761984}, None),
        MemoryDep('buf620', c0, {c0: 14761984}, None)]
op621_op623.met_dependencies = []
op621_op623.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf623.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=True, is_weak=False),
    ]
]
op621_op623.snodes[0] =
op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 115328}, None)]
op621.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 14761984}, None),
        MemoryDep('buf620', c0, {c0: 14761984}, None)]
op621.met_dependencies = []
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (115328, 128)
op621.sizes = ([115328], [128])
buf610_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf620_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op621_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf620', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf621', get_index_2, reduction)
        return store_reduction
op621 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op621_op623.snodes[1] =
op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 14761984}, None)]
op623.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 14761984}, None),
        MemoryDep('buf620', c0, {c0: 14761984}, None),
        MemoryDep('buf621', c0, {c0: 115328}, None)]
op623.met_dependencies = []
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf623.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=True, is_weak=False),
    ]
]
op623.group.device = cuda:0
op623.group.iteration = (14761984, 1)
op623.sizes = ([115328, 128], [])
buf610_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf620_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf623_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op623_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf620', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf621', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf623', get_index_3, to_dtype_1, None)
        return store
op623 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op621_op623 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 65536}, None)]
op625.unmet_dependencies = []
op625.met_dependencies = [MemoryDep('primals_38', c0, {c0: 65536}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf625.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False),
    ]
]
op625.group.device = cuda:0
op625.group.iteration = (65536, 1)
op625.sizes = ([65536], [])
primals_38_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf625_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op625_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_38', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf625', get_index_1, to_dtype, None)
        return store
op625 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 131072}, None)]
op622.unmet_dependencies = []
op622.met_dependencies = [MemoryDep('primals_37', c0, {c0: 131072}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf622.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
    ]
]
op622.group.device = cuda:0
op622.group.iteration = (131072, 1)
op622.sizes = ([131072], [])
primals_37_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf622_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op622_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_37', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf622', get_index_1, to_dtype, None)
        return store
op622 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf622', mode=None), StarDep(name='buf623', mode=None)]
op624.met_dependencies = []
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf624.users = [NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op624.node.kernel = extern_kernels.mm


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 59047936}, None)]
op626.unmet_dependencies = 
    [   MemoryDep('buf624', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf624', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op626.met_dependencies = []
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (59047936, 1)
op626.sizes = ([115328, 512], [])
buf624_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf624_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf626_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op626_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf624', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf624', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf626', get_index_3, mul_1, None)
        return store
op626 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op627: ExternKernelSchedulerNode(ExternKernelOut)
op627.writes = [StarDep(name='buf627', mode=None)]
op627.unmet_dependencies = [StarDep(name='buf625', mode=None), StarDep(name='buf626', mode=None)]
op627.met_dependencies = []
op627.outputs = [
    buf627: ExternKernelOut
    buf627.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=True, is_weak=False),
    ]
]
op627.node.kernel = extern_kernels.mm


op628_op630: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op628_op630.writes = 
    [   MemoryDep('buf628', c0, {c0: 115328}, None),
        MemoryDep('buf630', c0, {c0: 14761984}, None)]
op628_op630.unmet_dependencies = 
    [   MemoryDep('buf623', c0, {c0: 14761984}, None),
        MemoryDep('buf627', c0, {c0: 14761984}, None)]
op628_op630.met_dependencies = []
op628_op630.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf628.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf630.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
    ]
]
op628_op630.snodes[0] =
op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 115328}, None)]
op628.unmet_dependencies = 
    [   MemoryDep('buf623', c0, {c0: 14761984}, None),
        MemoryDep('buf627', c0, {c0: 14761984}, None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf628.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (115328, 128)
op628.sizes = ([115328], [128])
buf623_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf627_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op628_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf627', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf628', get_index_2, reduction)
        return store_reduction
op628 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op628_op630.snodes[1] =
op630: SchedulerNode(ComputedBuffer)
op630.writes = [MemoryDep('buf630', c0, {c0: 14761984}, None)]
op630.unmet_dependencies = 
    [   MemoryDep('buf623', c0, {c0: 14761984}, None),
        MemoryDep('buf627', c0, {c0: 14761984}, None),
        MemoryDep('buf628', c0, {c0: 115328}, None)]
op630.met_dependencies = []
op630.outputs = [
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf630.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
    ]
]
op630.group.device = cuda:0
op630.group.iteration = (14761984, 1)
op630.sizes = ([115328, 128], [])
buf623_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf627_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf630_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op630_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf627', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf628', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf630', get_index_3, to_dtype_1, None)
        return store
op630 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op628_op630 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 49152}, None)]
op629.unmet_dependencies = []
op629.met_dependencies = [MemoryDep('primals_39', c0, {c0: 49152}, None)]
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf629.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False),
    ]
]
op629.group.device = cuda:0
op629.group.iteration = (49152, 1)
op629.sizes = ([49152], [])
primals_39_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf629_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op629_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_39', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf629', get_index_1, to_dtype, None)
        return store
op629 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op631: ExternKernelSchedulerNode(ExternKernelOut)
op631.writes = [StarDep(name='buf631', mode=None)]
op631.unmet_dependencies = [StarDep(name='buf629', mode=None), StarDep(name='buf630', mode=None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: ExternKernelOut
    buf631.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf631.users = [
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False),
    ]
]
op631.node.kernel = extern_kernels.mm


op632_op633: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op632_op633.writes = 
    [   MemoryDep('buf632', c0, {c0: 14761984}, None),
        MemoryDep('buf633', c0, {c0: 14761984}, None)]
op632_op633.unmet_dependencies = 
    [   MemoryDep('buf631', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf631', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op632_op633.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op632_op633.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf633.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op632_op633.snodes[0] =
op632: SchedulerNode(ComputedBuffer)
op632.writes = [MemoryDep('buf632', c0, {c0: 14761984}, None)]
op632.unmet_dependencies = 
    [   MemoryDep('buf631', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op632.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op632.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op632.group.device = cuda:0
op632.group.iteration = (14761984, 1)
op632.sizes = ([128, 901, 2, 64], [])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf632_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op632_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf632', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op632 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op632_op633.snodes[1] =
op633: SchedulerNode(ComputedBuffer)
op633.writes = [MemoryDep('buf633', c0, {c0: 14761984}, None)]
op633.unmet_dependencies = 
    [   MemoryDep('buf631', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf631', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op633.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op633.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf633.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op633.group.device = cuda:0
op633.group.iteration = (14761984, 1)
op633.sizes = ([128, 901, 2, 64], [])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf631_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf633_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op633_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf633', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf631', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op633 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op632_op633 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op634: ExternKernelSchedulerNode(FallbackKernel)
op634.writes = [StarDep(name='buf634', mode=None)]
op634.unmet_dependencies = 
    [   StarDep(name='buf631', mode=None),
        StarDep(name='buf632', mode=None),
        StarDep(name='buf633', mode=None)]
op634.met_dependencies = []
op634.outputs = [
    buf634: FallbackKernel
    buf634.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf634.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False),
    ]
]
op634.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op635: ExternKernelSchedulerNode(MultiOutput)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf634', mode=None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: MultiOutput
    buf635.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf635.users = [NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = None


op639: SchedulerNode(ComputedBuffer)
op639.writes = [MemoryDep('buf639', c0, {c0: 16384}, None)]
op639.unmet_dependencies = []
op639.met_dependencies = [MemoryDep('primals_40', c0, {c0: 16384}, None)]
op639.outputs = [
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf639.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op843'), can_inplace=False, is_weak=False),
    ]
]
op639.group.device = cuda:0
op639.group.iteration = (16384, 1)
op639.sizes = ([16384], [])
primals_40_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf639_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op639_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_40', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf639', get_index_1, to_dtype, None)
        return store
op639 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op640: ExternKernelSchedulerNode(ExternKernelOut)
op640.writes = [StarDep(name='buf640', mode=None)]
op640.unmet_dependencies = [StarDep(name='buf635', mode=None), StarDep(name='buf639', mode=None)]
op640.met_dependencies = []
op640.outputs = [
    buf640: ExternKernelOut
    buf640.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf640.users = [
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
    ]
]
op640.node.kernel = extern_kernels.mm


op641_op643: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op641_op643.writes = 
    [   MemoryDep('buf641', c0, {c0: 115328}, None),
        MemoryDep('buf643', c0, {c0: 14761984}, None)]
op641_op643.unmet_dependencies = 
    [   MemoryDep('buf630', c0, {c0: 14761984}, None),
        MemoryDep('buf640', c0, {c0: 14761984}, None)]
op641_op643.met_dependencies = []
op641_op643.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf641.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf643.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False),
    ]
]
op641_op643.snodes[0] =
op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 115328}, None)]
op641.unmet_dependencies = 
    [   MemoryDep('buf630', c0, {c0: 14761984}, None),
        MemoryDep('buf640', c0, {c0: 14761984}, None)]
op641.met_dependencies = []
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf641.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (115328, 128)
op641.sizes = ([115328], [128])
buf630_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf640_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op641_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf640', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf641', get_index_2, reduction)
        return store_reduction
op641 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op641_op643.snodes[1] =
op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 14761984}, None)]
op643.unmet_dependencies = 
    [   MemoryDep('buf630', c0, {c0: 14761984}, None),
        MemoryDep('buf640', c0, {c0: 14761984}, None),
        MemoryDep('buf641', c0, {c0: 115328}, None)]
op643.met_dependencies = []
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf643.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False),
    ]
]
op643.group.device = cuda:0
op643.group.iteration = (14761984, 1)
op643.sizes = ([115328, 128], [])
buf630_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf640_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf643_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op643_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf640', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf641', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf643', get_index_3, to_dtype_1, None)
        return store
op643 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op641_op643 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 65536}, None)]
op645.unmet_dependencies = []
op645.met_dependencies = [MemoryDep('primals_42', c0, {c0: 65536}, None)]
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf645.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op848'), can_inplace=False, is_weak=False),
    ]
]
op645.group.device = cuda:0
op645.group.iteration = (65536, 1)
op645.sizes = ([65536], [])
primals_42_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf645_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op645_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_42', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf645', get_index_1, to_dtype, None)
        return store
op645 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 131072}, None)]
op642.unmet_dependencies = []
op642.met_dependencies = [MemoryDep('primals_41', c0, {c0: 131072}, None)]
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf642.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op846'), can_inplace=False, is_weak=False),
    ]
]
op642.group.device = cuda:0
op642.group.iteration = (131072, 1)
op642.sizes = ([131072], [])
primals_41_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf642_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op642_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_41', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf642', get_index_1, to_dtype, None)
        return store
op642 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op644: ExternKernelSchedulerNode(ExternKernelOut)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf642', mode=None), StarDep(name='buf643', mode=None)]
op644.met_dependencies = []
op644.outputs = [
    buf644: ExternKernelOut
    buf644.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf644.users = [NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False)]
]
op644.node.kernel = extern_kernels.mm


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 59047936}, None)]
op646.unmet_dependencies = 
    [   MemoryDep('buf644', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf644', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op646.met_dependencies = []
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf646.users = [NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (59047936, 1)
op646.sizes = ([115328, 512], [])
buf644_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf644_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf646_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op646_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf644', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf644', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf646', get_index_3, mul_1, None)
        return store
op646 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op647: ExternKernelSchedulerNode(ExternKernelOut)
op647.writes = [StarDep(name='buf647', mode=None)]
op647.unmet_dependencies = [StarDep(name='buf645', mode=None), StarDep(name='buf646', mode=None)]
op647.met_dependencies = []
op647.outputs = [
    buf647: ExternKernelOut
    buf647.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf647.users = [
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=True, is_weak=False),
    ]
]
op647.node.kernel = extern_kernels.mm


op648_op650: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op648_op650.writes = 
    [   MemoryDep('buf648', c0, {c0: 115328}, None),
        MemoryDep('buf650', c0, {c0: 14761984}, None)]
op648_op650.unmet_dependencies = 
    [   MemoryDep('buf643', c0, {c0: 14761984}, None),
        MemoryDep('buf647', c0, {c0: 14761984}, None)]
op648_op650.met_dependencies = []
op648_op650.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf648.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf650.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=True, is_weak=False),
    ]
]
op648_op650.snodes[0] =
op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 115328}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf643', c0, {c0: 14761984}, None),
        MemoryDep('buf647', c0, {c0: 14761984}, None)]
op648.met_dependencies = []
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf648.users = [NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op648.group.device = cuda:0
op648.group.iteration = (115328, 128)
op648.sizes = ([115328], [128])
buf643_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf647_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op648_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf643', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf648', get_index_2, reduction)
        return store_reduction
op648 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op648_op650.snodes[1] =
op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', c0, {c0: 14761984}, None)]
op650.unmet_dependencies = 
    [   MemoryDep('buf643', c0, {c0: 14761984}, None),
        MemoryDep('buf647', c0, {c0: 14761984}, None),
        MemoryDep('buf648', c0, {c0: 115328}, None)]
op650.met_dependencies = []
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf650.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=True, is_weak=False),
    ]
]
op650.group.device = cuda:0
op650.group.iteration = (14761984, 1)
op650.sizes = ([115328, 128], [])
buf643_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf647_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf650_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op650_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf643', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf648', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf650', get_index_3, to_dtype_1, None)
        return store
op650 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op648_op650 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 49152}, None)]
op649.unmet_dependencies = []
op649.met_dependencies = [MemoryDep('primals_43', c0, {c0: 49152}, None)]
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf649.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op851'), can_inplace=False, is_weak=False),
    ]
]
op649.group.device = cuda:0
op649.group.iteration = (49152, 1)
op649.sizes = ([49152], [])
primals_43_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf649_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op649_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_43', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf649', get_index_1, to_dtype, None)
        return store
op649 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op651: ExternKernelSchedulerNode(ExternKernelOut)
op651.writes = [StarDep(name='buf651', mode=None)]
op651.unmet_dependencies = [StarDep(name='buf649', mode=None), StarDep(name='buf650', mode=None)]
op651.met_dependencies = []
op651.outputs = [
    buf651: ExternKernelOut
    buf651.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf651.users = [
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False),
    ]
]
op651.node.kernel = extern_kernels.mm


op652_op653: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op652_op653.writes = 
    [   MemoryDep('buf652', c0, {c0: 14761984}, None),
        MemoryDep('buf653', c0, {c0: 14761984}, None)]
op652_op653.unmet_dependencies = 
    [   MemoryDep('buf651', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf651', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op652_op653.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op652_op653.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf652.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf653.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op652_op653.snodes[0] =
op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 14761984}, None)]
op652.unmet_dependencies = 
    [   MemoryDep('buf651', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op652.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf652.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (14761984, 1)
op652.sizes = ([128, 901, 2, 64], [])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf652_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op652_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf652', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op652 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op652_op653.snodes[1] =
op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 14761984}, None)]
op653.unmet_dependencies = 
    [   MemoryDep('buf651', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf651', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op653.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf653.users = [NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (14761984, 1)
op653.sizes = ([128, 901, 2, 64], [])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf651_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf653_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op653_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf653', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf651', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op653 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op652_op653 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op654: ExternKernelSchedulerNode(FallbackKernel)
op654.writes = [StarDep(name='buf654', mode=None)]
op654.unmet_dependencies = 
    [   StarDep(name='buf651', mode=None),
        StarDep(name='buf652', mode=None),
        StarDep(name='buf653', mode=None)]
op654.met_dependencies = []
op654.outputs = [
    buf654: FallbackKernel
    buf654.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf654.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False),
    ]
]
op654.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op655: ExternKernelSchedulerNode(MultiOutput)
op655.writes = [StarDep(name='buf655', mode=None)]
op655.unmet_dependencies = [StarDep(name='buf654', mode=None)]
op655.met_dependencies = []
op655.outputs = [
    buf655: MultiOutput
    buf655.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf655.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op655.node.kernel = None


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 16384}, None)]
op659.unmet_dependencies = []
op659.met_dependencies = [MemoryDep('primals_44', c0, {c0: 16384}, None)]
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf659.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False),
    ]
]
op659.group.device = cuda:0
op659.group.iteration = (16384, 1)
op659.sizes = ([16384], [])
primals_44_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf659_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op659_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_44', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf659', get_index_1, to_dtype, None)
        return store
op659 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op660: ExternKernelSchedulerNode(ExternKernelOut)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf655', mode=None), StarDep(name='buf659', mode=None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: ExternKernelOut
    buf660.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=True, is_weak=False),
    ]
]
op660.node.kernel = extern_kernels.mm


op661_op663: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op661_op663.writes = 
    [   MemoryDep('buf661', c0, {c0: 115328}, None),
        MemoryDep('buf663', c0, {c0: 14761984}, None)]
op661_op663.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 14761984}, None),
        MemoryDep('buf660', c0, {c0: 14761984}, None)]
op661_op663.met_dependencies = []
op661_op663.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf661.users = [NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False)]
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf663.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
    ]
]
op661_op663.snodes[0] =
op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 115328}, None)]
op661.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 14761984}, None),
        MemoryDep('buf660', c0, {c0: 14761984}, None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf661.users = [NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False)]
]
op661.group.device = cuda:0
op661.group.iteration = (115328, 128)
op661.sizes = ([115328], [128])
buf650_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf660_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op661_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf660', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf661', get_index_2, reduction)
        return store_reduction
op661 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op661_op663.snodes[1] =
op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 14761984}, None)]
op663.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 14761984}, None),
        MemoryDep('buf660', c0, {c0: 14761984}, None),
        MemoryDep('buf661', c0, {c0: 115328}, None)]
op663.met_dependencies = []
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf663.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
    ]
]
op663.group.device = cuda:0
op663.group.iteration = (14761984, 1)
op663.sizes = ([115328, 128], [])
buf650_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf660_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf663_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op663_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf660', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf661', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf663', get_index_3, to_dtype_1, None)
        return store
op663 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op661_op663 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op665: SchedulerNode(ComputedBuffer)
op665.writes = [MemoryDep('buf665', c0, {c0: 65536}, None)]
op665.unmet_dependencies = []
op665.met_dependencies = [MemoryDep('primals_46', c0, {c0: 65536}, None)]
op665.outputs = [
    buf665: ComputedBuffer
    buf665.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf665.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op667'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op864'), can_inplace=False, is_weak=False),
    ]
]
op665.group.device = cuda:0
op665.group.iteration = (65536, 1)
op665.sizes = ([65536], [])
primals_46_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf665_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op665_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_46', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf665', get_index_1, to_dtype, None)
        return store
op665 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 131072}, None)]
op662.unmet_dependencies = []
op662.met_dependencies = [MemoryDep('primals_45', c0, {c0: 131072}, None)]
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf662.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op862'), can_inplace=False, is_weak=False),
    ]
]
op662.group.device = cuda:0
op662.group.iteration = (131072, 1)
op662.sizes = ([131072], [])
primals_45_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf662_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op662_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_45', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf662', get_index_1, to_dtype, None)
        return store
op662 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op664: ExternKernelSchedulerNode(ExternKernelOut)
op664.writes = [StarDep(name='buf664', mode=None)]
op664.unmet_dependencies = [StarDep(name='buf662', mode=None), StarDep(name='buf663', mode=None)]
op664.met_dependencies = []
op664.outputs = [
    buf664: ExternKernelOut
    buf664.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf664.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op664.node.kernel = extern_kernels.mm


op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 59047936}, None)]
op666.unmet_dependencies = 
    [   MemoryDep('buf664', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf664', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op666.met_dependencies = []
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf666.users = [NodeUser(node=ExternKernelSchedulerNode(name='op667'), can_inplace=False, is_weak=False)]
]
op666.group.device = cuda:0
op666.group.iteration = (59047936, 1)
op666.sizes = ([115328, 512], [])
buf664_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf664_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf666_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op666_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf664', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf664', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf664', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf666', get_index_3, mul_1, None)
        return store
op666 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op667: ExternKernelSchedulerNode(ExternKernelOut)
op667.writes = [StarDep(name='buf667', mode=None)]
op667.unmet_dependencies = [StarDep(name='buf665', mode=None), StarDep(name='buf666', mode=None)]
op667.met_dependencies = []
op667.outputs = [
    buf667: ExternKernelOut
    buf667.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf667.users = [
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
    ]
]
op667.node.kernel = extern_kernels.mm


op668_op670: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op668_op670.writes = 
    [   MemoryDep('buf668', c0, {c0: 115328}, None),
        MemoryDep('buf670', c0, {c0: 14761984}, None)]
op668_op670.unmet_dependencies = 
    [   MemoryDep('buf663', c0, {c0: 14761984}, None),
        MemoryDep('buf667', c0, {c0: 14761984}, None)]
op668_op670.met_dependencies = []
op668_op670.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf668.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf670.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=True, is_weak=False),
    ]
]
op668_op670.snodes[0] =
op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 115328}, None)]
op668.unmet_dependencies = 
    [   MemoryDep('buf663', c0, {c0: 14761984}, None),
        MemoryDep('buf667', c0, {c0: 14761984}, None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf668.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op668.group.device = cuda:0
op668.group.iteration = (115328, 128)
op668.sizes = ([115328], [128])
buf663_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf667_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op668_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf663', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf667', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf668', get_index_2, reduction)
        return store_reduction
op668 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op668_op670.snodes[1] =
op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', c0, {c0: 14761984}, None)]
op670.unmet_dependencies = 
    [   MemoryDep('buf663', c0, {c0: 14761984}, None),
        MemoryDep('buf667', c0, {c0: 14761984}, None),
        MemoryDep('buf668', c0, {c0: 115328}, None)]
op670.met_dependencies = []
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf670.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=True, is_weak=False),
    ]
]
op670.group.device = cuda:0
op670.group.iteration = (14761984, 1)
op670.sizes = ([115328, 128], [])
buf663_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf667_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf670_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op670_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf663', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf667', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf668', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf670', get_index_3, to_dtype_1, None)
        return store
op670 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op668_op670 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 49152}, None)]
op669.unmet_dependencies = []
op669.met_dependencies = [MemoryDep('primals_47', c0, {c0: 49152}, None)]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
    buf669.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op867'), can_inplace=False, is_weak=False),
    ]
]
op669.group.device = cuda:0
op669.group.iteration = (49152, 1)
op669.sizes = ([49152], [])
primals_47_layout = FixedLayout('cuda', torch.float32, size=[384, 128], stride=[128, 1])
buf669_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 384], stride=[1, 128])
class op669_loop_body:
    var_ranges = {z0: 49152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_47', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf669', get_index_1, to_dtype, None)
        return store
op669 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 49152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op671: ExternKernelSchedulerNode(ExternKernelOut)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf669', mode=None), StarDep(name='buf670', mode=None)]
op671.met_dependencies = []
op671.outputs = [
    buf671: ExternKernelOut
    buf671.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf671.users = [
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False),
    ]
]
op671.node.kernel = extern_kernels.mm


op672_op673: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op672_op673.writes = 
    [   MemoryDep('buf672', c0, {c0: 14761984}, None),
        MemoryDep('buf673', c0, {c0: 14761984}, None)]
op672_op673.unmet_dependencies = 
    [   MemoryDep('buf671', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf671', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op672_op673.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op672_op673.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False)]
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf673.users = [NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False)]
]
op672_op673.snodes[0] =
op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 14761984}, None)]
op672.unmet_dependencies = 
    [   MemoryDep('buf671', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op672.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (14761984, 1)
op672.sizes = ([128, 901, 2, 64], [])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf672_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op672_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf672', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op672 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op672_op673.snodes[1] =
op673: SchedulerNode(ComputedBuffer)
op673.writes = [MemoryDep('buf673', c0, {c0: 14761984}, None)]
op673.unmet_dependencies = 
    [   MemoryDep('buf671', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf671', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op673.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op673.outputs = [
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf673.users = [NodeUser(node=ExternKernelSchedulerNode(name='op674'), can_inplace=False, is_weak=False)]
]
op673.group.device = cuda:0
op673.group.iteration = (14761984, 1)
op673.sizes = ([128, 901, 2, 64], [])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf671_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf673_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op673_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf673', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf671', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op673 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op672_op673 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op674: ExternKernelSchedulerNode(FallbackKernel)
op674.writes = [StarDep(name='buf674', mode=None)]
op674.unmet_dependencies = 
    [   StarDep(name='buf671', mode=None),
        StarDep(name='buf672', mode=None),
        StarDep(name='buf673', mode=None)]
op674.met_dependencies = []
op674.outputs = [
    buf674: FallbackKernel
    buf674.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf674.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op678'), can_inplace=False, is_weak=False),
    ]
]
op674.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op675: ExternKernelSchedulerNode(MultiOutput)
op675.writes = [StarDep(name='buf675', mode=None)]
op675.unmet_dependencies = [StarDep(name='buf674', mode=None)]
op675.met_dependencies = []
op675.outputs = [
    buf675: MultiOutput
    buf675.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf675.users = [NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op675.node.kernel = None


op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 16384}, None)]
op679.unmet_dependencies = []
op679.met_dependencies = [MemoryDep('primals_48', c0, {c0: 16384}, None)]
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
    buf679.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False),
    ]
]
op679.group.device = cuda:0
op679.group.iteration = (16384, 1)
op679.sizes = ([16384], [])
primals_48_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf679_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 128], stride=[1, 128])
class op679_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_48', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf679', get_index_1, to_dtype, None)
        return store
op679 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op680: ExternKernelSchedulerNode(ExternKernelOut)
op680.writes = [StarDep(name='buf680', mode=None)]
op680.unmet_dependencies = [StarDep(name='buf675', mode=None), StarDep(name='buf679', mode=None)]
op680.met_dependencies = []
op680.outputs = [
    buf680: ExternKernelOut
    buf680.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf680.users = [
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=True, is_weak=False),
    ]
]
op680.node.kernel = extern_kernels.mm


op681_op683: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op681_op683.writes = 
    [   MemoryDep('buf681', c0, {c0: 115328}, None),
        MemoryDep('buf683', c0, {c0: 14761984}, None)]
op681_op683.unmet_dependencies = 
    [   MemoryDep('buf670', c0, {c0: 14761984}, None),
        MemoryDep('buf680', c0, {c0: 14761984}, None)]
op681_op683.met_dependencies = []
op681_op683.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf681.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf683.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op681_op683.snodes[0] =
op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 115328}, None)]
op681.unmet_dependencies = 
    [   MemoryDep('buf670', c0, {c0: 14761984}, None),
        MemoryDep('buf680', c0, {c0: 14761984}, None)]
op681.met_dependencies = []
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf681.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op681.group.device = cuda:0
op681.group.iteration = (115328, 128)
op681.sizes = ([115328], [128])
buf670_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf680_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op681_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf670', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf680', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf681', get_index_2, reduction)
        return store_reduction
op681 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op681_op683.snodes[1] =
op683: SchedulerNode(ComputedBuffer)
op683.writes = [MemoryDep('buf683', c0, {c0: 14761984}, None)]
op683.unmet_dependencies = 
    [   MemoryDep('buf670', c0, {c0: 14761984}, None),
        MemoryDep('buf680', c0, {c0: 14761984}, None),
        MemoryDep('buf681', c0, {c0: 115328}, None)]
op683.met_dependencies = []
op683.outputs = [
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf683.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op683.group.device = cuda:0
op683.group.iteration = (14761984, 1)
op683.sizes = ([115328, 128], [])
buf670_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf680_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf683_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op683_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf670', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf680', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf681', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf683', get_index_3, to_dtype_1, None)
        return store
op683 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op681_op683 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 65536}, None)]
op685.unmet_dependencies = []
op685.met_dependencies = [MemoryDep('primals_50', c0, {c0: 65536}, None)]
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
    buf685.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op880'), can_inplace=False, is_weak=False),
    ]
]
op685.group.device = cuda:0
op685.group.iteration = (65536, 1)
op685.sizes = ([65536], [])
primals_50_layout = FixedLayout('cuda', torch.float32, size=[128, 512], stride=[512, 1])
buf685_layout = FixedLayout('cuda', torch.bfloat16, size=[512, 128], stride=[1, 512])
class op685_loop_body:
    var_ranges = {z0: 65536}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_50', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf685', get_index_1, to_dtype, None)
        return store
op685 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[65536], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 65536
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 131072}, None)]
op682.unmet_dependencies = []
op682.met_dependencies = [MemoryDep('primals_49', c0, {c0: 131072}, None)]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
    buf682.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False),
    ]
]
op682.group.device = cuda:0
op682.group.iteration = (131072, 1)
op682.sizes = ([131072], [])
primals_49_layout = FixedLayout('cuda', torch.float32, size=[1024, 128], stride=[128, 1])
buf682_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 1024], stride=[1, 128])
class op682_loop_body:
    var_ranges = {z0: 131072}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf682', get_index_1, to_dtype, None)
        return store
op682 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[131072], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 131072
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, None)


op684: ExternKernelSchedulerNode(ExternKernelOut)
op684.writes = [StarDep(name='buf684', mode=None)]
op684.unmet_dependencies = [StarDep(name='buf682', mode=None), StarDep(name='buf683', mode=None)]
op684.met_dependencies = []
op684.outputs = [
    buf684: ExternKernelOut
    buf684.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf684.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op684.node.kernel = extern_kernels.mm


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 59047936}, None)]
op686.unmet_dependencies = 
    [   MemoryDep('buf684', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf684', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op686.met_dependencies = []
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf686.users = [NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False)]
]
op686.group.device = cuda:0
op686.group.iteration = (59047936, 1)
op686.sizes = ([115328, 512], [])
buf684_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf684_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf686_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op686_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf684', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf684', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf684', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf686', get_index_3, mul_1, None)
        return store
op686 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op687: ExternKernelSchedulerNode(ExternKernelOut)
op687.writes = [StarDep(name='buf687', mode=None)]
op687.unmet_dependencies = [StarDep(name='buf685', mode=None), StarDep(name='buf686', mode=None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: ExternKernelOut
    buf687.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf687.users = [
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op687.node.kernel = extern_kernels.mm


op688_op689_op690: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op688_op689_op690.writes = 
    [   MemoryDep('buf688', c0, {c0: 115328}, None),
        MemoryDep('buf689', c0, {c0: 14761984}, None),
        MemoryDep('buf690', c0, {c0: 14761984}, None)]
op688_op689_op690.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf604', c0, {c0: 14761984}, None),
        MemoryDep('buf607', c0, {c0: 14761984}, None),
        MemoryDep('buf608', c0, {c0: 115328}, None),
        MemoryDep('buf683', c0, {c0: 14761984}, None),
        MemoryDep('buf687', c0, {c0: 14761984}, None)]
op688_op689_op690.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op688_op689_op690.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf688.users = [
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=False, is_weak=False),
    ]
    buf689: ComputedBuffer
    buf689.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf689.users = [
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
    ]
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf690.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False),
    ]
]
op688_op689_op690.snodes[0] =
op688: SchedulerNode(ComputedBuffer)
op688.writes = [MemoryDep('buf688', c0, {c0: 115328}, None)]
op688.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 14761984}, None),
        MemoryDep('buf687', c0, {c0: 14761984}, None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf688.users = [
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=False, is_weak=False),
    ]
]
op688.group.device = cuda:0
op688.group.iteration = (115328, 128)
op688.sizes = ([115328], [128])
buf683_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf687_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op688_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf687', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf688', get_index_2, reduction)
        return store_reduction
op688 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op688_op689_op690.snodes[1] =
op689: SchedulerNode(ComputedBuffer)
op689.writes = [MemoryDep('buf689', c0, {c0: 14761984}, None)]
op689.unmet_dependencies = 
    [   MemoryDep('buf0', 900*c0 + I, {c0: 128, c1: 901}, None),
        MemoryDep('buf2', c0, {c0: 128}, None),
        MemoryDep('buf683', c0, {c0: 14761984}, None),
        MemoryDep('buf687', c0, {c0: 14761984}, None),
        MemoryDep('buf688', c0, {c0: 115328}, None)]
op689.met_dependencies = 
    [   MemoryDep('primals_15', c1 + 128*tmp1, {c0: 115328, c1: 128}, None),
        MemoryDep('primals_17', c1, {c0: 115328, c1: 128}, None)]
op689.outputs = [
    buf689: ComputedBuffer
    buf689.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf689.users = [
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
    ]
]
op689.group.device = cuda:0
op689.group.iteration = (14761984, 1)
op689.sizes = ([128, 901, 128], [])
buf683_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf687_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_17_layout = FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.int32, size=[128, 900], stride=[900, 1])
primals_15_layout = FixedLayout('cuda', torch.float32, size=[10, 128], stride=[128, 1])
buf689_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op689_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 128}
    index0 = 115328*z0 + 128*z1 + z2
    index1 = 901*z0 + z1
    index2 = z1
    index3 = z0
    index4 = z2
    index5 = 900*z0 + I
    index6 = 128*indirect1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf687', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf688', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_3, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant_2)
        get_index_4 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_4, torch.int64)
        constant_3 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_5 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_5, torch.int64)
        constant_4 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_4)
        get_index_6 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_6, torch.int64)
        constant_5 = ops.constant(901, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock3)
        constant_6 = ops.constant(11.313708498984761, torch.bfloat16)
        mul_1 = ops.mul(where, constant_6)
        add_2 = ops.add(to_dtype_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf689', get_index_7, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('primals_17', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf0', get_index)
        set_indirect1 = self.set_indirect1(load)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('primals_15', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.bfloat16, src_dtype = torch.float32)
        return to_dtype
op689 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*i32', 4: '*fp32', 5: '*i32', 6: '*fp32', 7: '*bf16', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x4 = (xindex // 128)
        x1 = (xindex // 128) % 901
        x2 = (xindex // 115328)
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (x3), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x3), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp12 = x1
        tmp13 = tl.full([1], 0, tl.int64)
        tmp14 = tmp12 >= tmp13
        tmp15 = tl.full([1], 1, tl.int64)
        tmp16 = tmp12 < tmp15
        tmp17 = tl.load(in_ptr3 + (x2), tmp16, eviction_policy='evict_last', other=0.0)
        tmp18 = tl.full([XBLOCK], 1, tl.int32)
        tmp19 = tmp17 + tmp18
        tmp20 = tmp17 < 0
        tmp21 = tl.where(tmp20, tmp19, tmp17)
        tl.device_assert(((0 <= tl.broadcast_to(tmp21, [XBLOCK])) & (tl.broadcast_to(tmp21, [XBLOCK]) < 1)) | ~(tmp16), "index out of bounds: 0 <= tl.broadcast_to(tmp21, [XBLOCK]) < 1")
        tmp23 = tl.load(in_ptr4 + (x0), tmp16, eviction_policy='evict_last', other=0.0)
        tmp24 = tmp23.to(tl.float32)
        tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
        tmp26 = tl.where(tmp16, tmp24, tmp25)
        tmp27 = tmp12 >= tmp15
        tmp28 = tl.full([1], 901, tl.int64)
        tmp29 = tmp12 < tmp28
        tmp30 = tl.load(in_ptr5 + ((900*x2) + ((-1) + x1)), tmp27, eviction_policy='evict_last', other=0.0)
        tmp31 = tl.full([XBLOCK], 10, tl.int32)
        tmp32 = tmp30 + tmp31
        tmp33 = tmp30 < 0
        tmp34 = tl.where(tmp33, tmp32, tmp30)
        tl.device_assert(((0 <= tl.broadcast_to(tmp34, [XBLOCK])) & (tl.broadcast_to(tmp34, [XBLOCK]) < 10)) | ~(tmp27), "index out of bounds: 0 <= tl.broadcast_to(tmp34, [XBLOCK]) < 10")
        tmp36 = tl.load(in_ptr6 + (x0 + (128*tmp34)), tmp27, other=0.0)
        tmp37 = tmp36.to(tl.float32)
        tmp38 = tl.full(tmp37.shape, 0.0, tmp37.dtype)
        tmp39 = tl.where(tmp27, tmp37, tmp38)
        tmp40 = tl.where(tmp16, tmp26, tmp39)
        tmp41 = 11.313708498984761
        tmp42 = tmp40 * tmp41
        tmp43 = tmp11 + tmp42
        tl.store(out_ptr0 + (x3), tmp43, None)
op688_op689_op690.snodes[2] =
op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', c0, {c0: 14761984}, None)]
op690.unmet_dependencies = 
    [   MemoryDep('buf604', c0, {c0: 14761984}, None),
        MemoryDep('buf607', c0, {c0: 14761984}, None),
        MemoryDep('buf608', c0, {c0: 115328}, None),
        MemoryDep('buf689', c0, {c0: 14761984}, None)]
op690.met_dependencies = []
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf690.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False),
    ]
]
op690.group.device = cuda:0
op690.group.iteration = (14761984, 1)
op690.sizes = ([115328, 128], [])
buf604_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf607_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf689_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf690_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op690_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf607', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf608', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf689', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf690', get_index_4, add_2, None)
        return store
op690 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op688_op689_op690 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*i32', 3: '*fp32', 4: '*i32', 5: '*fp32', 6: '*bf16', 7: '*bf16', 8: '*fp32', 9: '*fp32', 10: '*bf16', 11: '*bf16', 12: 'i32', 13: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(12, 13))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        x2 = xindex % 901
        x3 = (xindex // 901)
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp48 = tl.load(in_ptr6 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp49 = tl.load(in_ptr7 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp52 = tl.load(in_ptr8 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp16 = x2
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 >= tmp17
        tmp19 = tl.full([1, 1], 1, tl.int64)
        tmp20 = tmp16 < tmp19
        tmp21 = tl.load(in_ptr2 + (tl.broadcast_to(x3, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp22 = tl.full([XBLOCK, RBLOCK], 1, tl.int32)
        tmp23 = tmp21 + tmp22
        tmp24 = tmp21 < 0
        tmp25 = tl.where(tmp24, tmp23, tmp21)
        tl.device_assert(((0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1)) | ~(tmp20 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp25, [XBLOCK, RBLOCK]) < 1")
        tmp27 = tl.load(in_ptr3 + (tl.broadcast_to(r1, [XBLOCK, RBLOCK])), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
        tmp28 = tmp27.to(tl.float32)
        tmp29 = tl.full(tmp28.shape, 0.0, tmp28.dtype)
        tmp30 = tl.where(tmp20, tmp28, tmp29)
        tmp31 = tmp16 >= tmp19
        tmp32 = tl.full([1, 1], 901, tl.int64)
        tmp33 = tmp16 < tmp32
        tmp34 = tl.load(in_ptr4 + (tl.broadcast_to((900*x3) + ((-1) + x2), [XBLOCK, RBLOCK])), tmp31 & xmask, eviction_policy='evict_last', other=0.0)
        tmp35 = tl.full([XBLOCK, RBLOCK], 10, tl.int32)
        tmp36 = tmp34 + tmp35
        tmp37 = tmp34 < 0
        tmp38 = tl.where(tmp37, tmp36, tmp34)
        tl.device_assert(((0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])) & (tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10)) | ~(tmp31 & xmask), "index out of bounds: 0 <= tl.broadcast_to(tmp38, [XBLOCK, RBLOCK]) < 10")
        tmp40 = tl.load(in_ptr5 + (tl.broadcast_to(r1 + (128*tmp38), [XBLOCK, RBLOCK])), tmp31 & xmask, other=0.0)
        tmp41 = tmp40.to(tl.float32)
        tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
        tmp43 = tl.where(tmp31, tmp41, tmp42)
        tmp44 = tl.where(tmp20, tmp30, tmp43)
        tmp45 = 11.313708498984761
        tmp46 = tmp44 * tmp45
        tmp47 = tmp15 + tmp46
        tmp50 = tmp48 + tmp49
        tmp51 = tmp50.to(tl.float32)
        tmp53 = tmp52 / tmp9
        tmp54 = tmp53 + tmp11
        tmp55 = libdevice.rsqrt(tmp54)
        tmp56 = tmp51 * tmp55
        tmp57 = tmp56.to(tl.float32)
        tmp58 = tmp57 + tmp47
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp47, xmask)
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp58, xmask)
        tl.store(out_ptr0 + (x0), tmp8, xmask)


op691: ExternKernelSchedulerNode(ExternKernelOut)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf465', mode=None), StarDep(name='buf690', mode=None)]
op691.met_dependencies = []
op691.outputs = [
    buf691: ExternKernelOut
    buf691.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf691.users = [
        NodeUser(node=SchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False),
    ]
]
op691.node.kernel = extern_kernels.mm


op692_op693: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op692_op693.writes = 
    [   MemoryDep('buf692', c0, {c0: 14761984}, None),
        MemoryDep('buf693', c0, {c0: 14761984}, None)]
op692_op693.unmet_dependencies = 
    [   MemoryDep('buf691', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf691', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op692_op693.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op692_op693.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf692.users = [NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf693.users = [NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
]
op692_op693.snodes[0] =
op692: SchedulerNode(ComputedBuffer)
op692.writes = [MemoryDep('buf692', c0, {c0: 14761984}, None)]
op692.unmet_dependencies = 
    [   MemoryDep('buf691', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op692.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op692.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf692.users = [NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
]
op692.group.device = cuda:0
op692.group.iteration = (14761984, 1)
op692.sizes = ([128, 901, 2, 64], [])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf692_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op692_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf692', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op692 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op692_op693.snodes[1] =
op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 14761984}, None)]
op693.unmet_dependencies = 
    [   MemoryDep('buf691', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf691', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op693.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf693.users = [NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (14761984, 1)
op693.sizes = ([128, 901, 2, 64], [])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf691_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf693_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op693_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf693', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf691', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op693 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op692_op693 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op694: ExternKernelSchedulerNode(FallbackKernel)
op694.writes = [StarDep(name='buf694', mode=None)]
op694.unmet_dependencies = 
    [   StarDep(name='buf691', mode=None),
        StarDep(name='buf692', mode=None),
        StarDep(name='buf693', mode=None)]
op694.met_dependencies = []
op694.outputs = [
    buf694: FallbackKernel
    buf694.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf694.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
    ]
]
op694.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op695: ExternKernelSchedulerNode(MultiOutput)
op695.writes = [StarDep(name='buf695', mode=None)]
op695.unmet_dependencies = [StarDep(name='buf694', mode=None)]
op695.met_dependencies = []
op695.outputs = [
    buf695: MultiOutput
    buf695.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf695.users = [NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False)]
]
op695.node.kernel = None


op699: ExternKernelSchedulerNode(ExternKernelOut)
op699.writes = [StarDep(name='buf699', mode=None)]
op699.unmet_dependencies = [StarDep(name='buf475', mode=None), StarDep(name='buf695', mode=None)]
op699.met_dependencies = []
op699.outputs = [
    buf699: ExternKernelOut
    buf699.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf699.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False),
    ]
]
op699.node.kernel = extern_kernels.mm


op700_op701: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op700_op701.writes = 
    [   MemoryDep('buf700', c0, {c0: 115328}, None),
        MemoryDep('buf701', c0, {c0: 14761984}, None)]
op700_op701.unmet_dependencies = 
    [   MemoryDep('buf690', c0, {c0: 14761984}, None),
        MemoryDep('buf699', c0, {c0: 14761984}, None)]
op700_op701.met_dependencies = []
op700_op701.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf700.users = [NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False)]
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf701.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
    ]
]
op700_op701.snodes[0] =
op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 115328}, None)]
op700.unmet_dependencies = 
    [   MemoryDep('buf690', c0, {c0: 14761984}, None),
        MemoryDep('buf699', c0, {c0: 14761984}, None)]
op700.met_dependencies = []
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf700.users = [NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False)]
]
op700.group.device = cuda:0
op700.group.iteration = (115328, 128)
op700.sizes = ([115328], [128])
buf690_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf699_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op700_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf690', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf699', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf700', get_index_2, reduction)
        return store_reduction
op700 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op700_op701.snodes[1] =
op701: SchedulerNode(ComputedBuffer)
op701.writes = [MemoryDep('buf701', c0, {c0: 14761984}, None)]
op701.unmet_dependencies = 
    [   MemoryDep('buf690', c0, {c0: 14761984}, None),
        MemoryDep('buf699', c0, {c0: 14761984}, None),
        MemoryDep('buf700', c0, {c0: 115328}, None)]
op701.met_dependencies = []
op701.outputs = [
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf701.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
    ]
]
op701.group.device = cuda:0
op701.group.iteration = (14761984, 1)
op701.sizes = ([115328, 128], [])
buf690_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf699_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf701_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op701_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf690', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf699', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf700', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf701', get_index_3, to_dtype_1, None)
        return store
op701 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op700_op701 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op702: ExternKernelSchedulerNode(ExternKernelOut)
op702.writes = [StarDep(name='buf702', mode=None)]
op702.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf701', mode=None)]
op702.met_dependencies = []
op702.outputs = [
    buf702: ExternKernelOut
    buf702.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf702.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op702.node.kernel = extern_kernels.mm


op703: SchedulerNode(ComputedBuffer)
op703.writes = [MemoryDep('buf703', c0, {c0: 59047936}, None)]
op703.unmet_dependencies = 
    [   MemoryDep('buf702', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf702', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op703.met_dependencies = []
op703.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf703.users = [NodeUser(node=ExternKernelSchedulerNode(name='op704'), can_inplace=False, is_weak=False)]
]
op703.group.device = cuda:0
op703.group.iteration = (59047936, 1)
op703.sizes = ([115328, 512], [])
buf702_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf702_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf703_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op703_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf702', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf702', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf702', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf703', get_index_3, mul_1, None)
        return store
op703 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op704: ExternKernelSchedulerNode(ExternKernelOut)
op704.writes = [StarDep(name='buf704', mode=None)]
op704.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf703', mode=None)]
op704.met_dependencies = []
op704.outputs = [
    buf704: ExternKernelOut
    buf704.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf704.users = [
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=True, is_weak=False),
    ]
]
op704.node.kernel = extern_kernels.mm


op705_op706: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op705_op706.writes = 
    [   MemoryDep('buf705', c0, {c0: 115328}, None),
        MemoryDep('buf706', c0, {c0: 14761984}, None)]
op705_op706.unmet_dependencies = 
    [   MemoryDep('buf701', c0, {c0: 14761984}, None),
        MemoryDep('buf704', c0, {c0: 14761984}, None)]
op705_op706.met_dependencies = []
op705_op706.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf705.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf706.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
    ]
]
op705_op706.snodes[0] =
op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 115328}, None)]
op705.unmet_dependencies = 
    [   MemoryDep('buf701', c0, {c0: 14761984}, None),
        MemoryDep('buf704', c0, {c0: 14761984}, None)]
op705.met_dependencies = []
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf705.users = [NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False)]
]
op705.group.device = cuda:0
op705.group.iteration = (115328, 128)
op705.sizes = ([115328], [128])
buf701_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf704_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op705_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf704', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf705', get_index_2, reduction)
        return store_reduction
op705 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op705_op706.snodes[1] =
op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 14761984}, None)]
op706.unmet_dependencies = 
    [   MemoryDep('buf701', c0, {c0: 14761984}, None),
        MemoryDep('buf704', c0, {c0: 14761984}, None),
        MemoryDep('buf705', c0, {c0: 115328}, None)]
op706.met_dependencies = []
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf706.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
    ]
]
op706.group.device = cuda:0
op706.group.iteration = (14761984, 1)
op706.sizes = ([115328, 128], [])
buf701_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf704_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf706_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op706_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf704', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf705', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf706', get_index_3, to_dtype_1, None)
        return store
op706 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op705_op706 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op707: ExternKernelSchedulerNode(ExternKernelOut)
op707.writes = [StarDep(name='buf707', mode=None)]
op707.unmet_dependencies = [StarDep(name='buf485', mode=None), StarDep(name='buf706', mode=None)]
op707.met_dependencies = []
op707.outputs = [
    buf707: ExternKernelOut
    buf707.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf707.users = [
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False),
    ]
]
op707.node.kernel = extern_kernels.mm


op708_op709: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op708_op709.writes = 
    [   MemoryDep('buf708', c0, {c0: 14761984}, None),
        MemoryDep('buf709', c0, {c0: 14761984}, None)]
op708_op709.unmet_dependencies = 
    [   MemoryDep('buf707', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf707', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op708_op709.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op708_op709.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf708.users = [NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False)]
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf709.users = [NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False)]
]
op708_op709.snodes[0] =
op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', c0, {c0: 14761984}, None)]
op708.unmet_dependencies = 
    [   MemoryDep('buf707', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op708.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf708.users = [NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False)]
]
op708.group.device = cuda:0
op708.group.iteration = (14761984, 1)
op708.sizes = ([128, 901, 2, 64], [])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf708_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op708_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf708', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op708 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op708_op709.snodes[1] =
op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 14761984}, None)]
op709.unmet_dependencies = 
    [   MemoryDep('buf707', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf707', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op709.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf709.users = [NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False)]
]
op709.group.device = cuda:0
op709.group.iteration = (14761984, 1)
op709.sizes = ([128, 901, 2, 64], [])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf707_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf709_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op709_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf709', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf707', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op709 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op708_op709 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op710: ExternKernelSchedulerNode(FallbackKernel)
op710.writes = [StarDep(name='buf710', mode=None)]
op710.unmet_dependencies = 
    [   StarDep(name='buf707', mode=None),
        StarDep(name='buf708', mode=None),
        StarDep(name='buf709', mode=None)]
op710.met_dependencies = []
op710.outputs = [
    buf710: FallbackKernel
    buf710.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf710.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False),
    ]
]
op710.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op711: ExternKernelSchedulerNode(MultiOutput)
op711.writes = [StarDep(name='buf711', mode=None)]
op711.unmet_dependencies = [StarDep(name='buf710', mode=None)]
op711.met_dependencies = []
op711.outputs = [
    buf711: MultiOutput
    buf711.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False)]
]
op711.node.kernel = None


op715: ExternKernelSchedulerNode(ExternKernelOut)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf711', mode=None)]
op715.met_dependencies = []
op715.outputs = [
    buf715: ExternKernelOut
    buf715.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf715.users = [
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False),
    ]
]
op715.node.kernel = extern_kernels.mm


op716_op717: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op716_op717.writes = 
    [   MemoryDep('buf716', c0, {c0: 115328}, None),
        MemoryDep('buf717', c0, {c0: 14761984}, None)]
op716_op717.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 14761984}, None),
        MemoryDep('buf715', c0, {c0: 14761984}, None)]
op716_op717.met_dependencies = []
op716_op717.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf716.users = [NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False)]
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf717.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=True, is_weak=False),
    ]
]
op716_op717.snodes[0] =
op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 115328}, None)]
op716.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 14761984}, None),
        MemoryDep('buf715', c0, {c0: 14761984}, None)]
op716.met_dependencies = []
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf716.users = [NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False)]
]
op716.group.device = cuda:0
op716.group.iteration = (115328, 128)
op716.sizes = ([115328], [128])
buf706_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf715_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op716_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf715', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf716', get_index_2, reduction)
        return store_reduction
op716 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op716_op717.snodes[1] =
op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 14761984}, None)]
op717.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 14761984}, None),
        MemoryDep('buf715', c0, {c0: 14761984}, None),
        MemoryDep('buf716', c0, {c0: 115328}, None)]
op717.met_dependencies = []
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf717.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=True, is_weak=False),
    ]
]
op717.group.device = cuda:0
op717.group.iteration = (14761984, 1)
op717.sizes = ([115328, 128], [])
buf706_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf715_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf717_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op717_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf715', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf716', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf717', get_index_3, to_dtype_1, None)
        return store
op717 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op716_op717 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op718: ExternKernelSchedulerNode(ExternKernelOut)
op718.writes = [StarDep(name='buf718', mode=None)]
op718.unmet_dependencies = [StarDep(name='buf498', mode=None), StarDep(name='buf717', mode=None)]
op718.met_dependencies = []
op718.outputs = [
    buf718: ExternKernelOut
    buf718.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf718.users = [NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op718.node.kernel = extern_kernels.mm


op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 59047936}, None)]
op719.unmet_dependencies = 
    [   MemoryDep('buf718', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf718', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op719.met_dependencies = []
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf719.users = [NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False)]
]
op719.group.device = cuda:0
op719.group.iteration = (59047936, 1)
op719.sizes = ([115328, 512], [])
buf718_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf718_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf719_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op719_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf718', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf718', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf718', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf719', get_index_3, mul_1, None)
        return store
op719 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op720: ExternKernelSchedulerNode(ExternKernelOut)
op720.writes = [StarDep(name='buf720', mode=None)]
op720.unmet_dependencies = [StarDep(name='buf501', mode=None), StarDep(name='buf719', mode=None)]
op720.met_dependencies = []
op720.outputs = [
    buf720: ExternKernelOut
    buf720.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf720.users = [
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=True, is_weak=False),
    ]
]
op720.node.kernel = extern_kernels.mm


op721_op722: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op721_op722.writes = 
    [   MemoryDep('buf721', c0, {c0: 115328}, None),
        MemoryDep('buf722', c0, {c0: 14761984}, None)]
op721_op722.unmet_dependencies = 
    [   MemoryDep('buf717', c0, {c0: 14761984}, None),
        MemoryDep('buf720', c0, {c0: 14761984}, None)]
op721_op722.met_dependencies = []
op721_op722.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf721.users = [NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf722.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=True, is_weak=False),
    ]
]
op721_op722.snodes[0] =
op721: SchedulerNode(ComputedBuffer)
op721.writes = [MemoryDep('buf721', c0, {c0: 115328}, None)]
op721.unmet_dependencies = 
    [   MemoryDep('buf717', c0, {c0: 14761984}, None),
        MemoryDep('buf720', c0, {c0: 14761984}, None)]
op721.met_dependencies = []
op721.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf721.users = [NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False)]
]
op721.group.device = cuda:0
op721.group.iteration = (115328, 128)
op721.sizes = ([115328], [128])
buf717_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf720_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op721_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf717', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf720', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf721', get_index_2, reduction)
        return store_reduction
op721 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op721_op722.snodes[1] =
op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 14761984}, None)]
op722.unmet_dependencies = 
    [   MemoryDep('buf717', c0, {c0: 14761984}, None),
        MemoryDep('buf720', c0, {c0: 14761984}, None),
        MemoryDep('buf721', c0, {c0: 115328}, None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf722.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=True, is_weak=False),
    ]
]
op722.group.device = cuda:0
op722.group.iteration = (14761984, 1)
op722.sizes = ([115328, 128], [])
buf717_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf720_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf722_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op722_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf717', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf720', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf721', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf722', get_index_3, to_dtype_1, None)
        return store
op722 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op721_op722 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op723: ExternKernelSchedulerNode(ExternKernelOut)
op723.writes = [StarDep(name='buf723', mode=None)]
op723.unmet_dependencies = [StarDep(name='buf505', mode=None), StarDep(name='buf722', mode=None)]
op723.met_dependencies = []
op723.outputs = [
    buf723: ExternKernelOut
    buf723.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf723.users = [
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False),
    ]
]
op723.node.kernel = extern_kernels.mm


op724_op725: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op724_op725.writes = 
    [   MemoryDep('buf724', c0, {c0: 14761984}, None),
        MemoryDep('buf725', c0, {c0: 14761984}, None)]
op724_op725.unmet_dependencies = 
    [   MemoryDep('buf723', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf723', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op724_op725.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op724_op725.outputs = [
    buf724: ComputedBuffer
    buf724.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf724.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf725.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op724_op725.snodes[0] =
op724: SchedulerNode(ComputedBuffer)
op724.writes = [MemoryDep('buf724', c0, {c0: 14761984}, None)]
op724.unmet_dependencies = 
    [   MemoryDep('buf723', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op724.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op724.outputs = [
    buf724: ComputedBuffer
    buf724.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf724.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op724.group.device = cuda:0
op724.group.iteration = (14761984, 1)
op724.sizes = ([128, 901, 2, 64], [])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf724_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op724_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf724', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op724 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op724_op725.snodes[1] =
op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 14761984}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf723', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf723', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op725.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf725.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op725.group.device = cuda:0
op725.group.iteration = (14761984, 1)
op725.sizes = ([128, 901, 2, 64], [])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf723_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf725_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op725_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf725', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf723', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op725 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op724_op725 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op726: ExternKernelSchedulerNode(FallbackKernel)
op726.writes = [StarDep(name='buf726', mode=None)]
op726.unmet_dependencies = 
    [   StarDep(name='buf723', mode=None),
        StarDep(name='buf724', mode=None),
        StarDep(name='buf725', mode=None)]
op726.met_dependencies = []
op726.outputs = [
    buf726: FallbackKernel
    buf726.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf726.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False),
    ]
]
op726.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op727: ExternKernelSchedulerNode(MultiOutput)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf726', mode=None)]
op727.met_dependencies = []
op727.outputs = [
    buf727: MultiOutput
    buf727.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf727.users = [NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
]
op727.node.kernel = None


op731: ExternKernelSchedulerNode(ExternKernelOut)
op731.writes = [StarDep(name='buf731', mode=None)]
op731.unmet_dependencies = [StarDep(name='buf515', mode=None), StarDep(name='buf727', mode=None)]
op731.met_dependencies = []
op731.outputs = [
    buf731: ExternKernelOut
    buf731.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf731.users = [
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=True, is_weak=False),
    ]
]
op731.node.kernel = extern_kernels.mm


op732_op733: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op732_op733.writes = 
    [   MemoryDep('buf732', c0, {c0: 115328}, None),
        MemoryDep('buf733', c0, {c0: 14761984}, None)]
op732_op733.unmet_dependencies = 
    [   MemoryDep('buf722', c0, {c0: 14761984}, None),
        MemoryDep('buf731', c0, {c0: 14761984}, None)]
op732_op733.met_dependencies = []
op732_op733.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf732.users = [NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
    buf733: ComputedBuffer
    buf733.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf733.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False),
    ]
]
op732_op733.snodes[0] =
op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', c0, {c0: 115328}, None)]
op732.unmet_dependencies = 
    [   MemoryDep('buf722', c0, {c0: 14761984}, None),
        MemoryDep('buf731', c0, {c0: 14761984}, None)]
op732.met_dependencies = []
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf732.users = [NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
]
op732.group.device = cuda:0
op732.group.iteration = (115328, 128)
op732.sizes = ([115328], [128])
buf722_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf731_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op732_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf722', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf731', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf732', get_index_2, reduction)
        return store_reduction
op732 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op732_op733.snodes[1] =
op733: SchedulerNode(ComputedBuffer)
op733.writes = [MemoryDep('buf733', c0, {c0: 14761984}, None)]
op733.unmet_dependencies = 
    [   MemoryDep('buf722', c0, {c0: 14761984}, None),
        MemoryDep('buf731', c0, {c0: 14761984}, None),
        MemoryDep('buf732', c0, {c0: 115328}, None)]
op733.met_dependencies = []
op733.outputs = [
    buf733: ComputedBuffer
    buf733.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf733.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False),
    ]
]
op733.group.device = cuda:0
op733.group.iteration = (14761984, 1)
op733.sizes = ([115328, 128], [])
buf722_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf731_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf733_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op733_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf722', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf731', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf732', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf733', get_index_3, to_dtype_1, None)
        return store
op733 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op732_op733 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op734: ExternKernelSchedulerNode(ExternKernelOut)
op734.writes = [StarDep(name='buf734', mode=None)]
op734.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf733', mode=None)]
op734.met_dependencies = []
op734.outputs = [
    buf734: ExternKernelOut
    buf734.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf734.users = [NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False)]
]
op734.node.kernel = extern_kernels.mm


op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', c0, {c0: 59047936}, None)]
op735.unmet_dependencies = 
    [   MemoryDep('buf734', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf734', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op735.met_dependencies = []
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf735.users = [NodeUser(node=ExternKernelSchedulerNode(name='op736'), can_inplace=False, is_weak=False)]
]
op735.group.device = cuda:0
op735.group.iteration = (59047936, 1)
op735.sizes = ([115328, 512], [])
buf734_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf734_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf735_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op735_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf734', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf734', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf735', get_index_3, mul_1, None)
        return store
op735 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op736: ExternKernelSchedulerNode(ExternKernelOut)
op736.writes = [StarDep(name='buf736', mode=None)]
op736.unmet_dependencies = [StarDep(name='buf521', mode=None), StarDep(name='buf735', mode=None)]
op736.met_dependencies = []
op736.outputs = [
    buf736: ExternKernelOut
    buf736.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf736.users = [
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False),
    ]
]
op736.node.kernel = extern_kernels.mm


op737_op738: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op737_op738.writes = 
    [   MemoryDep('buf737', c0, {c0: 115328}, None),
        MemoryDep('buf738', c0, {c0: 14761984}, None)]
op737_op738.unmet_dependencies = 
    [   MemoryDep('buf733', c0, {c0: 14761984}, None),
        MemoryDep('buf736', c0, {c0: 14761984}, None)]
op737_op738.met_dependencies = []
op737_op738.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf737.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf738.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op737_op738.snodes[0] =
op737: SchedulerNode(ComputedBuffer)
op737.writes = [MemoryDep('buf737', c0, {c0: 115328}, None)]
op737.unmet_dependencies = 
    [   MemoryDep('buf733', c0, {c0: 14761984}, None),
        MemoryDep('buf736', c0, {c0: 14761984}, None)]
op737.met_dependencies = []
op737.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf737.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op737.group.device = cuda:0
op737.group.iteration = (115328, 128)
op737.sizes = ([115328], [128])
buf733_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf736_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op737_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf736', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf737', get_index_2, reduction)
        return store_reduction
op737 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op737_op738.snodes[1] =
op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 14761984}, None)]
op738.unmet_dependencies = 
    [   MemoryDep('buf733', c0, {c0: 14761984}, None),
        MemoryDep('buf736', c0, {c0: 14761984}, None),
        MemoryDep('buf737', c0, {c0: 115328}, None)]
op738.met_dependencies = []
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf738.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op738.group.device = cuda:0
op738.group.iteration = (14761984, 1)
op738.sizes = ([115328, 128], [])
buf733_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf736_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf738_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op738_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf736', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf737', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf738', get_index_3, to_dtype_1, None)
        return store
op738 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op737_op738 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op739: ExternKernelSchedulerNode(ExternKernelOut)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf738', mode=None)]
op739.met_dependencies = []
op739.outputs = [
    buf739: ExternKernelOut
    buf739.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf739.users = [
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False),
    ]
]
op739.node.kernel = extern_kernels.mm


op740_op741: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op740_op741.writes = 
    [   MemoryDep('buf740', c0, {c0: 14761984}, None),
        MemoryDep('buf741', c0, {c0: 14761984}, None)]
op740_op741.unmet_dependencies = 
    [   MemoryDep('buf739', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf739', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op740_op741.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op740_op741.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf740.users = [NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf741.users = [NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op740_op741.snodes[0] =
op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 14761984}, None)]
op740.unmet_dependencies = 
    [   MemoryDep('buf739', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op740.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf740.users = [NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op740.group.device = cuda:0
op740.group.iteration = (14761984, 1)
op740.sizes = ([128, 901, 2, 64], [])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf740_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op740_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf740', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op740 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op740_op741.snodes[1] =
op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 14761984}, None)]
op741.unmet_dependencies = 
    [   MemoryDep('buf739', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf739', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op741.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf741.users = [NodeUser(node=ExternKernelSchedulerNode(name='op742'), can_inplace=False, is_weak=False)]
]
op741.group.device = cuda:0
op741.group.iteration = (14761984, 1)
op741.sizes = ([128, 901, 2, 64], [])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf739_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf741_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op741_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf741', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf739', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op741 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op740_op741 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op742: ExternKernelSchedulerNode(FallbackKernel)
op742.writes = [StarDep(name='buf742', mode=None)]
op742.unmet_dependencies = 
    [   StarDep(name='buf739', mode=None),
        StarDep(name='buf740', mode=None),
        StarDep(name='buf741', mode=None)]
op742.met_dependencies = []
op742.outputs = [
    buf742: FallbackKernel
    buf742.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf742.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op742.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op743: ExternKernelSchedulerNode(MultiOutput)
op743.writes = [StarDep(name='buf743', mode=None)]
op743.unmet_dependencies = [StarDep(name='buf742', mode=None)]
op743.met_dependencies = []
op743.outputs = [
    buf743: MultiOutput
    buf743.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf743.users = [NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op743.node.kernel = None


op747: ExternKernelSchedulerNode(ExternKernelOut)
op747.writes = [StarDep(name='buf747', mode=None)]
op747.unmet_dependencies = [StarDep(name='buf535', mode=None), StarDep(name='buf743', mode=None)]
op747.met_dependencies = []
op747.outputs = [
    buf747: ExternKernelOut
    buf747.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf747.users = [
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op747.node.kernel = extern_kernels.mm


op748_op749: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op748_op749.writes = 
    [   MemoryDep('buf748', c0, {c0: 115328}, None),
        MemoryDep('buf749', c0, {c0: 14761984}, None)]
op748_op749.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 14761984}, None),
        MemoryDep('buf747', c0, {c0: 14761984}, None)]
op748_op749.met_dependencies = []
op748_op749.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf749.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
    ]
]
op748_op749.snodes[0] =
op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 115328}, None)]
op748.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 14761984}, None),
        MemoryDep('buf747', c0, {c0: 14761984}, None)]
op748.met_dependencies = []
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (115328, 128)
op748.sizes = ([115328], [128])
buf738_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf747_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op748_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf747', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf748', get_index_2, reduction)
        return store_reduction
op748 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op748_op749.snodes[1] =
op749: SchedulerNode(ComputedBuffer)
op749.writes = [MemoryDep('buf749', c0, {c0: 14761984}, None)]
op749.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 14761984}, None),
        MemoryDep('buf747', c0, {c0: 14761984}, None),
        MemoryDep('buf748', c0, {c0: 115328}, None)]
op749.met_dependencies = []
op749.outputs = [
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf749.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
    ]
]
op749.group.device = cuda:0
op749.group.iteration = (14761984, 1)
op749.sizes = ([115328, 128], [])
buf738_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf747_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf749_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op749_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf747', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf748', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf749', get_index_3, to_dtype_1, None)
        return store
op749 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op748_op749 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op750: ExternKernelSchedulerNode(ExternKernelOut)
op750.writes = [StarDep(name='buf750', mode=None)]
op750.unmet_dependencies = [StarDep(name='buf538', mode=None), StarDep(name='buf749', mode=None)]
op750.met_dependencies = []
op750.outputs = [
    buf750: ExternKernelOut
    buf750.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf750.users = [NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.node.kernel = extern_kernels.mm


op751: SchedulerNode(ComputedBuffer)
op751.writes = [MemoryDep('buf751', c0, {c0: 59047936}, None)]
op751.unmet_dependencies = 
    [   MemoryDep('buf750', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf750', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op751.met_dependencies = []
op751.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf751.users = [NodeUser(node=ExternKernelSchedulerNode(name='op752'), can_inplace=False, is_weak=False)]
]
op751.group.device = cuda:0
op751.group.iteration = (59047936, 1)
op751.sizes = ([115328, 512], [])
buf750_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf750_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf751_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op751_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf750', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf750', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf751', get_index_3, mul_1, None)
        return store
op751 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op752: ExternKernelSchedulerNode(ExternKernelOut)
op752.writes = [StarDep(name='buf752', mode=None)]
op752.unmet_dependencies = [StarDep(name='buf541', mode=None), StarDep(name='buf751', mode=None)]
op752.met_dependencies = []
op752.outputs = [
    buf752: ExternKernelOut
    buf752.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf752.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=True, is_weak=False),
    ]
]
op752.node.kernel = extern_kernels.mm


op753_op754: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op753_op754.writes = 
    [   MemoryDep('buf753', c0, {c0: 115328}, None),
        MemoryDep('buf754', c0, {c0: 14761984}, None)]
op753_op754.unmet_dependencies = 
    [   MemoryDep('buf689', c0, {c0: 14761984}, None),
        MemoryDep('buf749', c0, {c0: 14761984}, None),
        MemoryDep('buf752', c0, {c0: 14761984}, None)]
op753_op754.met_dependencies = []
op753_op754.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf753.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf754.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=True, is_weak=False),
    ]
]
op753_op754.snodes[0] =
op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 115328}, None)]
op753.unmet_dependencies = 
    [   MemoryDep('buf749', c0, {c0: 14761984}, None),
        MemoryDep('buf752', c0, {c0: 14761984}, None)]
op753.met_dependencies = []
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf753.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (115328, 128)
op753.sizes = ([115328], [128])
buf749_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf752_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op753_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf752', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf753', get_index_2, reduction)
        return store_reduction
op753 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op753_op754.snodes[1] =
op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 14761984}, None)]
op754.unmet_dependencies = 
    [   MemoryDep('buf689', c0, {c0: 14761984}, None),
        MemoryDep('buf749', c0, {c0: 14761984}, None),
        MemoryDep('buf752', c0, {c0: 14761984}, None),
        MemoryDep('buf753', c0, {c0: 115328}, None)]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf754.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=True, is_weak=False),
    ]
]
op754.group.device = cuda:0
op754.group.iteration = (14761984, 1)
op754.sizes = ([115328, 128], [])
buf749_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf752_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf689_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf754_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op754_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf752', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf753', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf689', get_index_3)
        add_2 = ops.add(to_dtype_1, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf754', get_index_4, add_2, None)
        return store
op754 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op753_op754 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4, 5))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp16 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp17, xmask)


op755: ExternKernelSchedulerNode(ExternKernelOut)
op755.writes = [StarDep(name='buf755', mode=None)]
op755.unmet_dependencies = [StarDep(name='buf465', mode=None), StarDep(name='buf754', mode=None)]
op755.met_dependencies = []
op755.outputs = [
    buf755: ExternKernelOut
    buf755.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf755.users = [
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op757'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False),
    ]
]
op755.node.kernel = extern_kernels.mm


op756_op757: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op756_op757.writes = 
    [   MemoryDep('buf756', c0, {c0: 14761984}, None),
        MemoryDep('buf757', c0, {c0: 14761984}, None)]
op756_op757.unmet_dependencies = 
    [   MemoryDep('buf755', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf755', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op756_op757.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op756_op757.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False)]
    buf757: ComputedBuffer
    buf757.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf757.users = [NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False)]
]
op756_op757.snodes[0] =
op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 14761984}, None)]
op756.unmet_dependencies = 
    [   MemoryDep('buf755', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op756.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (14761984, 1)
op756.sizes = ([128, 901, 2, 64], [])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf756_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op756_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf756', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op756 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op756_op757.snodes[1] =
op757: SchedulerNode(ComputedBuffer)
op757.writes = [MemoryDep('buf757', c0, {c0: 14761984}, None)]
op757.unmet_dependencies = 
    [   MemoryDep('buf755', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf755', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op757.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op757.outputs = [
    buf757: ComputedBuffer
    buf757.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf757.users = [NodeUser(node=ExternKernelSchedulerNode(name='op758'), can_inplace=False, is_weak=False)]
]
op757.group.device = cuda:0
op757.group.iteration = (14761984, 1)
op757.sizes = ([128, 901, 2, 64], [])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf755_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf757_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op757_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf757', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf755', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op757 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op756_op757 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op758: ExternKernelSchedulerNode(FallbackKernel)
op758.writes = [StarDep(name='buf758', mode=None)]
op758.unmet_dependencies = 
    [   StarDep(name='buf755', mode=None),
        StarDep(name='buf756', mode=None),
        StarDep(name='buf757', mode=None)]
op758.met_dependencies = []
op758.outputs = [
    buf758: FallbackKernel
    buf758.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf758.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op762'), can_inplace=False, is_weak=False),
    ]
]
op758.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op759: ExternKernelSchedulerNode(MultiOutput)
op759.writes = [StarDep(name='buf759', mode=None)]
op759.unmet_dependencies = [StarDep(name='buf758', mode=None)]
op759.met_dependencies = []
op759.outputs = [
    buf759: MultiOutput
    buf759.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf759.users = [NodeUser(node=ExternKernelSchedulerNode(name='op763'), can_inplace=False, is_weak=False)]
]
op759.node.kernel = None


op763: ExternKernelSchedulerNode(ExternKernelOut)
op763.writes = [StarDep(name='buf763', mode=None)]
op763.unmet_dependencies = [StarDep(name='buf475', mode=None), StarDep(name='buf759', mode=None)]
op763.met_dependencies = []
op763.outputs = [
    buf763: ExternKernelOut
    buf763.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf763.users = [
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=True, is_weak=False),
    ]
]
op763.node.kernel = extern_kernels.mm


op764_op765: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op764_op765.writes = 
    [   MemoryDep('buf764', c0, {c0: 115328}, None),
        MemoryDep('buf765', c0, {c0: 14761984}, None)]
op764_op765.unmet_dependencies = 
    [   MemoryDep('buf754', c0, {c0: 14761984}, None),
        MemoryDep('buf763', c0, {c0: 14761984}, None)]
op764_op765.met_dependencies = []
op764_op765.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf764.users = [NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False)]
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf765.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=True, is_weak=False),
    ]
]
op764_op765.snodes[0] =
op764: SchedulerNode(ComputedBuffer)
op764.writes = [MemoryDep('buf764', c0, {c0: 115328}, None)]
op764.unmet_dependencies = 
    [   MemoryDep('buf754', c0, {c0: 14761984}, None),
        MemoryDep('buf763', c0, {c0: 14761984}, None)]
op764.met_dependencies = []
op764.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf764.users = [NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False)]
]
op764.group.device = cuda:0
op764.group.iteration = (115328, 128)
op764.sizes = ([115328], [128])
buf754_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf763_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op764_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf754', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf764', get_index_2, reduction)
        return store_reduction
op764 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op764_op765.snodes[1] =
op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 14761984}, None)]
op765.unmet_dependencies = 
    [   MemoryDep('buf754', c0, {c0: 14761984}, None),
        MemoryDep('buf763', c0, {c0: 14761984}, None),
        MemoryDep('buf764', c0, {c0: 115328}, None)]
op765.met_dependencies = []
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf765.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=True, is_weak=False),
    ]
]
op765.group.device = cuda:0
op765.group.iteration = (14761984, 1)
op765.sizes = ([115328, 128], [])
buf754_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf763_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf765_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op765_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf754', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf763', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf764', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf765', get_index_3, to_dtype_1, None)
        return store
op765 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op764_op765 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op766: ExternKernelSchedulerNode(ExternKernelOut)
op766.writes = [StarDep(name='buf766', mode=None)]
op766.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf765', mode=None)]
op766.met_dependencies = []
op766.outputs = [
    buf766: ExternKernelOut
    buf766.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf766.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op766.node.kernel = extern_kernels.mm


op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 59047936}, None)]
op767.unmet_dependencies = 
    [   MemoryDep('buf766', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf766', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op767.met_dependencies = []
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf767.users = [NodeUser(node=ExternKernelSchedulerNode(name='op768'), can_inplace=False, is_weak=False)]
]
op767.group.device = cuda:0
op767.group.iteration = (59047936, 1)
op767.sizes = ([115328, 512], [])
buf766_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf766_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf767_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op767_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf766', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf766', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf766', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf767', get_index_3, mul_1, None)
        return store
op767 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op768: ExternKernelSchedulerNode(ExternKernelOut)
op768.writes = [StarDep(name='buf768', mode=None)]
op768.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf767', mode=None)]
op768.met_dependencies = []
op768.outputs = [
    buf768: ExternKernelOut
    buf768.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf768.users = [
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=True, is_weak=False),
    ]
]
op768.node.kernel = extern_kernels.mm


op769_op770: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op769_op770.writes = 
    [   MemoryDep('buf769', c0, {c0: 115328}, None),
        MemoryDep('buf770', c0, {c0: 14761984}, None)]
op769_op770.unmet_dependencies = 
    [   MemoryDep('buf765', c0, {c0: 14761984}, None),
        MemoryDep('buf768', c0, {c0: 14761984}, None)]
op769_op770.met_dependencies = []
op769_op770.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf769.users = [NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False)]
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf770.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=True, is_weak=False),
    ]
]
op769_op770.snodes[0] =
op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 115328}, None)]
op769.unmet_dependencies = 
    [   MemoryDep('buf765', c0, {c0: 14761984}, None),
        MemoryDep('buf768', c0, {c0: 14761984}, None)]
op769.met_dependencies = []
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf769.users = [NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False)]
]
op769.group.device = cuda:0
op769.group.iteration = (115328, 128)
op769.sizes = ([115328], [128])
buf765_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf768_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op769_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf765', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf768', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf769', get_index_2, reduction)
        return store_reduction
op769 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op769_op770.snodes[1] =
op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 14761984}, None)]
op770.unmet_dependencies = 
    [   MemoryDep('buf765', c0, {c0: 14761984}, None),
        MemoryDep('buf768', c0, {c0: 14761984}, None),
        MemoryDep('buf769', c0, {c0: 115328}, None)]
op770.met_dependencies = []
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf770.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=True, is_weak=False),
    ]
]
op770.group.device = cuda:0
op770.group.iteration = (14761984, 1)
op770.sizes = ([115328, 128], [])
buf765_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf768_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf770_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op770_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf765', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf768', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf769', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf770', get_index_3, to_dtype_1, None)
        return store
op770 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op769_op770 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op771: ExternKernelSchedulerNode(ExternKernelOut)
op771.writes = [StarDep(name='buf771', mode=None)]
op771.unmet_dependencies = [StarDep(name='buf485', mode=None), StarDep(name='buf770', mode=None)]
op771.met_dependencies = []
op771.outputs = [
    buf771: ExternKernelOut
    buf771.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf771.users = [
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False),
    ]
]
op771.node.kernel = extern_kernels.mm


op772_op773: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op772_op773.writes = 
    [   MemoryDep('buf772', c0, {c0: 14761984}, None),
        MemoryDep('buf773', c0, {c0: 14761984}, None)]
op772_op773.unmet_dependencies = 
    [   MemoryDep('buf771', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf771', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op772_op773.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op772_op773.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf772.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op772_op773.snodes[0] =
op772: SchedulerNode(ComputedBuffer)
op772.writes = [MemoryDep('buf772', c0, {c0: 14761984}, None)]
op772.unmet_dependencies = 
    [   MemoryDep('buf771', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op772.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op772.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf772.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op772.group.device = cuda:0
op772.group.iteration = (14761984, 1)
op772.sizes = ([128, 901, 2, 64], [])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf772_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op772_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf772', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op772 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op772_op773.snodes[1] =
op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 14761984}, None)]
op773.unmet_dependencies = 
    [   MemoryDep('buf771', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf771', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op773.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False)]
]
op773.group.device = cuda:0
op773.group.iteration = (14761984, 1)
op773.sizes = ([128, 901, 2, 64], [])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf771_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf773_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op773_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf773', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf771', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op773 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op772_op773 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op774: ExternKernelSchedulerNode(FallbackKernel)
op774.writes = [StarDep(name='buf774', mode=None)]
op774.unmet_dependencies = 
    [   StarDep(name='buf771', mode=None),
        StarDep(name='buf772', mode=None),
        StarDep(name='buf773', mode=None)]
op774.met_dependencies = []
op774.outputs = [
    buf774: FallbackKernel
    buf774.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf774.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op778'), can_inplace=False, is_weak=False),
    ]
]
op774.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op775: ExternKernelSchedulerNode(MultiOutput)
op775.writes = [StarDep(name='buf775', mode=None)]
op775.unmet_dependencies = [StarDep(name='buf774', mode=None)]
op775.met_dependencies = []
op775.outputs = [
    buf775: MultiOutput
    buf775.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf775.users = [NodeUser(node=ExternKernelSchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op775.node.kernel = None


op779: ExternKernelSchedulerNode(ExternKernelOut)
op779.writes = [StarDep(name='buf779', mode=None)]
op779.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf775', mode=None)]
op779.met_dependencies = []
op779.outputs = [
    buf779: ExternKernelOut
    buf779.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf779.users = [
        NodeUser(node=SchedulerNode(name='op780'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=True, is_weak=False),
    ]
]
op779.node.kernel = extern_kernels.mm


op780_op781: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op780_op781.writes = 
    [   MemoryDep('buf780', c0, {c0: 115328}, None),
        MemoryDep('buf781', c0, {c0: 14761984}, None)]
op780_op781.unmet_dependencies = 
    [   MemoryDep('buf770', c0, {c0: 14761984}, None),
        MemoryDep('buf779', c0, {c0: 14761984}, None)]
op780_op781.met_dependencies = []
op780_op781.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf780.users = [NodeUser(node=SchedulerNode(name='op781'), can_inplace=False, is_weak=False)]
    buf781: ComputedBuffer
    buf781.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf781.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=True, is_weak=False),
    ]
]
op780_op781.snodes[0] =
op780: SchedulerNode(ComputedBuffer)
op780.writes = [MemoryDep('buf780', c0, {c0: 115328}, None)]
op780.unmet_dependencies = 
    [   MemoryDep('buf770', c0, {c0: 14761984}, None),
        MemoryDep('buf779', c0, {c0: 14761984}, None)]
op780.met_dependencies = []
op780.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf780.users = [NodeUser(node=SchedulerNode(name='op781'), can_inplace=False, is_weak=False)]
]
op780.group.device = cuda:0
op780.group.iteration = (115328, 128)
op780.sizes = ([115328], [128])
buf770_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf779_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op780_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf770', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf779', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf780', get_index_2, reduction)
        return store_reduction
op780 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op780_op781.snodes[1] =
op781: SchedulerNode(ComputedBuffer)
op781.writes = [MemoryDep('buf781', c0, {c0: 14761984}, None)]
op781.unmet_dependencies = 
    [   MemoryDep('buf770', c0, {c0: 14761984}, None),
        MemoryDep('buf779', c0, {c0: 14761984}, None),
        MemoryDep('buf780', c0, {c0: 115328}, None)]
op781.met_dependencies = []
op781.outputs = [
    buf781: ComputedBuffer
    buf781.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf781.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=True, is_weak=False),
    ]
]
op781.group.device = cuda:0
op781.group.iteration = (14761984, 1)
op781.sizes = ([115328, 128], [])
buf770_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf779_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf781_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op781_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf770', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf779', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf780', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf781', get_index_3, to_dtype_1, None)
        return store
op781 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op780_op781 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op782: ExternKernelSchedulerNode(ExternKernelOut)
op782.writes = [StarDep(name='buf782', mode=None)]
op782.unmet_dependencies = [StarDep(name='buf498', mode=None), StarDep(name='buf781', mode=None)]
op782.met_dependencies = []
op782.outputs = [
    buf782: ExternKernelOut
    buf782.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf782.users = [NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False)]
]
op782.node.kernel = extern_kernels.mm


op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 59047936}, None)]
op783.unmet_dependencies = 
    [   MemoryDep('buf782', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf782', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op783.met_dependencies = []
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf783.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op783.group.device = cuda:0
op783.group.iteration = (59047936, 1)
op783.sizes = ([115328, 512], [])
buf782_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf782_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf783_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op783_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf782', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf782', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf783', get_index_3, mul_1, None)
        return store
op783 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op784: ExternKernelSchedulerNode(ExternKernelOut)
op784.writes = [StarDep(name='buf784', mode=None)]
op784.unmet_dependencies = [StarDep(name='buf501', mode=None), StarDep(name='buf783', mode=None)]
op784.met_dependencies = []
op784.outputs = [
    buf784: ExternKernelOut
    buf784.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf784.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=True, is_weak=False),
    ]
]
op784.node.kernel = extern_kernels.mm


op785_op786: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op785_op786.writes = 
    [   MemoryDep('buf785', c0, {c0: 115328}, None),
        MemoryDep('buf786', c0, {c0: 14761984}, None)]
op785_op786.unmet_dependencies = 
    [   MemoryDep('buf781', c0, {c0: 14761984}, None),
        MemoryDep('buf784', c0, {c0: 14761984}, None)]
op785_op786.met_dependencies = []
op785_op786.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf785.users = [NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf786.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False),
    ]
]
op785_op786.snodes[0] =
op785: SchedulerNode(ComputedBuffer)
op785.writes = [MemoryDep('buf785', c0, {c0: 115328}, None)]
op785.unmet_dependencies = 
    [   MemoryDep('buf781', c0, {c0: 14761984}, None),
        MemoryDep('buf784', c0, {c0: 14761984}, None)]
op785.met_dependencies = []
op785.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf785.users = [NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False)]
]
op785.group.device = cuda:0
op785.group.iteration = (115328, 128)
op785.sizes = ([115328], [128])
buf781_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf784_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op785_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf781', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf784', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf785', get_index_2, reduction)
        return store_reduction
op785 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op785_op786.snodes[1] =
op786: SchedulerNode(ComputedBuffer)
op786.writes = [MemoryDep('buf786', c0, {c0: 14761984}, None)]
op786.unmet_dependencies = 
    [   MemoryDep('buf781', c0, {c0: 14761984}, None),
        MemoryDep('buf784', c0, {c0: 14761984}, None),
        MemoryDep('buf785', c0, {c0: 115328}, None)]
op786.met_dependencies = []
op786.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf786.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op787'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False),
    ]
]
op786.group.device = cuda:0
op786.group.iteration = (14761984, 1)
op786.sizes = ([115328, 128], [])
buf781_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf784_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf786_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op786_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf781', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf784', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf785', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf786', get_index_3, to_dtype_1, None)
        return store
op786 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op785_op786 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op787: ExternKernelSchedulerNode(ExternKernelOut)
op787.writes = [StarDep(name='buf787', mode=None)]
op787.unmet_dependencies = [StarDep(name='buf505', mode=None), StarDep(name='buf786', mode=None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: ExternKernelOut
    buf787.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf787.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op787.node.kernel = extern_kernels.mm


op788_op789: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op788_op789.writes = 
    [   MemoryDep('buf788', c0, {c0: 14761984}, None),
        MemoryDep('buf789', c0, {c0: 14761984}, None)]
op788_op789.unmet_dependencies = 
    [   MemoryDep('buf787', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf787', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op788_op789.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op788_op789.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf788.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf789.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op788_op789.snodes[0] =
op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', c0, {c0: 14761984}, None)]
op788.unmet_dependencies = 
    [   MemoryDep('buf787', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op788.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf788.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op788.group.device = cuda:0
op788.group.iteration = (14761984, 1)
op788.sizes = ([128, 901, 2, 64], [])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf788_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op788_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf788', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op788 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op788_op789.snodes[1] =
op789: SchedulerNode(ComputedBuffer)
op789.writes = [MemoryDep('buf789', c0, {c0: 14761984}, None)]
op789.unmet_dependencies = 
    [   MemoryDep('buf787', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf787', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op789.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op789.outputs = [
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf789.users = [NodeUser(node=ExternKernelSchedulerNode(name='op790'), can_inplace=False, is_weak=False)]
]
op789.group.device = cuda:0
op789.group.iteration = (14761984, 1)
op789.sizes = ([128, 901, 2, 64], [])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf787_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf789_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op789_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf789', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf787', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op789 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op788_op789 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op790: ExternKernelSchedulerNode(FallbackKernel)
op790.writes = [StarDep(name='buf790', mode=None)]
op790.unmet_dependencies = 
    [   StarDep(name='buf787', mode=None),
        StarDep(name='buf788', mode=None),
        StarDep(name='buf789', mode=None)]
op790.met_dependencies = []
op790.outputs = [
    buf790: FallbackKernel
    buf790.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf790.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op793'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op794'), can_inplace=False, is_weak=False),
    ]
]
op790.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op791: ExternKernelSchedulerNode(MultiOutput)
op791.writes = [StarDep(name='buf791', mode=None)]
op791.unmet_dependencies = [StarDep(name='buf790', mode=None)]
op791.met_dependencies = []
op791.outputs = [
    buf791: MultiOutput
    buf791.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf791.users = [NodeUser(node=ExternKernelSchedulerNode(name='op795'), can_inplace=False, is_weak=False)]
]
op791.node.kernel = None


op795: ExternKernelSchedulerNode(ExternKernelOut)
op795.writes = [StarDep(name='buf795', mode=None)]
op795.unmet_dependencies = [StarDep(name='buf515', mode=None), StarDep(name='buf791', mode=None)]
op795.met_dependencies = []
op795.outputs = [
    buf795: ExternKernelOut
    buf795.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf795.users = [
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=True, is_weak=False),
    ]
]
op795.node.kernel = extern_kernels.mm


op796_op797: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op796_op797.writes = 
    [   MemoryDep('buf796', c0, {c0: 115328}, None),
        MemoryDep('buf797', c0, {c0: 14761984}, None)]
op796_op797.unmet_dependencies = 
    [   MemoryDep('buf786', c0, {c0: 14761984}, None),
        MemoryDep('buf795', c0, {c0: 14761984}, None)]
op796_op797.met_dependencies = []
op796_op797.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf796.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf797.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False),
    ]
]
op796_op797.snodes[0] =
op796: SchedulerNode(ComputedBuffer)
op796.writes = [MemoryDep('buf796', c0, {c0: 115328}, None)]
op796.unmet_dependencies = 
    [   MemoryDep('buf786', c0, {c0: 14761984}, None),
        MemoryDep('buf795', c0, {c0: 14761984}, None)]
op796.met_dependencies = []
op796.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf796.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
]
op796.group.device = cuda:0
op796.group.iteration = (115328, 128)
op796.sizes = ([115328], [128])
buf786_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf795_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op796_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf786', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf795', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf796', get_index_2, reduction)
        return store_reduction
op796 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op796_op797.snodes[1] =
op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 14761984}, None)]
op797.unmet_dependencies = 
    [   MemoryDep('buf786', c0, {c0: 14761984}, None),
        MemoryDep('buf795', c0, {c0: 14761984}, None),
        MemoryDep('buf796', c0, {c0: 115328}, None)]
op797.met_dependencies = []
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf797.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False),
    ]
]
op797.group.device = cuda:0
op797.group.iteration = (14761984, 1)
op797.sizes = ([115328, 128], [])
buf786_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf795_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf797_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op797_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf786', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf795', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf796', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf797', get_index_3, to_dtype_1, None)
        return store
op797 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op796_op797 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op798: ExternKernelSchedulerNode(ExternKernelOut)
op798.writes = [StarDep(name='buf798', mode=None)]
op798.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf797', mode=None)]
op798.met_dependencies = []
op798.outputs = [
    buf798: ExternKernelOut
    buf798.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op798.node.kernel = extern_kernels.mm


op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 59047936}, None)]
op799.unmet_dependencies = 
    [   MemoryDep('buf798', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf798', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op799.met_dependencies = []
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf799.users = [NodeUser(node=ExternKernelSchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op799.group.device = cuda:0
op799.group.iteration = (59047936, 1)
op799.sizes = ([115328, 512], [])
buf798_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf798_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf799_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op799_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf798', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf798', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf799', get_index_3, mul_1, None)
        return store
op799 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op800: ExternKernelSchedulerNode(ExternKernelOut)
op800.writes = [StarDep(name='buf800', mode=None)]
op800.unmet_dependencies = [StarDep(name='buf521', mode=None), StarDep(name='buf799', mode=None)]
op800.met_dependencies = []
op800.outputs = [
    buf800: ExternKernelOut
    buf800.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf800.users = [
        NodeUser(node=SchedulerNode(name='op801'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False),
    ]
]
op800.node.kernel = extern_kernels.mm


op801_op802: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op801_op802.writes = 
    [   MemoryDep('buf801', c0, {c0: 115328}, None),
        MemoryDep('buf802', c0, {c0: 14761984}, None)]
op801_op802.unmet_dependencies = 
    [   MemoryDep('buf797', c0, {c0: 14761984}, None),
        MemoryDep('buf800', c0, {c0: 14761984}, None)]
op801_op802.met_dependencies = []
op801_op802.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf801.users = [NodeUser(node=SchedulerNode(name='op802'), can_inplace=False, is_weak=False)]
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf802.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op812'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=True, is_weak=False),
    ]
]
op801_op802.snodes[0] =
op801: SchedulerNode(ComputedBuffer)
op801.writes = [MemoryDep('buf801', c0, {c0: 115328}, None)]
op801.unmet_dependencies = 
    [   MemoryDep('buf797', c0, {c0: 14761984}, None),
        MemoryDep('buf800', c0, {c0: 14761984}, None)]
op801.met_dependencies = []
op801.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf801.users = [NodeUser(node=SchedulerNode(name='op802'), can_inplace=False, is_weak=False)]
]
op801.group.device = cuda:0
op801.group.iteration = (115328, 128)
op801.sizes = ([115328], [128])
buf797_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf800_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf801_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op801_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf797', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf800', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf801', get_index_2, reduction)
        return store_reduction
op801 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op801_op802.snodes[1] =
op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', c0, {c0: 14761984}, None)]
op802.unmet_dependencies = 
    [   MemoryDep('buf797', c0, {c0: 14761984}, None),
        MemoryDep('buf800', c0, {c0: 14761984}, None),
        MemoryDep('buf801', c0, {c0: 115328}, None)]
op802.met_dependencies = []
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf802.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op812'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=True, is_weak=False),
    ]
]
op802.group.device = cuda:0
op802.group.iteration = (14761984, 1)
op802.sizes = ([115328, 128], [])
buf797_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf800_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf801_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf802_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op802_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf797', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf800', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf801', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf802', get_index_3, to_dtype_1, None)
        return store
op802 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op801_op802 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op803: ExternKernelSchedulerNode(ExternKernelOut)
op803.writes = [StarDep(name='buf803', mode=None)]
op803.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf802', mode=None)]
op803.met_dependencies = []
op803.outputs = [
    buf803: ExternKernelOut
    buf803.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf803.users = [
        NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op805'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op806'), can_inplace=False, is_weak=False),
    ]
]
op803.node.kernel = extern_kernels.mm


op804_op805: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op804_op805.writes = 
    [   MemoryDep('buf804', c0, {c0: 14761984}, None),
        MemoryDep('buf805', c0, {c0: 14761984}, None)]
op804_op805.unmet_dependencies = 
    [   MemoryDep('buf803', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf803', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op804_op805.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op804_op805.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf804.users = [NodeUser(node=ExternKernelSchedulerNode(name='op806'), can_inplace=False, is_weak=False)]
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf805.users = [NodeUser(node=ExternKernelSchedulerNode(name='op806'), can_inplace=False, is_weak=False)]
]
op804_op805.snodes[0] =
op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', c0, {c0: 14761984}, None)]
op804.unmet_dependencies = 
    [   MemoryDep('buf803', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op804.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf804.users = [NodeUser(node=ExternKernelSchedulerNode(name='op806'), can_inplace=False, is_weak=False)]
]
op804.group.device = cuda:0
op804.group.iteration = (14761984, 1)
op804.sizes = ([128, 901, 2, 64], [])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf804_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op804_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf804', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op804 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op804_op805.snodes[1] =
op805: SchedulerNode(ComputedBuffer)
op805.writes = [MemoryDep('buf805', c0, {c0: 14761984}, None)]
op805.unmet_dependencies = 
    [   MemoryDep('buf803', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf803', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op805.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op805.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf805.users = [NodeUser(node=ExternKernelSchedulerNode(name='op806'), can_inplace=False, is_weak=False)]
]
op805.group.device = cuda:0
op805.group.iteration = (14761984, 1)
op805.sizes = ([128, 901, 2, 64], [])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf803_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf805_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op805_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf805', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf803', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op805 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op804_op805 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op806: ExternKernelSchedulerNode(FallbackKernel)
op806.writes = [StarDep(name='buf806', mode=None)]
op806.unmet_dependencies = 
    [   StarDep(name='buf803', mode=None),
        StarDep(name='buf804', mode=None),
        StarDep(name='buf805', mode=None)]
op806.met_dependencies = []
op806.outputs = [
    buf806: FallbackKernel
    buf806.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf806.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op809'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op810'), can_inplace=False, is_weak=False),
    ]
]
op806.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op807: ExternKernelSchedulerNode(MultiOutput)
op807.writes = [StarDep(name='buf807', mode=None)]
op807.unmet_dependencies = [StarDep(name='buf806', mode=None)]
op807.met_dependencies = []
op807.outputs = [
    buf807: MultiOutput
    buf807.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf807.users = [NodeUser(node=ExternKernelSchedulerNode(name='op811'), can_inplace=False, is_weak=False)]
]
op807.node.kernel = None


op811: ExternKernelSchedulerNode(ExternKernelOut)
op811.writes = [StarDep(name='buf811', mode=None)]
op811.unmet_dependencies = [StarDep(name='buf535', mode=None), StarDep(name='buf807', mode=None)]
op811.met_dependencies = []
op811.outputs = [
    buf811: ExternKernelOut
    buf811.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf811.users = [
        NodeUser(node=SchedulerNode(name='op812'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=True, is_weak=False),
    ]
]
op811.node.kernel = extern_kernels.mm


op812_op813: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op812_op813.writes = 
    [   MemoryDep('buf812', c0, {c0: 115328}, None),
        MemoryDep('buf813', c0, {c0: 14761984}, None)]
op812_op813.unmet_dependencies = 
    [   MemoryDep('buf802', c0, {c0: 14761984}, None),
        MemoryDep('buf811', c0, {c0: 14761984}, None)]
op812_op813.met_dependencies = []
op812_op813.outputs = [
    buf812: ComputedBuffer
    buf812.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf812.users = [NodeUser(node=SchedulerNode(name='op813'), can_inplace=False, is_weak=False)]
    buf813: ComputedBuffer
    buf813.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf813.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op812_op813.snodes[0] =
op812: SchedulerNode(ComputedBuffer)
op812.writes = [MemoryDep('buf812', c0, {c0: 115328}, None)]
op812.unmet_dependencies = 
    [   MemoryDep('buf802', c0, {c0: 14761984}, None),
        MemoryDep('buf811', c0, {c0: 14761984}, None)]
op812.met_dependencies = []
op812.outputs = [
    buf812: ComputedBuffer
    buf812.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf812.users = [NodeUser(node=SchedulerNode(name='op813'), can_inplace=False, is_weak=False)]
]
op812.group.device = cuda:0
op812.group.iteration = (115328, 128)
op812.sizes = ([115328], [128])
buf802_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf811_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf812_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op812_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf802', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf811', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf812', get_index_2, reduction)
        return store_reduction
op812 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op812_op813.snodes[1] =
op813: SchedulerNode(ComputedBuffer)
op813.writes = [MemoryDep('buf813', c0, {c0: 14761984}, None)]
op813.unmet_dependencies = 
    [   MemoryDep('buf802', c0, {c0: 14761984}, None),
        MemoryDep('buf811', c0, {c0: 14761984}, None),
        MemoryDep('buf812', c0, {c0: 115328}, None)]
op813.met_dependencies = []
op813.outputs = [
    buf813: ComputedBuffer
    buf813.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf813.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op814'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op813.group.device = cuda:0
op813.group.iteration = (14761984, 1)
op813.sizes = ([115328, 128], [])
buf802_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf811_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf812_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf813_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op813_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf802', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf811', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf812', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf813', get_index_3, to_dtype_1, None)
        return store
op813 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op812_op813 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op814: ExternKernelSchedulerNode(ExternKernelOut)
op814.writes = [StarDep(name='buf814', mode=None)]
op814.unmet_dependencies = [StarDep(name='buf538', mode=None), StarDep(name='buf813', mode=None)]
op814.met_dependencies = []
op814.outputs = [
    buf814: ExternKernelOut
    buf814.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf814.users = [NodeUser(node=SchedulerNode(name='op815'), can_inplace=False, is_weak=False)]
]
op814.node.kernel = extern_kernels.mm


op815: SchedulerNode(ComputedBuffer)
op815.writes = [MemoryDep('buf815', c0, {c0: 59047936}, None)]
op815.unmet_dependencies = 
    [   MemoryDep('buf814', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf814', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op815.met_dependencies = []
op815.outputs = [
    buf815: ComputedBuffer
    buf815.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf815.users = [NodeUser(node=ExternKernelSchedulerNode(name='op816'), can_inplace=False, is_weak=False)]
]
op815.group.device = cuda:0
op815.group.iteration = (59047936, 1)
op815.sizes = ([115328, 512], [])
buf814_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf814_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf815_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op815_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf814', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf814', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf814', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf815', get_index_3, mul_1, None)
        return store
op815 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op816: ExternKernelSchedulerNode(ExternKernelOut)
op816.writes = [StarDep(name='buf816', mode=None)]
op816.unmet_dependencies = [StarDep(name='buf541', mode=None), StarDep(name='buf815', mode=None)]
op816.met_dependencies = []
op816.outputs = [
    buf816: ExternKernelOut
    buf816.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf816.users = [
        NodeUser(node=SchedulerNode(name='op817'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op818'), can_inplace=True, is_weak=False),
    ]
]
op816.node.kernel = extern_kernels.mm


op817_op818: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op817_op818.writes = 
    [   MemoryDep('buf817', c0, {c0: 115328}, None),
        MemoryDep('buf818', c0, {c0: 14761984}, None)]
op817_op818.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 14761984}, None),
        MemoryDep('buf687', c0, {c0: 14761984}, None),
        MemoryDep('buf688', c0, {c0: 115328}, None),
        MemoryDep('buf813', c0, {c0: 14761984}, None),
        MemoryDep('buf816', c0, {c0: 14761984}, None)]
op817_op818.met_dependencies = []
op817_op818.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf817.users = [NodeUser(node=SchedulerNode(name='op818'), can_inplace=False, is_weak=False)]
    buf818: ComputedBuffer
    buf818.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf818.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op829'), can_inplace=True, is_weak=False),
    ]
]
op817_op818.snodes[0] =
op817: SchedulerNode(ComputedBuffer)
op817.writes = [MemoryDep('buf817', c0, {c0: 115328}, None)]
op817.unmet_dependencies = 
    [   MemoryDep('buf813', c0, {c0: 14761984}, None),
        MemoryDep('buf816', c0, {c0: 14761984}, None)]
op817.met_dependencies = []
op817.outputs = [
    buf817: ComputedBuffer
    buf817.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf817.users = [NodeUser(node=SchedulerNode(name='op818'), can_inplace=False, is_weak=False)]
]
op817.group.device = cuda:0
op817.group.iteration = (115328, 128)
op817.sizes = ([115328], [128])
buf813_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf816_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf817_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op817_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf813', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf816', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf817', get_index_2, reduction)
        return store_reduction
op817 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op817_op818.snodes[1] =
op818: SchedulerNode(ComputedBuffer)
op818.writes = [MemoryDep('buf818', c0, {c0: 14761984}, None)]
op818.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 14761984}, None),
        MemoryDep('buf687', c0, {c0: 14761984}, None),
        MemoryDep('buf688', c0, {c0: 115328}, None),
        MemoryDep('buf813', c0, {c0: 14761984}, None),
        MemoryDep('buf816', c0, {c0: 14761984}, None),
        MemoryDep('buf817', c0, {c0: 115328}, None)]
op818.met_dependencies = []
op818.outputs = [
    buf818: ComputedBuffer
    buf818.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf818.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op819'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op829'), can_inplace=True, is_weak=False),
    ]
]
op818.group.device = cuda:0
op818.group.iteration = (14761984, 1)
op818.sizes = ([115328, 128], [])
buf683_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf687_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf813_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf816_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf817_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf818_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op818_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf687', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf688', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf813', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf816', get_index_4)
        add_2 = ops.add(load_3, load_4)
        to_dtype_2 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.bfloat16)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf817', get_index_5)
        constant_2 = ops.constant(128.0, torch.float32)
        truediv_1 = ops.truediv(load_5, constant_2)
        constant_3 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(truediv_1, constant_3)
        rsqrt_1 = ops.rsqrt(add_3)
        mul_1 = ops.mul(to_dtype_2, rsqrt_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.bfloat16, src_dtype = torch.float32)
        add_4 = ops.add(to_dtype_1, to_dtype_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf818', get_index_6, add_4, None)
        return store
op818 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: '*fp32', 6: '*bf16', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x2), None).to(tl.float32)
        tmp13 = tl.load(in_ptr4 + (x2), None).to(tl.float32)
        tmp16 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tmp14 = tmp12 + tmp13
        tmp15 = tmp14.to(tl.float32)
        tmp17 = tmp16 / tmp5
        tmp18 = tmp17 + tmp7
        tmp19 = libdevice.rsqrt(tmp18)
        tmp20 = tmp15 * tmp19
        tmp21 = tmp20.to(tl.float32)
        tmp22 = tmp11 + tmp21
        tl.store(out_ptr0 + (x2), tmp22, None)
op817_op818 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: '*bf16', 4: '*fp32', 5: '*bf16', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp9 = tl.load(in_ptr2 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp10 = tl.load(in_ptr3 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp13 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp11 = tmp9 + tmp10
        tmp12 = tmp11.to(tl.float32)
        tmp14 = 128.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp20 = tmp19.to(tl.float32)
        tmp21 = tmp8 / tmp14
        tmp22 = tmp21 + tmp16
        tmp23 = libdevice.rsqrt(tmp22)
        tmp24 = tmp3 * tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp26 = tmp20 + tmp25
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp26, xmask)


op819: ExternKernelSchedulerNode(ExternKernelOut)
op819.writes = [StarDep(name='buf819', mode=None)]
op819.unmet_dependencies = [StarDep(name='buf609', mode=None), StarDep(name='buf818', mode=None)]
op819.met_dependencies = []
op819.outputs = [
    buf819: ExternKernelOut
    buf819.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf819.users = [
        NodeUser(node=SchedulerNode(name='op820'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op821'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False),
    ]
]
op819.node.kernel = extern_kernels.mm


op820_op821: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op820_op821.writes = 
    [   MemoryDep('buf820', c0, {c0: 14761984}, None),
        MemoryDep('buf821', c0, {c0: 14761984}, None)]
op820_op821.unmet_dependencies = 
    [   MemoryDep('buf819', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf819', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op820_op821.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op820_op821.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf820.users = [NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False)]
    buf821: ComputedBuffer
    buf821.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf821.users = [NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False)]
]
op820_op821.snodes[0] =
op820: SchedulerNode(ComputedBuffer)
op820.writes = [MemoryDep('buf820', c0, {c0: 14761984}, None)]
op820.unmet_dependencies = 
    [   MemoryDep('buf819', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op820.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op820.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf820.users = [NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False)]
]
op820.group.device = cuda:0
op820.group.iteration = (14761984, 1)
op820.sizes = ([128, 901, 2, 64], [])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf820_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op820_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf820', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op820 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op820_op821.snodes[1] =
op821: SchedulerNode(ComputedBuffer)
op821.writes = [MemoryDep('buf821', c0, {c0: 14761984}, None)]
op821.unmet_dependencies = 
    [   MemoryDep('buf819', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf819', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op821.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op821.outputs = [
    buf821: ComputedBuffer
    buf821.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf821.users = [NodeUser(node=ExternKernelSchedulerNode(name='op822'), can_inplace=False, is_weak=False)]
]
op821.group.device = cuda:0
op821.group.iteration = (14761984, 1)
op821.sizes = ([128, 901, 2, 64], [])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf819_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf821_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op821_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf821', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf819', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op821 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op820_op821 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op822: ExternKernelSchedulerNode(FallbackKernel)
op822.writes = [StarDep(name='buf822', mode=None)]
op822.unmet_dependencies = 
    [   StarDep(name='buf819', mode=None),
        StarDep(name='buf820', mode=None),
        StarDep(name='buf821', mode=None)]
op822.met_dependencies = []
op822.outputs = [
    buf822: FallbackKernel
    buf822.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf822.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op823'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op825'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op826'), can_inplace=False, is_weak=False),
    ]
]
op822.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op823: ExternKernelSchedulerNode(MultiOutput)
op823.writes = [StarDep(name='buf823', mode=None)]
op823.unmet_dependencies = [StarDep(name='buf822', mode=None)]
op823.met_dependencies = []
op823.outputs = [
    buf823: MultiOutput
    buf823.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf823.users = [NodeUser(node=ExternKernelSchedulerNode(name='op827'), can_inplace=False, is_weak=False)]
]
op823.node.kernel = None


op827: ExternKernelSchedulerNode(ExternKernelOut)
op827.writes = [StarDep(name='buf827', mode=None)]
op827.unmet_dependencies = [StarDep(name='buf619', mode=None), StarDep(name='buf823', mode=None)]
op827.met_dependencies = []
op827.outputs = [
    buf827: ExternKernelOut
    buf827.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf827.users = [
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op829'), can_inplace=True, is_weak=False),
    ]
]
op827.node.kernel = extern_kernels.mm


op828_op829: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op828_op829.writes = 
    [   MemoryDep('buf828', c0, {c0: 115328}, None),
        MemoryDep('buf829', c0, {c0: 14761984}, None)]
op828_op829.unmet_dependencies = 
    [   MemoryDep('buf818', c0, {c0: 14761984}, None),
        MemoryDep('buf827', c0, {c0: 14761984}, None)]
op828_op829.met_dependencies = []
op828_op829.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf828.users = [NodeUser(node=SchedulerNode(name='op829'), can_inplace=False, is_weak=False)]
    buf829: ComputedBuffer
    buf829.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf829.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op833'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op834'), can_inplace=True, is_weak=False),
    ]
]
op828_op829.snodes[0] =
op828: SchedulerNode(ComputedBuffer)
op828.writes = [MemoryDep('buf828', c0, {c0: 115328}, None)]
op828.unmet_dependencies = 
    [   MemoryDep('buf818', c0, {c0: 14761984}, None),
        MemoryDep('buf827', c0, {c0: 14761984}, None)]
op828.met_dependencies = []
op828.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf828.users = [NodeUser(node=SchedulerNode(name='op829'), can_inplace=False, is_weak=False)]
]
op828.group.device = cuda:0
op828.group.iteration = (115328, 128)
op828.sizes = ([115328], [128])
buf818_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf827_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf828_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op828_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf827', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf828', get_index_2, reduction)
        return store_reduction
op828 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op828_op829.snodes[1] =
op829: SchedulerNode(ComputedBuffer)
op829.writes = [MemoryDep('buf829', c0, {c0: 14761984}, None)]
op829.unmet_dependencies = 
    [   MemoryDep('buf818', c0, {c0: 14761984}, None),
        MemoryDep('buf827', c0, {c0: 14761984}, None),
        MemoryDep('buf828', c0, {c0: 115328}, None)]
op829.met_dependencies = []
op829.outputs = [
    buf829: ComputedBuffer
    buf829.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf829.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op830'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op833'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op834'), can_inplace=True, is_weak=False),
    ]
]
op829.group.device = cuda:0
op829.group.iteration = (14761984, 1)
op829.sizes = ([115328, 128], [])
buf818_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf827_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf828_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf829_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op829_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf827', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf828', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf829', get_index_3, to_dtype_1, None)
        return store
op829 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op828_op829 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op830: ExternKernelSchedulerNode(ExternKernelOut)
op830.writes = [StarDep(name='buf830', mode=None)]
op830.unmet_dependencies = [StarDep(name='buf622', mode=None), StarDep(name='buf829', mode=None)]
op830.met_dependencies = []
op830.outputs = [
    buf830: ExternKernelOut
    buf830.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf830.users = [NodeUser(node=SchedulerNode(name='op831'), can_inplace=False, is_weak=False)]
]
op830.node.kernel = extern_kernels.mm


op831: SchedulerNode(ComputedBuffer)
op831.writes = [MemoryDep('buf831', c0, {c0: 59047936}, None)]
op831.unmet_dependencies = 
    [   MemoryDep('buf830', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf830', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op831.met_dependencies = []
op831.outputs = [
    buf831: ComputedBuffer
    buf831.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf831.users = [NodeUser(node=ExternKernelSchedulerNode(name='op832'), can_inplace=False, is_weak=False)]
]
op831.group.device = cuda:0
op831.group.iteration = (59047936, 1)
op831.sizes = ([115328, 512], [])
buf830_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf830_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf831_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op831_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf830', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf830', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf830', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf831', get_index_3, mul_1, None)
        return store
op831 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op832: ExternKernelSchedulerNode(ExternKernelOut)
op832.writes = [StarDep(name='buf832', mode=None)]
op832.unmet_dependencies = [StarDep(name='buf625', mode=None), StarDep(name='buf831', mode=None)]
op832.met_dependencies = []
op832.outputs = [
    buf832: ExternKernelOut
    buf832.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf832.users = [
        NodeUser(node=SchedulerNode(name='op833'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op834'), can_inplace=True, is_weak=False),
    ]
]
op832.node.kernel = extern_kernels.mm


op833_op834: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op833_op834.writes = 
    [   MemoryDep('buf833', c0, {c0: 115328}, None),
        MemoryDep('buf834', c0, {c0: 14761984}, None)]
op833_op834.unmet_dependencies = 
    [   MemoryDep('buf829', c0, {c0: 14761984}, None),
        MemoryDep('buf832', c0, {c0: 14761984}, None)]
op833_op834.met_dependencies = []
op833_op834.outputs = [
    buf833: ComputedBuffer
    buf833.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf833.users = [NodeUser(node=SchedulerNode(name='op834'), can_inplace=False, is_weak=False)]
    buf834: ComputedBuffer
    buf834.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf834.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op845'), can_inplace=True, is_weak=False),
    ]
]
op833_op834.snodes[0] =
op833: SchedulerNode(ComputedBuffer)
op833.writes = [MemoryDep('buf833', c0, {c0: 115328}, None)]
op833.unmet_dependencies = 
    [   MemoryDep('buf829', c0, {c0: 14761984}, None),
        MemoryDep('buf832', c0, {c0: 14761984}, None)]
op833.met_dependencies = []
op833.outputs = [
    buf833: ComputedBuffer
    buf833.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf833.users = [NodeUser(node=SchedulerNode(name='op834'), can_inplace=False, is_weak=False)]
]
op833.group.device = cuda:0
op833.group.iteration = (115328, 128)
op833.sizes = ([115328], [128])
buf829_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf832_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf833_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op833_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf829', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf832', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf833', get_index_2, reduction)
        return store_reduction
op833 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op833_op834.snodes[1] =
op834: SchedulerNode(ComputedBuffer)
op834.writes = [MemoryDep('buf834', c0, {c0: 14761984}, None)]
op834.unmet_dependencies = 
    [   MemoryDep('buf829', c0, {c0: 14761984}, None),
        MemoryDep('buf832', c0, {c0: 14761984}, None),
        MemoryDep('buf833', c0, {c0: 115328}, None)]
op834.met_dependencies = []
op834.outputs = [
    buf834: ComputedBuffer
    buf834.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf834.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op835'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op845'), can_inplace=True, is_weak=False),
    ]
]
op834.group.device = cuda:0
op834.group.iteration = (14761984, 1)
op834.sizes = ([115328, 128], [])
buf829_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf832_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf833_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf834_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op834_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf829', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf832', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf833', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf834', get_index_3, to_dtype_1, None)
        return store
op834 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op833_op834 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op835: ExternKernelSchedulerNode(ExternKernelOut)
op835.writes = [StarDep(name='buf835', mode=None)]
op835.unmet_dependencies = [StarDep(name='buf629', mode=None), StarDep(name='buf834', mode=None)]
op835.met_dependencies = []
op835.outputs = [
    buf835: ExternKernelOut
    buf835.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf835.users = [
        NodeUser(node=SchedulerNode(name='op836'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op837'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False),
    ]
]
op835.node.kernel = extern_kernels.mm


op836_op837: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op836_op837.writes = 
    [   MemoryDep('buf836', c0, {c0: 14761984}, None),
        MemoryDep('buf837', c0, {c0: 14761984}, None)]
op836_op837.unmet_dependencies = 
    [   MemoryDep('buf835', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf835', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op836_op837.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op836_op837.outputs = [
    buf836: ComputedBuffer
    buf836.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf836.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
    buf837: ComputedBuffer
    buf837.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf837.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
]
op836_op837.snodes[0] =
op836: SchedulerNode(ComputedBuffer)
op836.writes = [MemoryDep('buf836', c0, {c0: 14761984}, None)]
op836.unmet_dependencies = 
    [   MemoryDep('buf835', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op836.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op836.outputs = [
    buf836: ComputedBuffer
    buf836.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf836.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
]
op836.group.device = cuda:0
op836.group.iteration = (14761984, 1)
op836.sizes = ([128, 901, 2, 64], [])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf836_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op836_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf836', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op836 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op836_op837.snodes[1] =
op837: SchedulerNode(ComputedBuffer)
op837.writes = [MemoryDep('buf837', c0, {c0: 14761984}, None)]
op837.unmet_dependencies = 
    [   MemoryDep('buf835', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf835', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op837.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op837.outputs = [
    buf837: ComputedBuffer
    buf837.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf837.users = [NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False)]
]
op837.group.device = cuda:0
op837.group.iteration = (14761984, 1)
op837.sizes = ([128, 901, 2, 64], [])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf835_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf837_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op837_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf837', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf835', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op837 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op836_op837 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op838: ExternKernelSchedulerNode(FallbackKernel)
op838.writes = [StarDep(name='buf838', mode=None)]
op838.unmet_dependencies = 
    [   StarDep(name='buf835', mode=None),
        StarDep(name='buf836', mode=None),
        StarDep(name='buf837', mode=None)]
op838.met_dependencies = []
op838.outputs = [
    buf838: FallbackKernel
    buf838.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf838.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op839'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op840'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op841'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op842'), can_inplace=False, is_weak=False),
    ]
]
op838.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op839: ExternKernelSchedulerNode(MultiOutput)
op839.writes = [StarDep(name='buf839', mode=None)]
op839.unmet_dependencies = [StarDep(name='buf838', mode=None)]
op839.met_dependencies = []
op839.outputs = [
    buf839: MultiOutput
    buf839.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf839.users = [NodeUser(node=ExternKernelSchedulerNode(name='op843'), can_inplace=False, is_weak=False)]
]
op839.node.kernel = None


op843: ExternKernelSchedulerNode(ExternKernelOut)
op843.writes = [StarDep(name='buf843', mode=None)]
op843.unmet_dependencies = [StarDep(name='buf639', mode=None), StarDep(name='buf839', mode=None)]
op843.met_dependencies = []
op843.outputs = [
    buf843: ExternKernelOut
    buf843.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf843.users = [
        NodeUser(node=SchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op845'), can_inplace=True, is_weak=False),
    ]
]
op843.node.kernel = extern_kernels.mm


op844_op845: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op844_op845.writes = 
    [   MemoryDep('buf844', c0, {c0: 115328}, None),
        MemoryDep('buf845', c0, {c0: 14761984}, None)]
op844_op845.unmet_dependencies = 
    [   MemoryDep('buf834', c0, {c0: 14761984}, None),
        MemoryDep('buf843', c0, {c0: 14761984}, None)]
op844_op845.met_dependencies = []
op844_op845.outputs = [
    buf844: ComputedBuffer
    buf844.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf844.users = [NodeUser(node=SchedulerNode(name='op845'), can_inplace=False, is_weak=False)]
    buf845: ComputedBuffer
    buf845.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf845.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op846'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op850'), can_inplace=True, is_weak=False),
    ]
]
op844_op845.snodes[0] =
op844: SchedulerNode(ComputedBuffer)
op844.writes = [MemoryDep('buf844', c0, {c0: 115328}, None)]
op844.unmet_dependencies = 
    [   MemoryDep('buf834', c0, {c0: 14761984}, None),
        MemoryDep('buf843', c0, {c0: 14761984}, None)]
op844.met_dependencies = []
op844.outputs = [
    buf844: ComputedBuffer
    buf844.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf844.users = [NodeUser(node=SchedulerNode(name='op845'), can_inplace=False, is_weak=False)]
]
op844.group.device = cuda:0
op844.group.iteration = (115328, 128)
op844.sizes = ([115328], [128])
buf834_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf843_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf844_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op844_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf834', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf843', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf844', get_index_2, reduction)
        return store_reduction
op844 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op844_op845.snodes[1] =
op845: SchedulerNode(ComputedBuffer)
op845.writes = [MemoryDep('buf845', c0, {c0: 14761984}, None)]
op845.unmet_dependencies = 
    [   MemoryDep('buf834', c0, {c0: 14761984}, None),
        MemoryDep('buf843', c0, {c0: 14761984}, None),
        MemoryDep('buf844', c0, {c0: 115328}, None)]
op845.met_dependencies = []
op845.outputs = [
    buf845: ComputedBuffer
    buf845.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf845.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op846'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op850'), can_inplace=True, is_weak=False),
    ]
]
op845.group.device = cuda:0
op845.group.iteration = (14761984, 1)
op845.sizes = ([115328, 128], [])
buf834_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf843_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf844_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf845_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op845_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf834', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf843', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf844', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf845', get_index_3, to_dtype_1, None)
        return store
op845 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op844_op845 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op846: ExternKernelSchedulerNode(ExternKernelOut)
op846.writes = [StarDep(name='buf846', mode=None)]
op846.unmet_dependencies = [StarDep(name='buf642', mode=None), StarDep(name='buf845', mode=None)]
op846.met_dependencies = []
op846.outputs = [
    buf846: ExternKernelOut
    buf846.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf846.users = [NodeUser(node=SchedulerNode(name='op847'), can_inplace=False, is_weak=False)]
]
op846.node.kernel = extern_kernels.mm


op847: SchedulerNode(ComputedBuffer)
op847.writes = [MemoryDep('buf847', c0, {c0: 59047936}, None)]
op847.unmet_dependencies = 
    [   MemoryDep('buf846', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf846', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op847.met_dependencies = []
op847.outputs = [
    buf847: ComputedBuffer
    buf847.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf847.users = [NodeUser(node=ExternKernelSchedulerNode(name='op848'), can_inplace=False, is_weak=False)]
]
op847.group.device = cuda:0
op847.group.iteration = (59047936, 1)
op847.sizes = ([115328, 512], [])
buf846_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf846_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf847_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op847_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf846', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf846', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf846', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf847', get_index_3, mul_1, None)
        return store
op847 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op848: ExternKernelSchedulerNode(ExternKernelOut)
op848.writes = [StarDep(name='buf848', mode=None)]
op848.unmet_dependencies = [StarDep(name='buf645', mode=None), StarDep(name='buf847', mode=None)]
op848.met_dependencies = []
op848.outputs = [
    buf848: ExternKernelOut
    buf848.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf848.users = [
        NodeUser(node=SchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op850'), can_inplace=True, is_weak=False),
    ]
]
op848.node.kernel = extern_kernels.mm


op849_op850: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op849_op850.writes = 
    [   MemoryDep('buf849', c0, {c0: 115328}, None),
        MemoryDep('buf850', c0, {c0: 14761984}, None)]
op849_op850.unmet_dependencies = 
    [   MemoryDep('buf845', c0, {c0: 14761984}, None),
        MemoryDep('buf848', c0, {c0: 14761984}, None)]
op849_op850.met_dependencies = []
op849_op850.outputs = [
    buf849: ComputedBuffer
    buf849.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf849.users = [NodeUser(node=SchedulerNode(name='op850'), can_inplace=False, is_weak=False)]
    buf850: ComputedBuffer
    buf850.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf850.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op851'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op861'), can_inplace=True, is_weak=False),
    ]
]
op849_op850.snodes[0] =
op849: SchedulerNode(ComputedBuffer)
op849.writes = [MemoryDep('buf849', c0, {c0: 115328}, None)]
op849.unmet_dependencies = 
    [   MemoryDep('buf845', c0, {c0: 14761984}, None),
        MemoryDep('buf848', c0, {c0: 14761984}, None)]
op849.met_dependencies = []
op849.outputs = [
    buf849: ComputedBuffer
    buf849.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf849.users = [NodeUser(node=SchedulerNode(name='op850'), can_inplace=False, is_weak=False)]
]
op849.group.device = cuda:0
op849.group.iteration = (115328, 128)
op849.sizes = ([115328], [128])
buf845_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf848_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf849_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op849_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf845', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf848', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf849', get_index_2, reduction)
        return store_reduction
op849 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op849_op850.snodes[1] =
op850: SchedulerNode(ComputedBuffer)
op850.writes = [MemoryDep('buf850', c0, {c0: 14761984}, None)]
op850.unmet_dependencies = 
    [   MemoryDep('buf845', c0, {c0: 14761984}, None),
        MemoryDep('buf848', c0, {c0: 14761984}, None),
        MemoryDep('buf849', c0, {c0: 115328}, None)]
op850.met_dependencies = []
op850.outputs = [
    buf850: ComputedBuffer
    buf850.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf850.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op851'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op861'), can_inplace=True, is_weak=False),
    ]
]
op850.group.device = cuda:0
op850.group.iteration = (14761984, 1)
op850.sizes = ([115328, 128], [])
buf845_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf848_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf849_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf850_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op850_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf845', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf848', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf849', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf850', get_index_3, to_dtype_1, None)
        return store
op850 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op849_op850 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op851: ExternKernelSchedulerNode(ExternKernelOut)
op851.writes = [StarDep(name='buf851', mode=None)]
op851.unmet_dependencies = [StarDep(name='buf649', mode=None), StarDep(name='buf850', mode=None)]
op851.met_dependencies = []
op851.outputs = [
    buf851: ExternKernelOut
    buf851.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf851.users = [
        NodeUser(node=SchedulerNode(name='op852'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op853'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False),
    ]
]
op851.node.kernel = extern_kernels.mm


op852_op853: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op852_op853.writes = 
    [   MemoryDep('buf852', c0, {c0: 14761984}, None),
        MemoryDep('buf853', c0, {c0: 14761984}, None)]
op852_op853.unmet_dependencies = 
    [   MemoryDep('buf851', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf851', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op852_op853.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op852_op853.outputs = [
    buf852: ComputedBuffer
    buf852.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf852.users = [NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False)]
    buf853: ComputedBuffer
    buf853.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf853.users = [NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False)]
]
op852_op853.snodes[0] =
op852: SchedulerNode(ComputedBuffer)
op852.writes = [MemoryDep('buf852', c0, {c0: 14761984}, None)]
op852.unmet_dependencies = 
    [   MemoryDep('buf851', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op852.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op852.outputs = [
    buf852: ComputedBuffer
    buf852.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf852.users = [NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False)]
]
op852.group.device = cuda:0
op852.group.iteration = (14761984, 1)
op852.sizes = ([128, 901, 2, 64], [])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf852_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op852_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf852', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op852 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op852_op853.snodes[1] =
op853: SchedulerNode(ComputedBuffer)
op853.writes = [MemoryDep('buf853', c0, {c0: 14761984}, None)]
op853.unmet_dependencies = 
    [   MemoryDep('buf851', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf851', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op853.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op853.outputs = [
    buf853: ComputedBuffer
    buf853.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf853.users = [NodeUser(node=ExternKernelSchedulerNode(name='op854'), can_inplace=False, is_weak=False)]
]
op853.group.device = cuda:0
op853.group.iteration = (14761984, 1)
op853.sizes = ([128, 901, 2, 64], [])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf851_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf853_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op853_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf853', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf851', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op853 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op852_op853 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op854: ExternKernelSchedulerNode(FallbackKernel)
op854.writes = [StarDep(name='buf854', mode=None)]
op854.unmet_dependencies = 
    [   StarDep(name='buf851', mode=None),
        StarDep(name='buf852', mode=None),
        StarDep(name='buf853', mode=None)]
op854.met_dependencies = []
op854.outputs = [
    buf854: FallbackKernel
    buf854.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf854.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op855'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op857'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op858'), can_inplace=False, is_weak=False),
    ]
]
op854.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op855: ExternKernelSchedulerNode(MultiOutput)
op855.writes = [StarDep(name='buf855', mode=None)]
op855.unmet_dependencies = [StarDep(name='buf854', mode=None)]
op855.met_dependencies = []
op855.outputs = [
    buf855: MultiOutput
    buf855.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf855.users = [NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False)]
]
op855.node.kernel = None


op859: ExternKernelSchedulerNode(ExternKernelOut)
op859.writes = [StarDep(name='buf859', mode=None)]
op859.unmet_dependencies = [StarDep(name='buf659', mode=None), StarDep(name='buf855', mode=None)]
op859.met_dependencies = []
op859.outputs = [
    buf859: ExternKernelOut
    buf859.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf859.users = [
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op861'), can_inplace=True, is_weak=False),
    ]
]
op859.node.kernel = extern_kernels.mm


op860_op861: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op860_op861.writes = 
    [   MemoryDep('buf860', c0, {c0: 115328}, None),
        MemoryDep('buf861', c0, {c0: 14761984}, None)]
op860_op861.unmet_dependencies = 
    [   MemoryDep('buf850', c0, {c0: 14761984}, None),
        MemoryDep('buf859', c0, {c0: 14761984}, None)]
op860_op861.met_dependencies = []
op860_op861.outputs = [
    buf860: ComputedBuffer
    buf860.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf860.users = [NodeUser(node=SchedulerNode(name='op861'), can_inplace=False, is_weak=False)]
    buf861: ComputedBuffer
    buf861.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf861.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op862'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op866'), can_inplace=True, is_weak=False),
    ]
]
op860_op861.snodes[0] =
op860: SchedulerNode(ComputedBuffer)
op860.writes = [MemoryDep('buf860', c0, {c0: 115328}, None)]
op860.unmet_dependencies = 
    [   MemoryDep('buf850', c0, {c0: 14761984}, None),
        MemoryDep('buf859', c0, {c0: 14761984}, None)]
op860.met_dependencies = []
op860.outputs = [
    buf860: ComputedBuffer
    buf860.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf860.users = [NodeUser(node=SchedulerNode(name='op861'), can_inplace=False, is_weak=False)]
]
op860.group.device = cuda:0
op860.group.iteration = (115328, 128)
op860.sizes = ([115328], [128])
buf850_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf859_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf860_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op860_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf859', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf860', get_index_2, reduction)
        return store_reduction
op860 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op860_op861.snodes[1] =
op861: SchedulerNode(ComputedBuffer)
op861.writes = [MemoryDep('buf861', c0, {c0: 14761984}, None)]
op861.unmet_dependencies = 
    [   MemoryDep('buf850', c0, {c0: 14761984}, None),
        MemoryDep('buf859', c0, {c0: 14761984}, None),
        MemoryDep('buf860', c0, {c0: 115328}, None)]
op861.met_dependencies = []
op861.outputs = [
    buf861: ComputedBuffer
    buf861.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf861.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op862'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op866'), can_inplace=True, is_weak=False),
    ]
]
op861.group.device = cuda:0
op861.group.iteration = (14761984, 1)
op861.sizes = ([115328, 128], [])
buf850_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf859_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf860_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf861_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op861_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf859', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf860', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf861', get_index_3, to_dtype_1, None)
        return store
op861 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op860_op861 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op862: ExternKernelSchedulerNode(ExternKernelOut)
op862.writes = [StarDep(name='buf862', mode=None)]
op862.unmet_dependencies = [StarDep(name='buf662', mode=None), StarDep(name='buf861', mode=None)]
op862.met_dependencies = []
op862.outputs = [
    buf862: ExternKernelOut
    buf862.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf862.users = [NodeUser(node=SchedulerNode(name='op863'), can_inplace=False, is_weak=False)]
]
op862.node.kernel = extern_kernels.mm


op863: SchedulerNode(ComputedBuffer)
op863.writes = [MemoryDep('buf863', c0, {c0: 59047936}, None)]
op863.unmet_dependencies = 
    [   MemoryDep('buf862', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf862', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op863.met_dependencies = []
op863.outputs = [
    buf863: ComputedBuffer
    buf863.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf863.users = [NodeUser(node=ExternKernelSchedulerNode(name='op864'), can_inplace=False, is_weak=False)]
]
op863.group.device = cuda:0
op863.group.iteration = (59047936, 1)
op863.sizes = ([115328, 512], [])
buf862_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf862_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf863_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op863_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf862', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf862', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf862', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf863', get_index_3, mul_1, None)
        return store
op863 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op864: ExternKernelSchedulerNode(ExternKernelOut)
op864.writes = [StarDep(name='buf864', mode=None)]
op864.unmet_dependencies = [StarDep(name='buf665', mode=None), StarDep(name='buf863', mode=None)]
op864.met_dependencies = []
op864.outputs = [
    buf864: ExternKernelOut
    buf864.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf864.users = [
        NodeUser(node=SchedulerNode(name='op865'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op866'), can_inplace=True, is_weak=False),
    ]
]
op864.node.kernel = extern_kernels.mm


op865_op866: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op865_op866.writes = 
    [   MemoryDep('buf865', c0, {c0: 115328}, None),
        MemoryDep('buf866', c0, {c0: 14761984}, None)]
op865_op866.unmet_dependencies = 
    [   MemoryDep('buf861', c0, {c0: 14761984}, None),
        MemoryDep('buf864', c0, {c0: 14761984}, None)]
op865_op866.met_dependencies = []
op865_op866.outputs = [
    buf865: ComputedBuffer
    buf865.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf865.users = [NodeUser(node=SchedulerNode(name='op866'), can_inplace=False, is_weak=False)]
    buf866: ComputedBuffer
    buf866.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf866.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op867'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op876'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op865_op866.snodes[0] =
op865: SchedulerNode(ComputedBuffer)
op865.writes = [MemoryDep('buf865', c0, {c0: 115328}, None)]
op865.unmet_dependencies = 
    [   MemoryDep('buf861', c0, {c0: 14761984}, None),
        MemoryDep('buf864', c0, {c0: 14761984}, None)]
op865.met_dependencies = []
op865.outputs = [
    buf865: ComputedBuffer
    buf865.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf865.users = [NodeUser(node=SchedulerNode(name='op866'), can_inplace=False, is_weak=False)]
]
op865.group.device = cuda:0
op865.group.iteration = (115328, 128)
op865.sizes = ([115328], [128])
buf861_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf864_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf865_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op865_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf864', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf865', get_index_2, reduction)
        return store_reduction
op865 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op865_op866.snodes[1] =
op866: SchedulerNode(ComputedBuffer)
op866.writes = [MemoryDep('buf866', c0, {c0: 14761984}, None)]
op866.unmet_dependencies = 
    [   MemoryDep('buf861', c0, {c0: 14761984}, None),
        MemoryDep('buf864', c0, {c0: 14761984}, None),
        MemoryDep('buf865', c0, {c0: 115328}, None)]
op866.met_dependencies = []
op866.outputs = [
    buf866: ComputedBuffer
    buf866.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf866.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op867'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op876'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op866.group.device = cuda:0
op866.group.iteration = (14761984, 1)
op866.sizes = ([115328, 128], [])
buf861_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf864_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf865_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf866_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op866_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf861', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf864', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf865', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf866', get_index_3, to_dtype_1, None)
        return store
op866 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op865_op866 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op867: ExternKernelSchedulerNode(ExternKernelOut)
op867.writes = [StarDep(name='buf867', mode=None)]
op867.unmet_dependencies = [StarDep(name='buf669', mode=None), StarDep(name='buf866', mode=None)]
op867.met_dependencies = []
op867.outputs = [
    buf867: ExternKernelOut
    buf867.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
    buf867.users = [
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op869'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False),
    ]
]
op867.node.kernel = extern_kernels.mm


op868_op869: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op868_op869.writes = 
    [   MemoryDep('buf868', c0, {c0: 14761984}, None),
        MemoryDep('buf869', c0, {c0: 14761984}, None)]
op868_op869.unmet_dependencies = 
    [   MemoryDep('buf867', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None),
        MemoryDep('buf867', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op868_op869.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op868_op869.outputs = [
    buf868: ComputedBuffer
    buf868.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf868.users = [NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False)]
    buf869: ComputedBuffer
    buf869.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf869.users = [NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False)]
]
op868_op869.snodes[0] =
op868: SchedulerNode(ComputedBuffer)
op868.writes = [MemoryDep('buf868', c0, {c0: 14761984}, None)]
op868.unmet_dependencies = 
    [   MemoryDep('buf867', 384*c0 + 64*c1 + I + 32, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + 64*c1 + I, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + c1, {c0: 115328, c1: 128}, None)]
op868.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op868.outputs = [
    buf868: ComputedBuffer
    buf868.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf868.users = [NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False)]
]
op868.group.device = cuda:0
op868.group.iteration = (14761984, 1)
op868.sizes = ([128, 901, 2, 64], [])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf868_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op868_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 32
    index4 = 345984*z0 + 384*z1 + 64*z2 + I
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf868', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op868 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op868_op869.snodes[1] =
op869: SchedulerNode(ComputedBuffer)
op869.writes = [MemoryDep('buf869', c0, {c0: 14761984}, None)]
op869.unmet_dependencies = 
    [   MemoryDep('buf867', 384*c0 + 64*c1 + I + 128, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + 64*c1 + I + 160, {c0: 115328, c1: 2, c2: 64}, None),
        MemoryDep('buf867', 384*c0 + c1 + 128, {c0: 115328, c1: 128}, None)]
op869.met_dependencies = 
    [   MemoryDep('primals_13', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None),
        MemoryDep('primals_14', 64*c1 + c3, {c0: 128, c1: 901, c2: 2, c3: 64}, None)]
op869.outputs = [
    buf869: ComputedBuffer
    buf869.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf869.users = [NodeUser(node=ExternKernelSchedulerNode(name='op870'), can_inplace=False, is_weak=False)]
]
op869.group.device = cuda:0
op869.group.iteration = (14761984, 1)
op869.sizes = ([128, 901, 2, 64], [])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_13_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
buf867_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 384], stride=[384, 1])
primals_14_layout = FixedLayout('cuda', torch.float32, size=[901, 64], stride=[64, 1])
buf869_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
class op869_loop_body:
    var_ranges = {z0: 128, z1: 901, z2: 2, z3: 64}
    index0 = 345984*z0 + 384*z1 + 64*z2 + z3 + 128
    index1 = 64*z1 + z3
    index2 = z3
    index3 = 345984*z0 + 384*z1 + 64*z2 + I + 160
    index4 = 345984*z0 + 384*z1 + 64*z2 + I + 128
    index5 = 115328*z0 + 128*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_13', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        index_expr = ops.index_expr(get_index_2, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_3 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_3, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_4 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_4, torch.int64)
        constant_2 = ops.constant(32, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_5 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        constant_3 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_6)
        mul_1 = ops.mul(where, load_2)
        add = ops.add(mul, mul_1)
        to_dtype_1 = ops.to_dtype(add, torch.bfloat16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf869', get_index_7, to_dtype_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        neg = ops.neg(to_dtype)
        return neg
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf867', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        return to_dtype
op869 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
op868_op869 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*fp32', 2: '*fp32', 3: '*bf16', 4: '*bf16', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex % 128
        x5 = (xindex // 128)
        x0 = xindex % 64
        x2 = (xindex // 128) % 901
        x1 = (xindex // 64) % 2
        x6 = xindex
        tmp0 = tl.load(in_ptr0 + (x4 + (384*x5)), None).to(tl.float32)
        tmp2 = tl.load(in_ptr1 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr2 + (x0 + (64*x2)), None, eviction_policy='evict_last')
        tmp26 = tl.load(in_ptr0 + (128 + x4 + (384*x5)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp3 = tmp1 * tmp2
        tmp4 = x0
        tmp5 = tl.full([1], 0, tl.int64)
        tmp6 = tmp4 >= tmp5
        tmp7 = tl.full([1], 32, tl.int64)
        tmp8 = tmp4 < tmp7
        tmp9 = tl.load(in_ptr0 + (32 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp10 = tmp9.to(tl.float32)
        tmp11 = -tmp10
        tmp12 = tl.full(tmp11.shape, 0.0, tmp11.dtype)
        tmp13 = tl.where(tmp8, tmp11, tmp12)
        tmp14 = tmp4 >= tmp7
        tmp15 = tl.full([1], 64, tl.int64)
        tmp16 = tmp4 < tmp15
        tmp17 = tl.load(in_ptr0 + ((64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp18 = tmp17.to(tl.float32)
        tmp19 = tl.full(tmp18.shape, 0.0, tmp18.dtype)
        tmp20 = tl.where(tmp14, tmp18, tmp19)
        tmp21 = tl.where(tmp8, tmp13, tmp20)
        tmp23 = tmp21 * tmp22
        tmp24 = tmp3 + tmp23
        tmp25 = tmp24.to(tl.float32)
        tmp27 = tmp26.to(tl.float32)
        tmp28 = tmp27 * tmp2
        tmp29 = tl.load(in_ptr0 + (160 + (64*x1) + (384*x5) + x0), tmp8, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp30 = tmp29.to(tl.float32)
        tmp31 = -tmp30
        tmp32 = tl.full(tmp31.shape, 0.0, tmp31.dtype)
        tmp33 = tl.where(tmp8, tmp31, tmp32)
        tmp34 = tl.load(in_ptr0 + (128 + (64*x1) + (384*x5) + ((-32) + x0)), tmp14, eviction_policy='evict_last', other=0.0).to(tl.float32)
        tmp35 = tmp34.to(tl.float32)
        tmp36 = tl.full(tmp35.shape, 0.0, tmp35.dtype)
        tmp37 = tl.where(tmp14, tmp35, tmp36)
        tmp38 = tl.where(tmp8, tmp33, tmp37)
        tmp39 = tmp38 * tmp22
        tmp40 = tmp28 + tmp39
        tmp41 = tmp40.to(tl.float32)
        tl.store(out_ptr0 + (x6), tmp25, None)
        tl.store(out_ptr1 + (x6), tmp41, None)


op870: ExternKernelSchedulerNode(FallbackKernel)
op870.writes = [StarDep(name='buf870', mode=None)]
op870.unmet_dependencies = 
    [   StarDep(name='buf867', mode=None),
        StarDep(name='buf868', mode=None),
        StarDep(name='buf869', mode=None)]
op870.met_dependencies = []
op870.outputs = [
    buf870: FallbackKernel
    buf870.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf870.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op871'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op872'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op873'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op874'), can_inplace=False, is_weak=False),
    ]
]
op870.node.kernel = torch.ops.flash_attn._flash_attn_forward.default


op871: ExternKernelSchedulerNode(MultiOutput)
op871.writes = [StarDep(name='buf871', mode=None)]
op871.unmet_dependencies = [StarDep(name='buf870', mode=None)]
op871.met_dependencies = []
op871.outputs = [
    buf871: MultiOutput
    buf871.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 2, 64], stride=[115328, 128, 64, 1])
    buf871.users = [NodeUser(node=ExternKernelSchedulerNode(name='op875'), can_inplace=False, is_weak=False)]
]
op871.node.kernel = None


op875: ExternKernelSchedulerNode(ExternKernelOut)
op875.writes = [StarDep(name='buf875', mode=None)]
op875.unmet_dependencies = [StarDep(name='buf679', mode=None), StarDep(name='buf871', mode=None)]
op875.met_dependencies = []
op875.outputs = [
    buf875: ExternKernelOut
    buf875.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf875.users = [
        NodeUser(node=SchedulerNode(name='op876'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op877'), can_inplace=True, is_weak=False),
    ]
]
op875.node.kernel = extern_kernels.mm


op876_op877: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op876_op877.writes = 
    [   MemoryDep('buf876', c0, {c0: 115328}, None),
        MemoryDep('buf877', c0, {c0: 14761984}, None)]
op876_op877.unmet_dependencies = 
    [   MemoryDep('buf866', c0, {c0: 14761984}, None),
        MemoryDep('buf875', c0, {c0: 14761984}, None)]
op876_op877.met_dependencies = []
op876_op877.outputs = [
    buf876: ComputedBuffer
    buf876.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf876.users = [NodeUser(node=SchedulerNode(name='op877'), can_inplace=False, is_weak=False)]
    buf877: ComputedBuffer
    buf877.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf877.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op881'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op882'), can_inplace=True, is_weak=False),
    ]
]
op876_op877.snodes[0] =
op876: SchedulerNode(ComputedBuffer)
op876.writes = [MemoryDep('buf876', c0, {c0: 115328}, None)]
op876.unmet_dependencies = 
    [   MemoryDep('buf866', c0, {c0: 14761984}, None),
        MemoryDep('buf875', c0, {c0: 14761984}, None)]
op876.met_dependencies = []
op876.outputs = [
    buf876: ComputedBuffer
    buf876.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf876.users = [NodeUser(node=SchedulerNode(name='op877'), can_inplace=False, is_weak=False)]
]
op876.group.device = cuda:0
op876.group.iteration = (115328, 128)
op876.sizes = ([115328], [128])
buf866_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf875_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf876_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op876_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf866', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf875', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf876', get_index_2, reduction)
        return store_reduction
op876 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op876_op877.snodes[1] =
op877: SchedulerNode(ComputedBuffer)
op877.writes = [MemoryDep('buf877', c0, {c0: 14761984}, None)]
op877.unmet_dependencies = 
    [   MemoryDep('buf866', c0, {c0: 14761984}, None),
        MemoryDep('buf875', c0, {c0: 14761984}, None),
        MemoryDep('buf876', c0, {c0: 115328}, None)]
op877.met_dependencies = []
op877.outputs = [
    buf877: ComputedBuffer
    buf877.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf877.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op878'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op881'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op882'), can_inplace=True, is_weak=False),
    ]
]
op877.group.device = cuda:0
op877.group.iteration = (14761984, 1)
op877.sizes = ([115328, 128], [])
buf866_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf875_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf876_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf877_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op877_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf866', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf875', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf876', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf877', get_index_3, to_dtype_1, None)
        return store
op877 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op876_op877 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op878: ExternKernelSchedulerNode(ExternKernelOut)
op878.writes = [StarDep(name='buf878', mode=None)]
op878.unmet_dependencies = [StarDep(name='buf682', mode=None), StarDep(name='buf877', mode=None)]
op878.met_dependencies = []
op878.outputs = [
    buf878: ExternKernelOut
    buf878.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
    buf878.users = [NodeUser(node=SchedulerNode(name='op879'), can_inplace=False, is_weak=False)]
]
op878.node.kernel = extern_kernels.mm


op879: SchedulerNode(ComputedBuffer)
op879.writes = [MemoryDep('buf879', c0, {c0: 59047936}, None)]
op879.unmet_dependencies = 
    [   MemoryDep('buf878', 1024*c0 + c1 + 512, {c0: 115328, c1: 512}, None),
        MemoryDep('buf878', 1024*c0 + c1, {c0: 115328, c1: 512}, None)]
op879.met_dependencies = []
op879.outputs = [
    buf879: ComputedBuffer
    buf879.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
    buf879.users = [NodeUser(node=ExternKernelSchedulerNode(name='op880'), can_inplace=False, is_weak=False)]
]
op879.group.device = cuda:0
op879.group.iteration = (59047936, 1)
op879.sizes = ([115328, 512], [])
buf878_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf878_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 1024], stride=[1024, 1])
buf879_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 512], stride=[461312, 512, 1])
class op879_loop_body:
    var_ranges = {z0: 115328, z1: 512}
    index0 = 1024*z0 + z1
    index1 = 1024*z0 + z1 + 512
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf878', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bfloat16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf878', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float32, src_dtype = torch.bfloat16)
        sigmoid = ops.sigmoid(to_dtype_1)
        mul = ops.mul(to_dtype, sigmoid)
        to_dtype_2 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf878', get_index_2)
        mul_1 = ops.mul(to_dtype_2, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf879', get_index_3, mul_1, None)
        return store
op879 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 59047936
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (1024*x1)), None).to(tl.float32)
        tmp5 = tl.load(in_ptr0 + (512 + x0 + (1024*x1)), None).to(tl.float32)
        tmp1 = tmp0.to(tl.float32)
        tmp2 = tl.sigmoid(tmp1)
        tmp3 = tmp1 * tmp2
        tmp4 = tmp3.to(tl.float32)
        tmp6 = tmp4 * tmp5
        tl.store(out_ptr0 + (x2), tmp6, None)


op880: ExternKernelSchedulerNode(ExternKernelOut)
op880.writes = [StarDep(name='buf880', mode=None)]
op880.unmet_dependencies = [StarDep(name='buf685', mode=None), StarDep(name='buf879', mode=None)]
op880.met_dependencies = []
op880.outputs = [
    buf880: ExternKernelOut
    buf880.layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
    buf880.users = [
        NodeUser(node=SchedulerNode(name='op881'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op882'), can_inplace=True, is_weak=False),
    ]
]
op880.node.kernel = extern_kernels.mm


op881_op882: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op881_op882.writes = 
    [   MemoryDep('buf881', c0, {c0: 115328}, None),
        MemoryDep('buf882', c0, {c0: 14761984}, None)]
op881_op882.unmet_dependencies = 
    [   MemoryDep('buf877', c0, {c0: 14761984}, None),
        MemoryDep('buf880', c0, {c0: 14761984}, None)]
op881_op882.met_dependencies = []
op881_op882.outputs = [
    buf881: ComputedBuffer
    buf881.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf881.users = [NodeUser(node=SchedulerNode(name='op882'), can_inplace=False, is_weak=False)]
    buf882: ComputedBuffer
    buf882.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf882.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op881_op882.snodes[0] =
op881: SchedulerNode(ComputedBuffer)
op881.writes = [MemoryDep('buf881', c0, {c0: 115328}, None)]
op881.unmet_dependencies = 
    [   MemoryDep('buf877', c0, {c0: 14761984}, None),
        MemoryDep('buf880', c0, {c0: 14761984}, None)]
op881.met_dependencies = []
op881.outputs = [
    buf881: ComputedBuffer
    buf881.layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
    buf881.users = [NodeUser(node=SchedulerNode(name='op882'), can_inplace=False, is_weak=False)]
]
op881.group.device = cuda:0
op881.group.iteration = (115328, 128)
op881.sizes = ([115328], [128])
buf877_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf880_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf881_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
class op881_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf880', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        mul = ops.mul(to_dtype, to_dtype)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf881', get_index_2, reduction)
        return store_reduction
op881 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp8, xmask)
op881_op882.snodes[1] =
op882: SchedulerNode(ComputedBuffer)
op882.writes = [MemoryDep('buf882', c0, {c0: 14761984}, None)]
op882.unmet_dependencies = 
    [   MemoryDep('buf877', c0, {c0: 14761984}, None),
        MemoryDep('buf880', c0, {c0: 14761984}, None),
        MemoryDep('buf881', c0, {c0: 115328}, None)]
op882.met_dependencies = []
op882.outputs = [
    buf882: ComputedBuffer
    buf882.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
    buf882.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op882.group.device = cuda:0
op882.group.iteration = (14761984, 1)
op882.sizes = ([115328, 128], [])
buf877_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
buf880_layout = FixedLayout('cuda', torch.bfloat16, size=[115328, 128], stride=[128, 1])
buf881_layout = FixedLayout('cuda', torch.float32, size=[128, 901, 1], stride=[901, 1, 115328])
buf882_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 901, 128], stride=[115328, 128, 1])
class op882_loop_body:
    var_ranges = {z0: 115328, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf880', get_index_1)
        add = ops.add(load, load_1)
        to_dtype = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf881', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(to_dtype, rsqrt)
        to_dtype_1 = ops.to_dtype(mul, torch.bfloat16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf882', get_index_3, to_dtype_1, None)
        return store
op882 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*fp32', 3: '*bf16', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 14761984
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (x2), None).to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp5 = 128.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-05
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp10.to(tl.float32)
        tl.store(out_ptr0 + (x2), tmp11, None)
op881_op882 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*bf16', 1: '*bf16', 2: '*bf16', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3, 4))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 115328
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp1 = tl.load(in_ptr1 + (r1 + (128*x0)), xmask, other=0.0).to(tl.float32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2.to(tl.float32)
        tmp4 = tmp3 * tmp3
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = tl.where(xmask, tmp5, 0)
        tmp8 = tl.sum(tmp7, 1)[:, None]
        tmp9 = 128.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-05
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp3 * tmp13
        tmp15 = tmp14.to(tl.float32)
        tl.store(out_ptr1 + (r1 + (128*x0)), tmp15, xmask)


op883: SchedulerNode(ComputedBuffer)
op883.writes = [MemoryDep('buf883', c0, {c0: 256}, None)]
op883.unmet_dependencies = []
op883.met_dependencies = [MemoryDep('primals_52', c0, {c0: 256}, None)]
op883.outputs = [
    buf883: ComputedBuffer
    buf883.layout = FixedLayout('cuda', torch.bfloat16, size=[2, 128], stride=[128, 1])
    buf883.users = [NodeUser(node=ExternKernelSchedulerNode(name='op884'), can_inplace=False, is_weak=False)]
]
op883.group.device = cuda:0
op883.group.iteration = (256, 1)
op883.sizes = ([256], [])
primals_52_layout = FixedLayout('cuda', torch.float32, size=[2, 128], stride=[128, 1])
buf883_layout = FixedLayout('cuda', torch.bfloat16, size=[2, 128], stride=[128, 1])
class op883_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_52', get_index)
        to_dtype = ops.to_dtype(load, torch.bfloat16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf883', get_index_1, to_dtype, None)
        return store
op883 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[256], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*bf16', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 256
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tmp0.to(tl.float32)
        tl.store(out_ptr0 + (x0), tmp1, xmask)


op884: ExternKernelSchedulerNode(ExternKernelOut)
op884.writes = [StarDep(name='buf884', mode=None)]
op884.unmet_dependencies = [StarDep(name='buf882', mode=None), StarDep(name='buf883', mode=None)]
op884.met_dependencies = []
op884.outputs = [
    buf884: ExternKernelOut
    buf884.layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[2, 1])
    buf884.users = [NodeUser(node=SchedulerNode(name='op885'), can_inplace=False, is_weak=False)]
]
op884.node.kernel = extern_kernels.mm


op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.writes = 
    [   MemoryDep('buf460', c0, {c0: 128}, None),
        MemoryDep('buf462', c0, {c0: 128}, None),
        MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf885', c0, {c0: 128}, None),
        MemoryDep('buf891', c0, {c0: 128}, None),
        MemoryDep('buf892', 0, {}, None),
        MemoryDep('buf894', 0, {}, None),
        MemoryDep('buf895', 0, {}, None),
        MemoryDep('buf896', 0, {}, None),
        MemoryDep('buf897', 0, {}, None),
        MemoryDep('buf904', 0, {}, None),
        MemoryDep('buf905', 0, {}, None),
        MemoryDep('buf906', 0, {}, None),
        MemoryDep('buf907', c0, {c0: 128}, None),
        MemoryDep('buf912', 0, {}, None)]
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf459', 2*c0, {c0: 128}, None),
        MemoryDep('buf461', 0, {}, None),
        MemoryDep('buf461', 1, {}, None),
        MemoryDep('buf884', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf884', 2*c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf890', c0, {c0: 128}, None),
        MemoryDep('buf893', c0, {c0: 128}, None)]
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_53', 0, {}, None),
        MemoryDep('primals_53', 1, {}, None),
        MemoryDep('primals_6', c0, {c0: 128}, None)]
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
    buf460.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op885'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op892'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op906'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf885: ComputedBuffer
    buf885.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf885.users = [
        NodeUser(node=SchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf907: ComputedBuffer
    buf907.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf907.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf891: ComputedBuffer
    buf891.layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
    buf891.users = [
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf892: ComputedBuffer
    buf892.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf892.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf894: ComputedBuffer
    buf894.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf894.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf895: ComputedBuffer
    buf895.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf895.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf896: ComputedBuffer
    buf896.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf896.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf897: ComputedBuffer
    buf897.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf897.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
    buf904: ComputedBuffer
    buf904.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf904.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf906: ComputedBuffer
    buf906.layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
    buf906.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=True, is_weak=False)]
    buf905: ComputedBuffer
    buf905.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf905.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf912: ComputedBuffer
    buf912.layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
    buf912.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[0] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 128}, None)]
op460.unmet_dependencies = []
op460.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 128}, None),
        MemoryDep('primals_6', c0, {c0: 128}, None)]
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
    buf460.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op885'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op460.group.device = cuda:0
op460.group.iteration = (128, 1)
op460.sizes = ([128], [])
primals_1_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
primals_6_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf460_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
class op460_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_6', get_index_1)
        constant = ops.constant(0, torch.int32)
        where = ops.where(load, constant, load_1)
        constant_1 = ops.constant(1, torch.int32)
        add = ops.add(where, constant_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf460', get_index_2, add, None)
        return store
op460 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i32', 2: '*i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tl.full([1], 0, tl.int32)
        tmp3 = tl.where(tmp0, tmp2, tmp1)
        tmp4 = tl.full([1], 1, tl.int32)
        tmp5 = tmp3 + tmp4
        tl.store(out_ptr0 + (x0), tmp5, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[1] =
op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 128}, None)]
op462.unmet_dependencies = [MemoryDep('buf461', 0, {}, None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (128, 1)
op462.sizes = ([128], [])
buf461_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
class op462_loop_body:
    var_ranges = {z0: 128}
    index0 = 0
    index1 = z0
    def body(self, ops):
        load_seed = ops.load_seed('buf461', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf462', get_index_1, rand, None)
        return store
op462 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, load_seed_offset, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + load_seed_offset)
        tmp1 = x0
        tmp2 = tl.rand(tmp0, (tmp1).to(tl.uint32))
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[2] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 128}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf459', 2*c0, {c0: 128}, None),
        MemoryDep('buf460', c0, {c0: 128}, None),
        MemoryDep('buf461', 1, {}, None),
        MemoryDep('buf462', c0, {c0: 128}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op892'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op894'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op897'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op906'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op463.group.device = cuda:0
op463.group.iteration = (128, 1)
op463.sizes = ([128], [])
buf460_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf461_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
class op463_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 2*z0
    index2 = 2*z0 + 1
    index3 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        constant = ops.constant(16, torch.int32)
        ge = ops.ge(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf459', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf459', get_index_2)
        gt = ops.gt(load_1, load_2)
        bitwise_or = ops.bitwise_or(ge, gt)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf460', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf462', get_index_4)
        constant_1 = ops.constant(0.1, torch.float32)
        lt = ops.lt(load_4, constant_1)
        to_dtype = ops.to_dtype(lt, torch.int32, src_dtype = torch.bool)
        load_seed = ops.load_seed('buf461', 1)
        get_index_5 = self.get_index('index0')
        index_expr = ops.index_expr(get_index_5, torch.int32)
        constant_2 = ops.constant(2, torch.int64)
        constant_3 = ops.constant(17, torch.int64)
        randint64 = ops.randint64(load_seed, index_expr, constant_2, constant_3)
        to_dtype_1 = ops.to_dtype(randint64, torch.int32, src_dtype = torch.int64)
        mul = ops.mul(to_dtype, to_dtype_1)
        ge_1 = ops.ge(load_3, mul)
        bitwise_and = ops.bitwise_and(bitwise_or, ge_1)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf463', get_index_6, bitwise_and, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*fp32', 2: '*fp32', 3: '*i64', 4: '*i1', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {5: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,), ids_of_folded_args=(5,), divisible_by_8=(6,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, load_seed_offset, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp3 = tl.load(in_ptr1 + (2*x0), xmask, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr1 + (1 + (2*x0)), xmask, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x0), xmask)
        tmp1 = tl.full([1], 16, tl.int32)
        tmp2 = tmp0 >= tmp1
        tmp5 = tmp3 > tmp4
        tmp6 = tmp2 | tmp5
        tmp8 = 0.1
        tmp9 = tmp7 < tmp8
        tmp10 = tmp9.to(tl.int32)
        tmp11 = tl.load(in_ptr3 + load_seed_offset)
        tmp12 = x0
        tmp13 = tl.full([1], 2, tl.int64)
        tmp14 = tl.full([1], 17, tl.int64)
        tmp15 = triton_helpers.randint64(tmp11, (tmp12).to(tl.uint32), tmp13, tmp14)
        tmp16 = tmp15.to(tl.int32)
        tmp17 = tmp10 * tmp16
        tmp18 = tmp0 >= tmp17
        tmp19 = tmp6 & tmp18
        tl.store(out_ptr0 + (x0), tmp19, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[3] =
op885: SchedulerNode(ComputedBuffer)
op885.writes = [MemoryDep('buf885', c0, {c0: 128}, None)]
op885.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 128}, None),
        MemoryDep('buf884', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf884', 2*c0, {c0: 128}, None)]
op885.met_dependencies = [MemoryDep('primals_53', 0, {}, None), MemoryDep('primals_53', 1, {}, None)]
op885.outputs = [
    buf885: ComputedBuffer
    buf885.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf885.users = [
        NodeUser(node=SchedulerNode(name='op905'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op907'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op885.group.device = cuda:0
op885.group.iteration = (128, 1)
op885.sizes = ([128], [])
buf460_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf884_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[2, 1])
primals_53_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf884_layout = FixedLayout('cuda', torch.bfloat16, size=[128, 2], stride=[2, 1])
primals_53_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf885_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
class op885_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 2*z0
    index2 = 0
    index3 = 2*z0 + 1
    index4 = 1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        constant = ops.constant(16, torch.int32)
        ge = ops.ge(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf884', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_53', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.bfloat16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.bfloat16)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf884', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_53', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.bfloat16, src_dtype = torch.float32)
        add_1 = ops.add(load_3, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.bfloat16)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf884', get_index_5)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('primals_53', get_index_6)
        to_dtype_4 = ops.to_dtype(load_6, torch.bfloat16, src_dtype = torch.float32)
        add_2 = ops.add(load_5, to_dtype_4)
        to_dtype_5 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.bfloat16)
        maximum = ops.maximum(to_dtype_3, to_dtype_5)
        where = ops.where(ge, to_dtype_1, maximum)
        sigmoid = ops.sigmoid(where)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf885', get_index_7, sigmoid, None)
        return store
op885 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*bf16', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp3 = tl.load(in_ptr1 + (2*x0), xmask, eviction_policy='evict_last').to(tl.float32)
        tmp4 = tl.load(in_ptr2 + (0))
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK])
        tmp9 = tl.load(in_ptr1 + (1 + (2*x0)), xmask, eviction_policy='evict_last').to(tl.float32)
        tmp10 = tl.load(in_ptr2 + (1))
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
        tmp1 = tl.full([1], 16, tl.int32)
        tmp2 = tmp0 >= tmp1
        tmp6 = tmp5.to(tl.float32)
        tmp7 = tmp3 + tmp6
        tmp8 = tmp7.to(tl.float32)
        tmp12 = tmp11.to(tl.float32)
        tmp13 = tmp9 + tmp12
        tmp14 = tmp13.to(tl.float32)
        tmp15 = triton_helpers.maximum(tmp8, tmp14)
        tmp16 = tl.where(tmp2, tmp8, tmp15)
        tmp17 = tl.sigmoid(tmp16)
        tl.store(out_ptr0 + (x0), tmp17, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[4] =
op907: SchedulerNode(ComputedBuffer)
op907.writes = [MemoryDep('buf907', c0, {c0: 128}, None)]
op907.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf885', c0, {c0: 128}, None)]
op907.met_dependencies = []
op907.outputs = [
    buf907: ComputedBuffer
    buf907.layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
    buf907.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op907.group.device = cuda:0
op907.group.iteration = (128, 1)
op907.sizes = ([128], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf885_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf907_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
class op907_loop_body:
    var_ranges = {z0: 128}
    index0 = 2*z0 + 1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf885', get_index_1)
        sub = ops.sub(sigmoid, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf907', get_index_2, sub, None)
        return store
op907 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (1 + (2*x0)), xmask, eviction_policy='evict_last')
        tmp2 = tl.load(in_ptr1 + (x0), xmask)
        tmp1 = tl.sigmoid(tmp0)
        tmp3 = tmp1 - tmp2
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[5] =
op891: SchedulerNode(ComputedBuffer)
op891.writes = [MemoryDep('buf891', c0, {c0: 128}, None)]
op891.unmet_dependencies = 
    [   MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf890', c0, {c0: 128}, None)]
op891.met_dependencies = []
op891.outputs = [
    buf891: ComputedBuffer
    buf891.layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
    buf891.users = [
        NodeUser(node=SchedulerNode(name='op895'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op896'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op904'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op891.group.device = cuda:0
op891.group.iteration = (128, 1)
op891.sizes = ([128], [])
buf890_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf891_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
class op891_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf890', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        eq = ops.eq(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf891', get_index_2, eq, None)
        return store
op891 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[128], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: '*i1', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), xmask)
        tmp1 = tl.load(in_ptr1 + (x0), xmask)
        tmp2 = tmp0 == tmp1
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[6] =
op892: SchedulerNode(ComputedBuffer)
op892.writes = [MemoryDep('buf892', 0, {}, None)]
op892.unmet_dependencies = 
    [   MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None)]
op892.met_dependencies = []
op892.outputs = [
    buf892: ComputedBuffer
    buf892.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf892.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op892.group.device = cuda:0
op892.group.iteration = (1, 128)
op892.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf892_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op892_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(load_1, constant)
        bitwise_and = ops.bitwise_and(load, gt)
        to_dtype = ops.to_dtype(bitwise_and, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf892', get_index_2, reduction)
        return store_reduction
op892 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i64', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {3: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 4), equal_to_1=(3,), ids_of_folded_args=(3,), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r0), None)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp0 & tmp3
        tmp5 = tmp4.to(tl.int64)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp8, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[7] =
op894: SchedulerNode(ComputedBuffer)
op894.writes = [MemoryDep('buf894', 0, {}, None)]
op894.unmet_dependencies = 
    [   MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf893', c0, {c0: 128}, None)]
op894.met_dependencies = []
op894.outputs = [
    buf894: ComputedBuffer
    buf894.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf894.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op894.group.device = cuda:0
op894.group.iteration = (1, 128)
op894.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf893_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf894_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op894_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(load_1, constant)
        bitwise_and = ops.bitwise_and(load, gt)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf893', get_index_2)
        constant_1 = ops.constant(0.0, torch.float32)
        where = ops.where(bitwise_and, load_2, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf894', get_index_3, reduction)
        return store_reduction
op894 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {4: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 5), equal_to_1=(4,), ids_of_folded_args=(4,), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r0), None)
        tmp5 = tl.load(in_ptr2 + (r0), None)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp0 & tmp3
        tmp6 = 0.0
        tmp7 = tl.where(tmp4, tmp5, tmp6)
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp10, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[8] =
op895: SchedulerNode(ComputedBuffer)
op895.writes = [MemoryDep('buf895', 0, {}, None)]
op895.unmet_dependencies = 
    [   MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf891', c0, {c0: 128}, None)]
op895.met_dependencies = []
op895.outputs = [
    buf895: ComputedBuffer
    buf895.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf895.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op895.group.device = cuda:0
op895.group.iteration = (1, 128)
op895.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf891_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf895_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op895_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(load_1, constant)
        bitwise_and = ops.bitwise_and(load, gt)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf891', get_index_2)
        bitwise_and_1 = ops.bitwise_and(bitwise_and, load_2)
        to_dtype = ops.to_dtype(bitwise_and_1, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf895', get_index_3, reduction)
        return store_reduction
op895 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i1', 3: '*i64', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {4: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 5), equal_to_1=(4,), ids_of_folded_args=(4,), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r0), None)
        tmp5 = tl.load(in_ptr2 + (r0), None).to(tl.int1)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp0 & tmp3
        tmp6 = tmp4 & tmp5
        tmp7 = tmp6.to(tl.int64)
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp10, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[9] =
op896: SchedulerNode(ComputedBuffer)
op896.writes = [MemoryDep('buf896', 0, {}, None)]
op896.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0, {c0: 128}, None),
        MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None),
        MemoryDep('buf891', c0, {c0: 128}, None)]
op896.met_dependencies = []
op896.outputs = [
    buf896: ComputedBuffer
    buf896.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf896.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op896.group.device = cuda:0
op896.group.iteration = (1, 128)
op896.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf891_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf896_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op896_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 2*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(load_1, constant)
        bitwise_and = ops.bitwise_and(load, gt)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf459', get_index_2)
        constant_1 = ops.constant(0.0, torch.float32)
        ge = ops.ge(load_2, constant_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf891', get_index_3)
        eq = ops.eq(ge, load_3)
        bitwise_and_1 = ops.bitwise_and(bitwise_and, eq)
        to_dtype = ops.to_dtype(bitwise_and_1, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf896', get_index_4, reduction)
        return store_reduction
op896 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*fp32', 3: '*i1', 4: '*i64', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {5: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,), ids_of_folded_args=(5,), divisible_by_8=(6,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r0), None)
        tmp5 = tl.load(in_ptr2 + (2*r0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (r0), None).to(tl.int1)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp0 & tmp3
        tmp6 = 0.0
        tmp7 = tmp5 >= tmp6
        tmp9 = tmp7 == tmp8
        tmp10 = tmp4 & tmp9
        tmp11 = tmp10.to(tl.int64)
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = tl.sum(tmp12, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp14, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[10] =
op897: SchedulerNode(ComputedBuffer)
op897.writes = [MemoryDep('buf897', 0, {}, None)]
op897.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 128}, None),
        MemoryDep('buf463', c0, {c0: 128}, None),
        MemoryDep('buf887', c0, {c0: 128}, None)]
op897.met_dependencies = []
op897.outputs = [
    buf897: ComputedBuffer
    buf897.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf897.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op897.group.device = cuda:0
op897.group.iteration = (1, 128)
op897.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf887_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf460_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
buf897_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op897_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf887', get_index_1)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(load_1, constant)
        bitwise_and = ops.bitwise_and(load, gt)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf460', get_index_2)
        constant_1 = ops.constant(0, torch.int32)
        where = ops.where(bitwise_and, load_2, constant_1)
        to_dtype = ops.to_dtype(where, torch.int64, src_dtype = torch.int32)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf897', get_index_3, reduction)
        return store_reduction
op897 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i32', 3: '*i64', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {4: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 5), equal_to_1=(4,), ids_of_folded_args=(4,), divisible_by_8=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tl.load(in_ptr1 + (r0), None)
        tmp5 = tl.load(in_ptr2 + (r0), None)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp0 & tmp3
        tmp6 = tl.full([1, 1], 0, tl.int32)
        tmp7 = tl.where(tmp4, tmp5, tmp6)
        tmp8 = tmp7.to(tl.int64)
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
        tmp11 = tl.sum(tmp9, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp11, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[11] =
op904: SchedulerNode(ComputedBuffer)
op904.writes = [MemoryDep('buf904', 0, {}, None)]
op904.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0, {c0: 128}, None),
        MemoryDep('buf891', c0, {c0: 128}, None)]
op904.met_dependencies = []
op904.outputs = [
    buf904: ComputedBuffer
    buf904.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf904.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op904.group.device = cuda:0
op904.group.iteration = (1, 128)
op904.sizes = ([], [128])
buf891_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf904_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op904_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 2*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf891', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.bool)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, to_dtype)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf459', get_index_1)
        mul = ops.mul(sub, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf459', get_index_2)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf459', get_index_3)
        abs_1 = ops.abs(load_3)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub_1 = ops.sub(minimum, log1p)
        sub_2 = ops.sub(mul, sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_2)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf904', get_index_4, reduction)
        return store_reduction
op904 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {3: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 4), equal_to_1=(3,), ids_of_folded_args=(3,), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp4 = tl.load(in_ptr1 + (2*r0), None, eviction_policy='evict_last')
        tmp1 = tmp0.to(tl.float32)
        tmp2 = 1.0
        tmp3 = tmp2 - tmp1
        tmp5 = tmp3 * tmp4
        tmp6 = 0.0
        tmp7 = triton_helpers.minimum(tmp6, tmp4)
        tmp8 = tl_math.abs(tmp4)
        tmp9 = -tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = libdevice.log1p(tmp10)
        tmp12 = tmp7 - tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
        tmp16 = tl.sum(tmp14, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp16, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[12] =
op906: SchedulerNode(ComputedBuffer)
op906.writes = [MemoryDep('buf906', 0, {}, None)]
op906.unmet_dependencies = [MemoryDep('buf463', c0, {c0: 128}, None)]
op906.met_dependencies = []
op906.outputs = [
    buf906: ComputedBuffer
    buf906.layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
    buf906.users = [NodeUser(node=SchedulerNode(name='op912'), can_inplace=True, is_weak=False)]
]
op906.group.device = cuda:0
op906.group.iteration = (1, 128)
op906.sizes = ([], [128])
buf463_layout = FixedLayout('cuda', torch.bool, size=[128], stride=[1])
buf906_layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
class op906_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        logical_not = ops.logical_not(load)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', logical_not)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf906', get_index_1, reduction)
        return store_reduction
op906 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i1', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {2: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,), ids_of_folded_args=(2,), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None).to(tl.int1)
        tmp1 = tmp0 == 0
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        tmp4 = triton_helpers.any(tmp2, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp4, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[13] =
op905: SchedulerNode(ComputedBuffer)
op905.writes = [MemoryDep('buf905', 0, {}, None)]
op905.unmet_dependencies = 
    [   MemoryDep('buf459', 2*c0 + 1, {c0: 128}, None),
        MemoryDep('buf885', c0, {c0: 128}, None)]
op905.met_dependencies = []
op905.outputs = [
    buf905: ComputedBuffer
    buf905.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf905.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op905.group.device = cuda:0
op905.group.iteration = (1, 128)
op905.sizes = ([], [128])
buf885_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 2], stride=[2, 1])
buf905_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op905_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 2*z0 + 1
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf885', get_index)
        constant = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant, load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf459', get_index_1)
        mul = ops.mul(sub, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf459', get_index_2)
        constant_1 = ops.constant(0.0, torch.float32)
        minimum = ops.minimum(constant_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf459', get_index_3)
        abs_1 = ops.abs(load_3)
        neg = ops.neg(abs_1)
        exp = ops.exp(neg)
        log1p = ops.log1p(exp)
        sub_1 = ops.sub(minimum, log1p)
        sub_2 = ops.sub(mul, sub_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', sub_2)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf905', get_index_4, reduction)
        return store_reduction
op905 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {3: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 4), equal_to_1=(3,), ids_of_folded_args=(3,), divisible_by_8=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp3 = tl.load(in_ptr1 + (1 + (2*r0)), None, eviction_policy='evict_last')
        tmp1 = 1.0
        tmp2 = tmp1 - tmp0
        tmp4 = tmp2 * tmp3
        tmp5 = 0.0
        tmp6 = triton_helpers.minimum(tmp5, tmp3)
        tmp7 = tl_math.abs(tmp3)
        tmp8 = -tmp7
        tmp9 = tl_math.exp(tmp8)
        tmp10 = libdevice.log1p(tmp9)
        tmp11 = tmp6 - tmp10
        tmp12 = tmp4 - tmp11
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp15, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912.snodes[14] =
op912: SchedulerNode(ComputedBuffer)
op912.writes = [MemoryDep('buf912', 0, {}, None)]
op912.unmet_dependencies = [MemoryDep('buf906', 0, {}, None)]
op912.met_dependencies = []
op912.outputs = [
    buf912: ComputedBuffer
    buf912.layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
    buf912.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op912.group.device = cuda:0
op912.group.iteration = (1, 1)
op912.sizes = ([], [])
buf906_layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
buf912_layout = FixedLayout('cuda', torch.bool, size=[], stride=[])
class op912_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf906', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf912', get_index_1, logical_not, None)
        return store
op912 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {1: 1}, 'configs': [instance_descriptor(divisible_by_16=(0,), equal_to_1=(1,), ids_of_folded_args=(1,), divisible_by_8=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0)).to(tl.int1)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tmp1 == 0
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp2, None)
op460_op462_op463_op885_op907_op891_op892_op894_op895_op896_op897_op904_op906_op905_op912 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i1', 2: '*i32', 3: '*i64', 4: '*fp32', 5: '*bf16', 6: '*fp32', 7: '*i64', 8: '*i64', 9: '*fp32', 10: '*i32', 11: '*i1', 12: '*fp32', 13: '*fp32', 14: '*i1', 15: '*i64', 16: '*fp32', 17: '*i64', 18: '*i64', 19: '*i64', 20: '*fp32', 21: '*fp32', 22: 'i32', 23: 'i32', 24: 'i32', 25: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {23: 1, 24: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25), equal_to_1=(23, 24), ids_of_folded_args=(23, 24), divisible_by_8=(25,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 11, 'num_reduction': 8, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, out_ptr0, out_ptr2, out_ptr3, out_ptr4, out_ptr5, out_ptr6, out_ptr7, out_ptr8, out_ptr9, out_ptr10, out_ptr11, out_ptr12, load_seed_offset, load_seed_offset1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        tmp27 = tl.load(in_ptr5 + (0))
        tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
        tmp33 = tl.load(in_ptr5 + (1))
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        _tmp51 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        _tmp57 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp62 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        _tmp69 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        _tmp74 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        _tmp88 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp92 = tl.full([XBLOCK, RBLOCK], 0, tl.int1)
        _tmp104 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0).to(tl.int1)
            tmp1 = tl.load(in_ptr1 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr3 + (2*r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tl.load(in_ptr3 + (1 + (2*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp26 = tl.load(in_ptr4 + (2*r0), rmask, eviction_policy='evict_last', other=0.0).to(tl.float32)
            tmp32 = tl.load(in_ptr4 + (1 + (2*r0)), rmask, eviction_policy='evict_last', other=0.0).to(tl.float32)
            tmp43 = tl.load(in_ptr6 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp44 = tl.load(in_ptr7 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp53 = tl.load(in_ptr8 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.full([1, 1], 0, tl.int32)
            tmp3 = tl.where(tmp0, tmp2, tmp1)
            tmp4 = tl.full([1, 1], 1, tl.int32)
            tmp5 = tmp3 + tmp4
            tmp6 = tl.load(in_ptr2 + load_seed_offset)
            tmp7 = r0
            tmp8 = tl.rand(tmp6, (tmp7).to(tl.uint32))
            tmp9 = tl.full([1, 1], 16, tl.int32)
            tmp10 = tmp5 >= tmp9
            tmp13 = tmp11 > tmp12
            tmp14 = tmp10 | tmp13
            tmp15 = 0.1
            tmp16 = tmp8 < tmp15
            tmp17 = tmp16.to(tl.int32)
            tmp18 = tl.load(in_ptr2 + load_seed_offset1)
            tmp19 = tl.full([1, 1], 2, tl.int64)
            tmp20 = tl.full([1, 1], 17, tl.int64)
            tmp21 = triton_helpers.randint64(tmp18, (tmp7).to(tl.uint32), tmp19, tmp20)
            tmp22 = tmp21.to(tl.int32)
            tmp23 = tmp17 * tmp22
            tmp24 = tmp5 >= tmp23
            tmp25 = tmp14 & tmp24
            tmp29 = tmp28.to(tl.float32)
            tmp30 = tmp26 + tmp29
            tmp31 = tmp30.to(tl.float32)
            tmp35 = tmp34.to(tl.float32)
            tmp36 = tmp32 + tmp35
            tmp37 = tmp36.to(tl.float32)
            tmp38 = triton_helpers.maximum(tmp31, tmp37)
            tmp39 = tl.where(tmp10, tmp31, tmp38)
            tmp40 = tl.sigmoid(tmp39)
            tmp41 = tl.sigmoid(tmp12)
            tmp42 = tmp41 - tmp40
            tmp45 = tmp43 == tmp44
            tmp46 = tl.full([1, 1], 0, tl.int64)
            tmp47 = tmp44 > tmp46
            tmp48 = tmp25 & tmp47
            tmp49 = tmp48.to(tl.int64)
            tmp50 = tl.broadcast_to(tmp49, [XBLOCK, RBLOCK])
            tmp52 = _tmp51 + tmp50
            _tmp51 = tl.where(rmask, tmp52, _tmp51)
            tmp54 = 0.0
            tmp55 = tl.where(tmp48, tmp53, tmp54)
            tmp56 = tl.broadcast_to(tmp55, [XBLOCK, RBLOCK])
            tmp58 = _tmp57 + tmp56
            _tmp57 = tl.where(rmask, tmp58, _tmp57)
            tmp59 = tmp48 & tmp45
            tmp60 = tmp59.to(tl.int64)
            tmp61 = tl.broadcast_to(tmp60, [XBLOCK, RBLOCK])
            tmp63 = _tmp62 + tmp61
            _tmp62 = tl.where(rmask, tmp63, _tmp62)
            tmp64 = tmp11 >= tmp54
            tmp65 = tmp64 == tmp45
            tmp66 = tmp48 & tmp65
            tmp67 = tmp66.to(tl.int64)
            tmp68 = tl.broadcast_to(tmp67, [XBLOCK, RBLOCK])
            tmp70 = _tmp69 + tmp68
            _tmp69 = tl.where(rmask, tmp70, _tmp69)
            tmp71 = tl.where(tmp48, tmp5, tmp2)
            tmp72 = tmp71.to(tl.int64)
            tmp73 = tl.broadcast_to(tmp72, [XBLOCK, RBLOCK])
            tmp75 = _tmp74 + tmp73
            _tmp74 = tl.where(rmask, tmp75, _tmp74)
            tmp76 = tmp45.to(tl.float32)
            tmp77 = 1.0
            tmp78 = tmp77 - tmp76
            tmp79 = tmp78 * tmp11
            tmp80 = triton_helpers.minimum(tmp54, tmp11)
            tmp81 = tl_math.abs(tmp11)
            tmp82 = -tmp81
            tmp83 = tl_math.exp(tmp82)
            tmp84 = libdevice.log1p(tmp83)
            tmp85 = tmp80 - tmp84
            tmp86 = tmp79 - tmp85
            tmp87 = tl.broadcast_to(tmp86, [XBLOCK, RBLOCK])
            tmp89 = _tmp88 + tmp87
            _tmp88 = tl.where(rmask, tmp89, _tmp88)
            tmp90 = tmp25 == 0
            tmp91 = tl.broadcast_to(tmp90, [XBLOCK, RBLOCK])
            tmp93 = _tmp92 | tmp91
            _tmp92 = tl.where(rmask, tmp93, _tmp92)
            tmp94 = tmp77 - tmp40
            tmp95 = tmp94 * tmp12
            tmp96 = triton_helpers.minimum(tmp54, tmp12)
            tmp97 = tl_math.abs(tmp12)
            tmp98 = -tmp97
            tmp99 = tl_math.exp(tmp98)
            tmp100 = libdevice.log1p(tmp99)
            tmp101 = tmp96 - tmp100
            tmp102 = tmp95 - tmp101
            tmp103 = tl.broadcast_to(tmp102, [XBLOCK, RBLOCK])
            tmp105 = _tmp104 + tmp103
            _tmp104 = tl.where(rmask, tmp105, _tmp104)
            tl.store(out_ptr0 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp5, rmask)
            tl.store(out_ptr2 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp25, rmask)
            tl.store(out_ptr3 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp40, rmask)
            tl.store(out_ptr4 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp42, rmask)
            tl.store(out_ptr5 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp45, rmask)
        tmp51 = tl.sum(_tmp51, 1)[:, None]
        tl.store(out_ptr6 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp51, None)
        tmp57 = tl.sum(_tmp57, 1)[:, None]
        tl.store(out_ptr7 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp57, None)
        tmp62 = tl.sum(_tmp62, 1)[:, None]
        tl.store(out_ptr8 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp62, None)
        tmp69 = tl.sum(_tmp69, 1)[:, None]
        tl.store(out_ptr9 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp69, None)
        tmp74 = tl.sum(_tmp74, 1)[:, None]
        tl.store(out_ptr10 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp74, None)
        tmp88 = tl.sum(_tmp88, 1)[:, None]
        tl.store(out_ptr11 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp88, None)
        tmp92 = triton_helpers.any(_tmp92.to(tl.int8), 1)[:, None].to(tl.int1)
        tmp104 = tl.sum(_tmp104, 1)[:, None]
        tl.store(out_ptr12 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp104, None)
        tmp106 = tmp92 == 0
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp106, None)


op902: SchedulerNode(ComputedBuffer)
op902.writes = [MemoryDep('buf902', c0, {c0: 15}, None)]
op902.unmet_dependencies = 
    [   MemoryDep('buf886', c0, {c0: 115200}, None),
        MemoryDep('buf888', ((7680*c0 + c1)//900), {c0: 15, c1: 7680}, None),
        MemoryDep('buf898', tmp0 + 9008*(((7680*c0 + c1)//900)) + 10*ModularIndexing(7680*c0 + c1, 1, 900), {c0: 15, c1: 7680}, None),
        MemoryDep('buf899', tmp0 + 9088*(((7680*c0 + c1)//900)) + 10*ModularIndexing(7680*c0 + c1, 1, 900), {c0: 15, c1: 7680}, None),
        MemoryDep('buf900', c0, {c0: 115200}, None),
        MemoryDep('buf901', c0, {c0: 115200}, None)]
op902.met_dependencies = []
op902.outputs = [
    buf902: ComputedBuffer
    buf902.layout = FixedLayout('cuda', torch.float64, size=[15], stride=[1])
    buf902.users = [NodeUser(node=SchedulerNode(name='op903'), can_inplace=False, is_weak=False)]
]
op902.group.device = cuda:0
op902.group.iteration = (15, 7680)
op902.sizes = ([15], [7680])
buf886_layout = FixedLayout('cuda', torch.bool, size=[128, 900], stride=[900, 1])
buf901_layout = FixedLayout('cuda', torch.int64, size=[128, 900], stride=[900, 1])
buf899_layout = FixedLayout('cuda', torch.bool, size=[128, 900, 10], stride=[9088, 10, 1])
buf898_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 10], stride=[9008, 10, 1])
buf900_layout = FixedLayout('cuda', torch.float64, size=[128, 900, 1], stride=[900, 1, 1])
buf888_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf902_layout = FixedLayout('cuda', torch.float64, size=[15], stride=[1])
class op902_loop_body:
    var_ranges = {z0: 15, z1: 7680}
    index0 = 7680*z0 + z1
    index1 = indirect0 + 9088*(((7680*z0 + z1)//900)) + 10*ModularIndexing(7680*z0 + z1, 1, 900)
    index2 = indirect0 + 9008*(((7680*z0 + z1)//900)) + 10*ModularIndexing(7680*z0 + z1, 1, 900)
    index3 = ((7680*z0 + z1)//900)
    index4 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf886', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf901', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf899', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf898', get_index_3)
        constant = ops.constant(1.0, torch.float64)
        sub = ops.sub(constant, load_3)
        constant_1 = ops.constant(1e-30, torch.float64)
        add = ops.add(sub, constant_1)
        reciprocal = ops.reciprocal(add)
        constant_2 = ops.constant(1.0, torch.float64)
        mul = ops.mul(reciprocal, constant_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf898', get_index_4)
        constant_3 = ops.constant(1.0, torch.float64)
        add_1 = ops.add(load_4, constant_3)
        where = ops.where(load_2, mul, add_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf900', get_index_5)
        truediv = ops.truediv(where, load_5)
        libdevice_log = ops.libdevice_log(truediv)
        constant_4 = ops.constant(0.0, torch.float64)
        where_1 = ops.where(load, libdevice_log, constant_4)
        neg = ops.neg(where_1)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('buf888', get_index_6)
        to_dtype = ops.to_dtype(load_6, torch.float64, src_dtype = torch.int64)
        truediv_1 = ops.truediv(neg, to_dtype)
        reduction = ops.reduction(torch.float64, torch.float64, 'sum', truediv_1)
        get_index_7 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf902', get_index_7, reduction)
        return store_reduction
op902 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[16, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i1', 1: '*i64', 2: '*i1', 3: '*fp64', 4: '*fp64', 5: '*i64', 6: '*fp64', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(8,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 15
        rnumel = 7680
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (7680*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0).to(tl.int1)
            tmp1 = tl.load(in_ptr1 + (r1 + (7680*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp18 = tl.load(in_ptr4 + (r1 + (7680*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp24 = tl.load(in_ptr5 + (((r1 + (7680*x0)) // 900)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.full([XBLOCK, RBLOCK], 10, tl.int32)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp1 < 0
            tmp5 = tl.where(tmp4, tmp3, tmp1)
            tl.device_assert(((0 <= tmp5) & (tmp5 < 10)) | ~(rmask & xmask), "index out of bounds: 0 <= tmp5 < 10")
            tmp7 = tl.load(in_ptr2 + (tmp5 + (10*((r1 + (7680*x0)) % 900)) + (9088*((r1 + (7680*x0)) // 900))), rmask & xmask, eviction_policy='evict_last', other=0.0).to(tl.int1)
            tmp8 = tl.load(in_ptr3 + (tmp5 + (10*((r1 + (7680*x0)) % 900)) + (9008*((r1 + (7680*x0)) // 900))), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp9 = tl.full([1, 1], 1.0, tl.float64)
            tmp10 = tmp9 - tmp8
            tmp11 = tl.full([1, 1], 1e-30, tl.float64)
            tmp12 = tmp10 + tmp11
            tmp13 = tl.full([1, 1], 1, tl.int32)
            tmp14 = tmp13 / tmp12
            tmp15 = tmp14 * tmp9
            tmp16 = tmp8 + tmp9
            tmp17 = tl.where(tmp7, tmp15, tmp16)
            tmp19 = tmp17 / tmp18
            tmp20 = libdevice.log(tmp19)
            tmp21 = tl.full([1, 1], 0.0, tl.float64)
            tmp22 = tl.where(tmp0, tmp20, tmp21)
            tmp23 = -tmp22
            tmp25 = tmp24.to(tl.float64)
            tmp26 = tmp23 / tmp25
            tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
            tmp29 = _tmp28 + tmp27
            _tmp28 = tl.where(rmask & xmask, tmp29, _tmp28)
        tmp28 = tl.sum(_tmp28, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp28, xmask)


op903_op911: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op903_op911.writes = [MemoryDep('buf903', 0, {}, None), MemoryDep('buf911', 0, {}, None)]
op903_op911.unmet_dependencies = 
    [   MemoryDep('buf902', c0, {c0: 15}, None),
        MemoryDep('buf904', 0, {}, None),
        MemoryDep('buf905', 0, {}, None)]
op903_op911.met_dependencies = []
op903_op911.outputs = [
    buf903: ComputedBuffer
    buf903.layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
    buf903.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf911: ComputedBuffer
    buf911.layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
    buf911.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op903_op911.snodes[0] =
op903: SchedulerNode(ComputedBuffer)
op903.writes = [MemoryDep('buf903', 0, {}, None)]
op903.unmet_dependencies = [MemoryDep('buf902', c0, {c0: 15}, None)]
op903.met_dependencies = []
op903.outputs = [
    buf903: ComputedBuffer
    buf903.layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
    buf903.users = [
        NodeUser(node=SchedulerNode(name='op911'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op903.group.device = cuda:0
op903.group.iteration = (1, 15)
op903.sizes = ([], [15])
buf902_layout = FixedLayout('cuda', torch.float64, size=[15], stride=[1])
buf903_layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
class op903_loop_body:
    var_ranges = {z0: 15}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf902', get_index)
        reduction = ops.reduction(torch.float64, torch.float64, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf903', get_index_1, reduction)
        return store_reduction
op903 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp64', 1: '*fp64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {2: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(2,), ids_of_folded_args=(2,), divisible_by_8=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 15
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), rmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.sum(tmp3, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp4, None)
op903_op911.snodes[1] =
op911: SchedulerNode(ComputedBuffer)
op911.writes = [MemoryDep('buf911', 0, {}, None)]
op911.unmet_dependencies = 
    [   MemoryDep('buf903', 0, {}, None),
        MemoryDep('buf904', 0, {}, None),
        MemoryDep('buf905', 0, {}, None)]
op911.met_dependencies = []
op911.outputs = [
    buf911: ComputedBuffer
    buf911.layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
    buf911.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op911.group.device = cuda:0
op911.group.iteration = (1, 1)
op911.sizes = ([], [])
buf903_layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
buf904_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf905_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf911_layout = FixedLayout('cuda', torch.float64, size=[], stride=[])
class op911_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf903', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf904', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf905', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        to_dtype = ops.to_dtype(mul, torch.float64, src_dtype = torch.float32)
        add_1 = ops.add(load, to_dtype)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf911', get_index_3, add_1, None)
        return store
op911 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp64', 1: '*fp32', 2: '*fp32', 3: '*fp64', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {4: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(4,), ids_of_folded_args=(4,), divisible_by_8=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr1 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tl.load(in_ptr2 + (0))
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK])
        tmp6 = tmp3 + tmp5
        tmp7 = 0.5
        tmp8 = tmp6 * tmp7
        tmp9 = tmp8.to(tl.float64)
        tmp10 = tmp1 + tmp9
        tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp10, None)
op903_op911 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 16],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp64', 1: '*fp32', 2: '*fp32', 3: '*fp64', 4: '*fp64', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {5: 1}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(5,), ids_of_folded_args=(5,), divisible_by_8=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 15
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), rmask, other=0.0)
        tmp5 = tl.load(in_ptr1 + (0))
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, 1])
        tmp7 = tl.load(in_ptr2 + (0))
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, 1])
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.sum(tmp3, 1)[:, None]
        tmp9 = tmp6 + tmp8
        tmp10 = 0.5
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.float64)
        tmp13 = tmp4 + tmp12
        tl.store(out_ptr1 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp13, None)
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp4, None)


op908_op909: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op908_op909.writes = 
    [   MemoryDep('buf908', c0, {c0: 16384}, None),
        MemoryDep('buf909', c0, {c0: 16384}, None)]
op908_op909.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 128}, None)]
op908_op909.met_dependencies = 
    [   MemoryDep('primals_17', c1, {c0: 128, c1: 128}, None),
        StarDep(name='primals_16', mode=None)]
op908_op909.outputs = [
    buf908: ComputedBuffer
    buf908.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf908.users = [NodeUser(node=SchedulerNode(name='op909'), can_inplace=True, is_weak=False)]
    buf909: ComputedBuffer
    buf909.layout = MutationLayoutSHOULDREMOVE('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf909.mutations = ['primals_16']
    buf909.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op908_op909.snodes[0] =
op908: SchedulerNode(ComputedBuffer)
op908.writes = [MemoryDep('buf908', c0, {c0: 16384}, None)]
op908.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 128}, None)]
op908.met_dependencies = [MemoryDep('primals_17', c1, {c0: 128, c1: 128}, None)]
op908.outputs = [
    buf908: ComputedBuffer
    buf908.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf908.users = [NodeUser(node=SchedulerNode(name='op909'), can_inplace=True, is_weak=False)]
]
op908.group.device = cuda:0
op908.group.iteration = (16384, 1)
op908.sizes = ([128, 128], [])
buf2_layout = FixedLayout('cuda', torch.int32, size=[128], stride=[1])
primals_17_layout = FixedLayout('cuda', torch.float32, size=[1, 128], stride=[128, 1])
buf908_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
class op908_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = z0
    index1 = z1
    index2 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_17', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf908', get_index_2, load_1, None)
        return store
op908 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 128)
        x0 = xindex % 128
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 1, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 1), "index out of bounds: 0 <= tmp4 < 1")
        tl.store(out_ptr0 + (x2), tmp6, None)
op908_op909.snodes[1] =
op909: SchedulerNode(ComputedBuffer)
op909.writes = [MemoryDep('buf909', c0, {c0: 16384}, None)]
op909.unmet_dependencies = [MemoryDep('buf908', c0, {c0: 16384}, None)]
op909.met_dependencies = [StarDep(name='primals_16', mode=None)]
op909.outputs = [
    buf909: ComputedBuffer
    buf909.layout = MutationLayoutSHOULDREMOVE('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf909.mutations = ['primals_16']
    buf909.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op909.group.device = cuda:0
op909.group.iteration = (16384, 1)
op909.sizes = ([16384], [])
buf908_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
primals_16_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf909_layout = MutationLayoutSHOULDREMOVE('cuda', torch.float32, size=[128, 128], stride=[128, 1])
class op909_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf908', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf909', get_index_1, load, None)
        return store
op909 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tl.store(out_ptr0 + (x0), tmp0, None)
op908_op909 Triton code:
    import triton
    import triton.language as tl

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*i32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=86, major=8, regs_per_multiprocessor=65536, max_threads_per_multi_processor=1536, multi_processor_count=46), 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['out_ptr1'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'FC967F83BA4CF8415FD262B28D1888EF64FD6CCCC58BE90334D6C1F55D77F05E', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': True, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr1, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 128)
        x0 = xindex % 128
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 1, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 1), "index out of bounds: 0 <= tmp4 < 1")
        tl.store(out_ptr1 + (x2), tmp6, None)


